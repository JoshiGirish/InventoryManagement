:py:mod:`InvManage.views`
=========================

.. py:module:: InvManage.views


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   company_views/index.rst
   consumer_views/index.rst
   goods_receipt_note_views/index.rst
   history_views/index.rst
   product_views/index.rst
   purchase_order_views/index.rst
   sales_order_views/index.rst
   vendor_views/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   InvManage.views.ProductFilter
   InvManage.views.ProductBasicInfoForm
   InvManage.views.ProductDetailedInfoForm
   InvManage.views.ProductPricingForm
   InvManage.views.ProductPurchaseEntryForm
   InvManage.views.ProductSalesEntryForm
   InvManage.views.ProductStatusForm
   InvManage.views.ProductStorageInfoForm
   InvManage.views.PurchaseOrderBasicInfo
   InvManage.views.GRNInfo
   InvManage.views.GRNEntryForm
   InvManage.views.ThumbnailForm
   InvManage.views.SalesOrderBasicInfo
   InvManage.views.ShippingAddressForm
   InvManage.views.VendorForm
   InvManage.views.ConsumerForm
   InvManage.views.CompanyForm
   InvManage.views.HistoryForm
   InvManage.views.CommunicationForm
   InvManage.views.PurchaseDataForm
   InvManage.views.BankAccountForm
   InvManage.views.Product
   InvManage.views.ProductPurchaseEntry
   InvManage.views.GRNEntry
   InvManage.views.ProductSalesEntry
   InvManage.views.SalesOrder
   InvManage.views.PurchaseOrder
   InvManage.views.GoodsReceiptNote
   InvManage.views.Consumer
   InvManage.views.Vendor
   InvManage.views.Company
   InvManage.views.PurchaseInvoice
   InvManage.views.SalesInvoice
   InvManage.views.FilterState
   InvManage.views.FilterColumn
   InvManage.views.Object
   InvManage.views.EventCard
   InvManage.views.EventType
   InvManage.views.ObjectModel
   InvManage.views.HistoryFilterState
   InvManage.views.ShippingAddress
   InvManage.views.PurchaseData
   InvManage.views.Communication
   InvManage.views.BankAccount
   InvManage.views.GoodsReceiptNoteFilter
   InvManage.views.GRNEntrySerializer
   InvManage.views.GRNEntryWithPORefSerializer
   InvManage.views.GRNInvoiceSerializer
   InvManage.views.GoodsReceiptNoteSerializer
   InvManage.views.PPEntrySerializer
   InvManage.views.ProductSerializer
   InvManage.views.PurchaseInvoiceSerializer
   InvManage.views.GRNInvoice
   InvManage.views.ProductBasicInfoForm
   InvManage.views.ProductDetailedInfoForm
   InvManage.views.ProductPricingForm
   InvManage.views.ProductPurchaseEntryForm
   InvManage.views.ProductSalesEntryForm
   InvManage.views.ProductStatusForm
   InvManage.views.ProductStorageInfoForm
   InvManage.views.PurchaseOrderBasicInfo
   InvManage.views.GRNInfo
   InvManage.views.GRNEntryForm
   InvManage.views.ThumbnailForm
   InvManage.views.SalesOrderBasicInfo
   InvManage.views.ShippingAddressForm
   InvManage.views.VendorForm
   InvManage.views.ConsumerForm
   InvManage.views.CompanyForm
   InvManage.views.HistoryForm
   InvManage.views.CommunicationForm
   InvManage.views.PurchaseDataForm
   InvManage.views.BankAccountForm
   InvManage.views.Product
   InvManage.views.ProductPurchaseEntry
   InvManage.views.GRNEntry
   InvManage.views.ProductSalesEntry
   InvManage.views.SalesOrder
   InvManage.views.PurchaseOrder
   InvManage.views.GoodsReceiptNote
   InvManage.views.Consumer
   InvManage.views.Vendor
   InvManage.views.Company
   InvManage.views.PurchaseInvoice
   InvManage.views.SalesInvoice
   InvManage.views.FilterState
   InvManage.views.FilterColumn
   InvManage.views.Object
   InvManage.views.EventCard
   InvManage.views.EventType
   InvManage.views.ObjectModel
   InvManage.views.HistoryFilterState
   InvManage.views.ShippingAddress
   InvManage.views.PurchaseData
   InvManage.views.Communication
   InvManage.views.BankAccount
   InvManage.views.PurchaseOrderFilter
   InvManage.views.ProductSerializer
   InvManage.views.PPEntrySerializer
   InvManage.views.PurchaseInvoiceSerializer
   InvManage.views.ProductBasicInfoForm
   InvManage.views.ProductDetailedInfoForm
   InvManage.views.ProductPricingForm
   InvManage.views.ProductPurchaseEntryForm
   InvManage.views.ProductSalesEntryForm
   InvManage.views.ProductStatusForm
   InvManage.views.ProductStorageInfoForm
   InvManage.views.PurchaseOrderBasicInfo
   InvManage.views.GRNInfo
   InvManage.views.GRNEntryForm
   InvManage.views.ThumbnailForm
   InvManage.views.SalesOrderBasicInfo
   InvManage.views.ShippingAddressForm
   InvManage.views.VendorForm
   InvManage.views.ConsumerForm
   InvManage.views.CompanyForm
   InvManage.views.HistoryForm
   InvManage.views.CommunicationForm
   InvManage.views.PurchaseDataForm
   InvManage.views.BankAccountForm
   InvManage.views.Product
   InvManage.views.ProductPurchaseEntry
   InvManage.views.GRNEntry
   InvManage.views.ProductSalesEntry
   InvManage.views.SalesOrder
   InvManage.views.PurchaseOrder
   InvManage.views.GoodsReceiptNote
   InvManage.views.Consumer
   InvManage.views.Vendor
   InvManage.views.Company
   InvManage.views.PurchaseInvoice
   InvManage.views.SalesInvoice
   InvManage.views.FilterState
   InvManage.views.FilterColumn
   InvManage.views.Object
   InvManage.views.EventCard
   InvManage.views.EventType
   InvManage.views.ObjectModel
   InvManage.views.HistoryFilterState
   InvManage.views.ShippingAddress
   InvManage.views.PurchaseData
   InvManage.views.Communication
   InvManage.views.BankAccount
   InvManage.views.CompanySerializer
   InvManage.views.ShippingAddressSerializer
   InvManage.views.CompanyFilter
   InvManage.views.ProductBasicInfoForm
   InvManage.views.ProductDetailedInfoForm
   InvManage.views.ProductPricingForm
   InvManage.views.ProductPurchaseEntryForm
   InvManage.views.ProductSalesEntryForm
   InvManage.views.ProductStatusForm
   InvManage.views.ProductStorageInfoForm
   InvManage.views.PurchaseOrderBasicInfo
   InvManage.views.GRNInfo
   InvManage.views.GRNEntryForm
   InvManage.views.ThumbnailForm
   InvManage.views.SalesOrderBasicInfo
   InvManage.views.ShippingAddressForm
   InvManage.views.VendorForm
   InvManage.views.ConsumerForm
   InvManage.views.CompanyForm
   InvManage.views.HistoryForm
   InvManage.views.CommunicationForm
   InvManage.views.PurchaseDataForm
   InvManage.views.BankAccountForm
   InvManage.views.Product
   InvManage.views.ProductPurchaseEntry
   InvManage.views.GRNEntry
   InvManage.views.ProductSalesEntry
   InvManage.views.SalesOrder
   InvManage.views.PurchaseOrder
   InvManage.views.GoodsReceiptNote
   InvManage.views.Consumer
   InvManage.views.Vendor
   InvManage.views.Company
   InvManage.views.PurchaseInvoice
   InvManage.views.SalesInvoice
   InvManage.views.FilterState
   InvManage.views.FilterColumn
   InvManage.views.Object
   InvManage.views.EventCard
   InvManage.views.EventType
   InvManage.views.ObjectModel
   InvManage.views.HistoryFilterState
   InvManage.views.ShippingAddress
   InvManage.views.PurchaseData
   InvManage.views.Communication
   InvManage.views.BankAccount
   InvManage.views.VendorFilter
   InvManage.views.VendorSerializer
   InvManage.views.ProductBasicInfoForm
   InvManage.views.ProductDetailedInfoForm
   InvManage.views.ProductPricingForm
   InvManage.views.ProductPurchaseEntryForm
   InvManage.views.ProductSalesEntryForm
   InvManage.views.ProductStatusForm
   InvManage.views.ProductStorageInfoForm
   InvManage.views.PurchaseOrderBasicInfo
   InvManage.views.GRNInfo
   InvManage.views.GRNEntryForm
   InvManage.views.ThumbnailForm
   InvManage.views.SalesOrderBasicInfo
   InvManage.views.ShippingAddressForm
   InvManage.views.VendorForm
   InvManage.views.ConsumerForm
   InvManage.views.CompanyForm
   InvManage.views.HistoryForm
   InvManage.views.CommunicationForm
   InvManage.views.PurchaseDataForm
   InvManage.views.BankAccountForm
   InvManage.views.Product
   InvManage.views.ProductPurchaseEntry
   InvManage.views.GRNEntry
   InvManage.views.ProductSalesEntry
   InvManage.views.SalesOrder
   InvManage.views.PurchaseOrder
   InvManage.views.GoodsReceiptNote
   InvManage.views.Consumer
   InvManage.views.Vendor
   InvManage.views.Company
   InvManage.views.PurchaseInvoice
   InvManage.views.SalesInvoice
   InvManage.views.FilterState
   InvManage.views.FilterColumn
   InvManage.views.Object
   InvManage.views.EventCard
   InvManage.views.EventType
   InvManage.views.ObjectModel
   InvManage.views.HistoryFilterState
   InvManage.views.ShippingAddress
   InvManage.views.PurchaseData
   InvManage.views.Communication
   InvManage.views.BankAccount
   InvManage.views.ConsumerFilter
   InvManage.views.ConsumerSerializer
   InvManage.views.ProductBasicInfoForm
   InvManage.views.ProductDetailedInfoForm
   InvManage.views.ProductPricingForm
   InvManage.views.ProductPurchaseEntryForm
   InvManage.views.ProductSalesEntryForm
   InvManage.views.ProductStatusForm
   InvManage.views.ProductStorageInfoForm
   InvManage.views.PurchaseOrderBasicInfo
   InvManage.views.GRNInfo
   InvManage.views.GRNEntryForm
   InvManage.views.ThumbnailForm
   InvManage.views.SalesOrderBasicInfo
   InvManage.views.ShippingAddressForm
   InvManage.views.VendorForm
   InvManage.views.ConsumerForm
   InvManage.views.CompanyForm
   InvManage.views.HistoryForm
   InvManage.views.CommunicationForm
   InvManage.views.PurchaseDataForm
   InvManage.views.BankAccountForm
   InvManage.views.Product
   InvManage.views.ProductPurchaseEntry
   InvManage.views.GRNEntry
   InvManage.views.ProductSalesEntry
   InvManage.views.SalesOrder
   InvManage.views.PurchaseOrder
   InvManage.views.GoodsReceiptNote
   InvManage.views.Consumer
   InvManage.views.Vendor
   InvManage.views.Company
   InvManage.views.PurchaseInvoice
   InvManage.views.SalesInvoice
   InvManage.views.FilterState
   InvManage.views.FilterColumn
   InvManage.views.Object
   InvManage.views.EventCard
   InvManage.views.EventType
   InvManage.views.ObjectModel
   InvManage.views.HistoryFilterState
   InvManage.views.ShippingAddress
   InvManage.views.PurchaseData
   InvManage.views.Communication
   InvManage.views.BankAccount
   InvManage.views.SalesOrderFilter
   InvManage.views.ProductSerializer
   InvManage.views.PSEntrySerializer
   InvManage.views.SalesInvoiceSerializer
   InvManage.views.ProductBasicInfoForm
   InvManage.views.ProductDetailedInfoForm
   InvManage.views.ProductPricingForm
   InvManage.views.ProductPurchaseEntryForm
   InvManage.views.ProductSalesEntryForm
   InvManage.views.ProductStatusForm
   InvManage.views.ProductStorageInfoForm
   InvManage.views.PurchaseOrderBasicInfo
   InvManage.views.GRNInfo
   InvManage.views.GRNEntryForm
   InvManage.views.ThumbnailForm
   InvManage.views.SalesOrderBasicInfo
   InvManage.views.ShippingAddressForm
   InvManage.views.VendorForm
   InvManage.views.ConsumerForm
   InvManage.views.CompanyForm
   InvManage.views.HistoryForm
   InvManage.views.CommunicationForm
   InvManage.views.PurchaseDataForm
   InvManage.views.BankAccountForm
   InvManage.views.Product
   InvManage.views.ProductPurchaseEntry
   InvManage.views.GRNEntry
   InvManage.views.ProductSalesEntry
   InvManage.views.SalesOrder
   InvManage.views.PurchaseOrder
   InvManage.views.GoodsReceiptNote
   InvManage.views.Consumer
   InvManage.views.Vendor
   InvManage.views.Company
   InvManage.views.PurchaseInvoice
   InvManage.views.SalesInvoice
   InvManage.views.FilterState
   InvManage.views.FilterColumn
   InvManage.views.Object
   InvManage.views.EventCard
   InvManage.views.EventType
   InvManage.views.ObjectModel
   InvManage.views.HistoryFilterState
   InvManage.views.ShippingAddress
   InvManage.views.PurchaseData
   InvManage.views.Communication
   InvManage.views.BankAccount
   InvManage.views.EventCard
   InvManage.views.HistoryFilterState
   InvManage.views.EventCardFilter
   InvManage.views.HistoryFilterStateSerializer
   InvManage.views.HistoryForm



Functions
~~~~~~~~~

.. autoapisummary::

   InvManage.views.create_product_view
   InvManage.views.update_product_view
   InvManage.views.delete_product_view
   InvManage.views.display_products_view
   InvManage.views.uploadCSV
   InvManage.views.get_columns
   InvManage.views.sort_ascending_descending
   InvManage.views.change_column_position
   InvManage.views.paginate
   InvManage.views.create_grn_view
   InvManage.views.update_grn_view
   InvManage.views.delete_grn_view
   InvManage.views.display_grns_view
   InvManage.views.print_grn_view
   InvManage.views.get_columns
   InvManage.views.sort_ascending_descending
   InvManage.views.change_column_position
   InvManage.views.paginate
   InvManage.views.create_purchase_order_view
   InvManage.views.update_purchase_order_view
   InvManage.views.display_purchase_orders_view
   InvManage.views.delete_purchase_order_view
   InvManage.views.print_purchase_order_view
   InvManage.views.get_product_purchase_entries_view
   InvManage.views.get_columns
   InvManage.views.sort_ascending_descending
   InvManage.views.change_column_position
   InvManage.views.paginate
   InvManage.views.create_company_view
   InvManage.views.update_company_view
   InvManage.views.delete_company_view
   InvManage.views.display_companies_view
   InvManage.views.get_columns
   InvManage.views.sort_ascending_descending
   InvManage.views.change_column_position
   InvManage.views.paginate
   InvManage.views.create_vendor_view
   InvManage.views.update_vendor_view
   InvManage.views.delete_vendor_view
   InvManage.views.display_vendors_view
   InvManage.views.get_vendor
   InvManage.views.get_columns
   InvManage.views.sort_ascending_descending
   InvManage.views.change_column_position
   InvManage.views.paginate
   InvManage.views.create_consumer_view
   InvManage.views.update_consumer_view
   InvManage.views.delete_consumer_view
   InvManage.views.display_consumers_view
   InvManage.views.get_consumer
   InvManage.views.get_columns
   InvManage.views.sort_ascending_descending
   InvManage.views.change_column_position
   InvManage.views.paginate
   InvManage.views.create_sales_order_view
   InvManage.views.update_sales_order_view
   InvManage.views.delete_sales_order_view
   InvManage.views.display_sales_orders_view
   InvManage.views.print_sales_order_view
   InvManage.views.get_columns
   InvManage.views.sort_ascending_descending
   InvManage.views.change_column_position
   InvManage.views.paginate
   InvManage.views.display_history_view



.. py:class:: ProductFilter


   Bases: :py:obj:`django_filters.FilterSet`

   .. py:class:: Meta




.. py:function:: create_product_view(request)

   Creates a product on ``POST`` request, and returns a product creation form on ``GET`` request.

   .. http:get:: /product

       Gets the product creation form.

       **Example request**:

       .. sourcecode:: http

           GET /product/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9


       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: Product creation form received successfully.

   .. http:post:: /product

       Creates a product.

       **Example request**:

       .. sourcecode:: http

           POST /product/ HTTP/1.1
           Host: localhost:8000
           Content-Type: multipart/form-data;

       :form basic-name: ``Yamaha FS100C Acoustic Guitar``

       :form basic-item_type: ``Black Acoustic Guitar``

       :form basic-category: ``Musical Instrument``

       :form basic-description: ``Top: Spruce back/sides, Mahogany neck, Nato fret board, Rosewood bridge, Snorkeling frets: 20, Open chrome tuners, Finishes: Black``

       :form detailed-length: ``1056``

       :form detailed-width: ``376``

       :form detailed-height: ``140``

       :form detailed-weight: ``3.2``

       :form storage-barcode: ``036000029145``

       :form storage-expiry: ``2040-09-29``

       :form status-quantity: ``20``

       :form status-identifier: ``FS100C``

       :form status-location: ``BAY004``

       :form pricing-price: ``9990``

       :form pricing-discount: ``7``

       :resheader Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryLTR88aZAnBUSE7mv
       :statuscode 302: Redirects to ``/product``.



.. py:function:: update_product_view(request)

   Updates a product on ``POST`` request and returns the product update form on ``GET`` request.

   .. http:get:: /product/update

       Gets the product update form whose primary key matches the query parameter ``pk``.

       **Example request**:

       .. sourcecode:: http

           GET /product/update HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

       :query pk: The primary key of the product.

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: Product update form received successfully.

   .. http:post:: /product/update

       Updates the product.

       **Example request**:

       .. sourcecode:: http

           POST /product/update HTTP/1.1
           Host: localhost:8000
           Content-Type: multipart/form-data;

       :form pk: ``778``

       :form basic-name: ``Yamaha FS100C Acoustic Guitar``

       :form basic-item_type: ``Black Acoustic Guitar``

       :form basic-category: ``Musical Instrument``

       :form basic-description: ``Top: Spruce back/sides, Mahogany neck, Nato fret board, Rosewood bridge, Snorkeling frets: 20, Open chrome tuners, Finishes: Black``

       :form detailed-length: ``1056``

       :form detailed-width: ``376``

       :form detailed-height: ``140``

       :form detailed-weight: ``3.2``

       :form storage-barcode: ``036000029145``

       :form storage-expiry: ``2040-09-29``

       :form status-quantity: ``20``

       :form status-identifier: ``FS100C``

       :form status-location: ``BAY004``

       :form pricing-price: ``9990``

       :form pricing-discount: ``7``

       :resheader Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryLTR88aZAnBUSE7mv
       :statuscode 302: Redirects to ``/product``.



.. py:function:: delete_product_view(request, pk)

   Deletes the product with primary key ``product_id`` on ``POST`` request.

   .. http:post:: /product/<str:product_id>/delete

       Deletes the consumer represented by the primary key ``product_id``.

       **Example request**:

       .. sourcecode:: http

           POST /product/778/delete HTTP/1.1
           Host: localhost:8000
           Content-Type: application/x-www-form-urlencoded

       :param product_id: Product primary key.
       :resheader Content-Type: application/x-www-form-urlencoded
       :statuscode 302: Redirects to ``/product``.
       :statuscode 500: Prodcut matching query does not exist.



.. py:function:: display_products_view(request)

   Retrieves the list of products on ``GET`` request.

   .. http:get:: /products/

       Gets the list of all products.

       **Example request**:

       .. sourcecode:: http

           GET /products/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

       :form page: The page number of the products list.

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: List of products received successfully.


.. py:function:: uploadCSV(request, data)

   Imports products into database from a ``.csv`` file on ``POST`` request.
   CSV template columns: ``name``, ``category``, ``item_type``, ``description``, ``price``, ``quantity``, ``identifier``, ``location``, ``length``, ``width``, ``height``, ``weight``, ``discount``, ``barcode``, ``expiry``.

   .. http:post:: /upload/<data>/

       Imports product data.

       **Example request**:

       .. sourcecode:: http

           POST /product/778/delete HTTP/1.1
           Host: localhost:8000

       :statuscode 302: Redirects to ``/product``.



.. py:class:: ProductBasicInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for basic product information.

   .. attribute:: name

      Name of the product.

      :type: str

   .. attribute:: item_type

      Type of the product.

      :type: str

   .. attribute:: category

      Product category.

      :type: str

   .. attribute:: description

      Short description of the product.

      :type: str


.. py:class:: ProductDetailedInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for product physical details

   .. attribute:: length

      Length of the product.

      :type: str

   .. attribute:: width

      Width of the product.

      :type: str

   .. attribute:: height

      Height of the product.

      :type: str

   .. attribute:: weight

      Weight of the product.

      :type: str


.. py:class:: ProductPricingForm


   Bases: :py:obj:`django.forms.Form`

   Form for pricing information of the product.

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Default discount percentage on the product.

      :type: float


.. py:class:: ProductPurchaseEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for product purchase entry.

   .. attribute:: ppe_id

      Unique identifier of the product purchase entry.

      :type: int

   .. attribute:: product

      Product associated wit the product purchase entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product to be ordered.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product purchase.

      :type: float


.. py:class:: ProductSalesEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for product sales entry.

   .. attribute:: pse_id

      Unique identifier of the product sales entry.

      :type: int

   .. attribute:: product

      Product associated with the product sales entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product.

      :type: float


.. py:class:: ProductStatusForm


   Bases: :py:obj:`django.forms.Form`

   Form for locating and identifying the product.

   .. attribute:: quantity

      Stock quantity of the product.

      :type: int

   .. attribute:: identifier

      Unique identifier of the product.

      :type: str

   .. attribute:: location

      Physical location of the product.

      :type: str


.. py:class:: ProductStorageInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for storage information.

   .. attribute:: barcode

      Barcode of the product.

      :type: str

   .. attribute:: expiry

      Expiry date of the product.

      :type: DateField


.. py:class:: PurchaseOrderBasicInfo


   Bases: :py:obj:`django.forms.Form`

   Form for basic information of the purchase order.

   .. attribute:: vendor

      Vendor associated with the purcahse order.

      :type: Vendor

   .. attribute:: date

      Date of the purchase order creation.

      :type: DateField

   .. attribute:: po

      Purchase order number.

      :type: int

   .. attribute:: discount

      Percentage of overall discount.

      :type: float

   .. attribute:: tax

      Percentage of tax.

      :type: float

   .. attribute:: paid

      Amount paid to the vendor.

      :type: float

   .. attribute:: balance

      Balance amount to be paid to the vendor.

      :type: float

   .. attribute:: subtotal

      Total of all the product purchase entries associated with the purchase order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the purchase order including  `taxtotal`.

      :type: float


.. py:class:: GRNInfo


   Bases: :py:obj:`django.forms.Form`

   Form for goods receipt note (GRN).

   .. attribute:: vendor

      Vendor associated with the goods receipt note.

      :type: Vendor

   .. attribute:: poRef

      List of identifiers of the purchase orders from which the goods receipt note is derived.

      :type: PurchaseOrder

   .. attribute:: identifier

      Unique identifier of the goods receipt note.

      :type: str

   .. attribute:: date

      Date of GRN creation.

      :type: DateField

   .. attribute:: grnType

      Type of GRN (``auto`` or ``manual``).

      :type: str

   .. attribute:: amendNumber

      Amendment number of the GRN.

      :type: int

   .. attribute:: amendDate

      Amendment date.

      :type: DateField

   .. attribute:: transporter

      Name of the transport/shipping service.

      :type: str

   .. attribute:: vehicleNumber

      Vehicle number using which the products are shipped.

      :type: str

   .. attribute:: gateInwardNumber

      Gate inward number of the vehicle.

      :type: str

   .. attribute:: preparedBy

      Name/identifier of the person who created the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who validated the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who inspected the physical products in the goods receipt note.

      :type: str

   .. attribute:: approvedBy

      Name/identifier of the authority who approved the goods receipt note.

      :type: str


.. py:class:: GRNEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for goods receipt note entry (GRNE).

   .. attribute:: product

      Product associated with the goods receipt note entry.

      :type: Product

   .. attribute:: grne_id

      Unique identifier of the GRNE.

      :type: int

   .. attribute:: ppe_id

      Unique identifier of the product purchase entry associated with the GRNE.

      :type: int

   .. attribute:: quantity

      Ordered quantity of product with reference to product purchase entry.

      :type: int

   .. attribute:: remark

      Remarks of the quality engineer or the GRN creator about status of products received.

      :type: str

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str


.. py:class:: ThumbnailForm


   Bases: :py:obj:`django.forms.Form`

   For for product thumbnail image.

   .. attribute:: image

      Image of the product.

      :type: ImageField


.. py:class:: SalesOrderBasicInfo


   Bases: :py:obj:`django.forms.Form`

   Form for basic information on sales order.

   .. attribute:: consumer

      Consumer associated with the sales order.

      :type: Consumer

   .. attribute:: date

      Date of the sales order creation.

      :type: DateField

   .. attribute:: so

      Sales order number.

      :type: int

   .. attribute:: discount

      Percentage discount associated with the sales order.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable.

      :type: float

   .. attribute:: paid

      Amount received from the consumer.

      :type: float

   .. attribute:: balance

      Amount balance with the consumer.

      :type: float

   .. attribute:: subtotal

      Total of all the product sales entries associated with the sales order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the sales order including  `taxtotal`.

      :type: float


.. py:class:: ShippingAddressForm


   Bases: :py:obj:`django.forms.Form`

   For for shipping address.

   .. attribute:: title

      Title of the firm.

      :type: str

   .. attribute:: name

      Name of the firm.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: city

      City.

      :type: str

   .. attribute:: state

      State.

      :type: str

   .. attribute:: country

      Country.

      :type: str

   .. attribute:: website

      Official website of the firm.

      :type: URLField

   .. attribute:: post

      Postal code of the firm.

      :type: str


.. py:class:: VendorForm


   Bases: :py:obj:`django.forms.Form`

   Form for basic informaion of the vendor.

   .. attribute:: name

      Name of the vendor.

      :type: str

   .. attribute:: identifier

      Unique identifier of the vendor.

      :type: str

   .. attribute:: gstin

      GSTIN number of the vendor.

      :type: str


.. py:class:: ConsumerForm


   Bases: :py:obj:`django.forms.Form`

   Form for consumer.

   .. attribute:: name

      Name of the consumer.

      :type: str

   .. attribute:: identifier

      Unique identifier of the consumer.

      :type: str

   .. attribute:: gstin

      GSTIN number of the consumer.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Address of the consumer.

      :type: str

   .. attribute:: email

      E-mail address of the consumer.

      :type: str

   .. attribute:: location

      City of the consumer.

      :type: str


.. py:class:: CompanyForm


   Bases: :py:obj:`django.forms.Form`

   Form for company.

   .. attribute:: name

      Name of the company.

      :type: str

   .. attribute:: owner

      Name of the owner of the company.

      :type: str

   .. attribute:: gstin

      GSTIN number of the company.

      :type: str

   .. attribute:: phone

      Contact number of the company.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: email

      E-mail address of the contact person.

      :type: str

   .. attribute:: location

      City of the company.

      :type: str


.. py:class:: HistoryForm


   Bases: :py:obj:`django.forms.Form`

   Form for history view.

   .. attribute:: qlen

      Count of the events visible on the history view.

      :type: int


.. py:class:: CommunicationForm


   Bases: :py:obj:`django.forms.Form`

   Form for communication information.

   .. attribute:: language

      Language of communication.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: email

      E-mail of the contact person.

      :type: EmailField

   .. attribute:: fax

      Fax number.

      :type: str


.. py:class:: PurchaseDataForm


   Bases: :py:obj:`django.forms.Form`

   Form for purchase related data.

   .. attribute:: currency

      Currency of purchase.

      :type: str

   .. attribute:: minorder

      Minimum order quantity.

      :type: int

   .. attribute:: contactperson

      Name of the contact person.

      :type: str

   .. attribute:: refcode

      Reference code.

      :type: str

   .. attribute:: transportmode

      Mode of transport of the shipment.

      :type: str


.. py:class:: BankAccountForm


   Bases: :py:obj:`django.forms.Form`

   Form for bank account details.

   .. attribute:: name

      Name of the bank.

      :type: str

   .. attribute:: branch

      Branch number of the bank.

      :type: str

   .. attribute:: region

      City in which the branch is located.

      :type: str

   .. attribute:: route

      Transit number.

      :type: str

   .. attribute:: number

      Bank account number.

      :type: int

   .. attribute:: acctype

      Type of bank account.

      :type: str

   .. attribute:: iban

      IBAN number.

      :type: str

   .. attribute:: code

      Bank code.

      :type: str

   .. attribute:: branchcode

      Branch code.

      :type: str


.. py:class:: Product


   Bases: :py:obj:`django.db.models.Model`

   Model of the product.

   .. attribute:: name

      Name of the product.

      :type: str

   .. attribute:: category

      Product category.

      :type: str

   .. attribute:: item_type

      Type of the product.

      :type: str

   .. attribute:: description

      Short description of the product.

      :type: str

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: quantity

      Stock quantity of the product.

      :type: int

   .. attribute:: identifier

      Unique identifier of the product.

      :type: str

   .. attribute:: location

      Physical location of the product.

      :type: str

   .. attribute:: length

      Length of the product.

      :type: str

   .. attribute:: width

      Width of the product.

      :type: str

   .. attribute:: height

      Height of the product.

      :type: str

   .. attribute:: weight

      Weight of the product.

      :type: str

   .. attribute:: discount

      Default discount percentage on the product.

      :type: float

   .. attribute:: barcode

      Barcode of the product.

      :type: str

   .. attribute:: expiry

      Expiry date of the product.

      :type: DateField

   .. attribute:: image

      Image of the product.

      :type: ImageField


.. py:class:: ProductPurchaseEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the product purchase entry.

   .. attribute:: product

      Product associated wit the product purchase entry.

      :type: ModelChoiceField

   .. attribute:: quantity

      Quantity of the product to be ordered.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product purchase.

      :type: float

   .. attribute:: order

      Referenced purchase order.

      :type: PurchaseOrder

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str

   .. method:: is_complete()

      Returns the completion status (boolean).

   .. method:: pending_quantity()

      Returns the pending quantity against the entry (int).



.. py:class:: GRNEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the goods receipt note entry (GRNE).

   .. attribute:: product

      Primary key of the ``Product`` instance associated with the goods receipt note entry.

      :type: Product

   .. attribute:: quantity

      Ordered quantity of product with reference to product purchase entry.

      :type: int

   .. attribute:: grne

      Primary key of the ``GoodsReceiptNote`` instance.

      :type: int

   .. attribute:: ppe

      Primary key of the ``ProductPurchaseEntry`` instance associated with the GRNE.

      :type: int

   .. attribute:: remark

      Remarks of the quality engineer or the GRN creator about status of products received.

      :type: str

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str


.. py:class:: ProductSalesEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the product sales entry.

   .. attribute:: product

      Primary key of the ``Product`` associated with the product sales entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product.

      :type: float

   .. attribute:: order

      Primary key of the ``SalesOrder`` referenced by the entry.

      :type: SalesOrder


.. py:class:: SalesOrder


   Bases: :py:obj:`django.db.models.Model`

   Model of the sales order.

   .. attribute:: consumer

      Consumer associated with the sales order.

      :type: ModelChoiceField

   .. attribute:: date

      Date of the sales order creation.

      :type: DateField

   .. attribute:: so

      Sales order number.

      :type: int

   .. attribute:: discount

      Percentage discount associated with the sales order.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable.

      :type: float

   .. attribute:: paid

      Amount received from the consumer.

      :type: float

   .. attribute:: balance

      Amount balance with the consumer.

      :type: float

   .. attribute:: subtotal

      Total of all the product sales entries associated with the sales order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the sales order including  `taxtotal`.

      :type: float


.. py:class:: PurchaseOrder


   Bases: :py:obj:`django.db.models.Model`

   Model of the purchase order.

   .. attribute:: vendor

      Vendor associated with the purchase order.

      :type: Vendor

   .. attribute:: date

      Date and time of the purchase order creation.

      :type: DateField

   .. attribute:: po

      Purchase order number.

      :type: int

   .. attribute:: discount

      Percentage discount.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable for the purchase.

      :type: float

   .. attribute:: paid

      Amount paid against the PO.

      :type: float

   .. attribute:: balance

      Amount balance which remains to be paid.

      :type: float

   .. attribute:: subtotal

      Total of all the product purchase entries associated with the purchase order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the purchase order including  `taxtotal`.

      :type: float

   .. method:: is_complete()

      Returns the completion status (boolean).

   .. method:: pending_ppes()

      Returns list of product purchase entries which are not completed.



.. py:class:: GoodsReceiptNote


   Bases: :py:obj:`django.db.models.Model`

   Model of the goods receipt note (GRN).

   .. attribute:: vendor

      Vendor associated with the goods receipt note.

      :type: ModelChoiceField

   .. attribute:: poRef

      List of identifiers of the purchase orders from which the goods receipt note is derived.

      :type: MultipleChoiceField

   .. attribute:: identifier

      Unique identifier of the goods receipt note.

      :type: str

   .. attribute:: date

      Date of GRN creation.

      :type: DateField

   .. attribute:: grnType

      Type of GRN (``auto`` or ``manual``).

      :type: ChoiceField

   .. attribute:: amendNumber

      Amendment number of the GRN.

      :type: int

   .. attribute:: amendDate

      Amendment date.

      :type: DateField

   .. attribute:: transporter

      Name of the transport/shipping service.

      :type: str

   .. attribute:: vehicleNumber

      Vehicle number using which the products are shipped.

      :type: str

   .. attribute:: gateInwardNumber

      Gate inward number of the vehicle.

      :type: str

   .. attribute:: preparedBy

      Name/identifier of the person who created the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who validated the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who inspected the physical products in the goods receipt note.

      :type: str

   .. attribute:: approvedBy

      Name/identifier of the authority who approved the goods receipt note.

      :type: str


.. py:class:: Consumer


   Bases: :py:obj:`django.db.models.Model`

   Model of the consumer.

   .. attribute:: name

      Name of the consumer.

      :type: str

   .. attribute:: identifier

      Unique identifier of the consumer.

      :type: str

   .. attribute:: gstin

      GSTIN number of the consumer.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Address of the consumer.

      :type: str

   .. attribute:: email

      E-mail address of the consumer.

      :type: str

   .. attribute:: location

      City of the consumer.

      :type: str

   :returns: [description]
   :rtype: [type]


.. py:class:: Vendor


   Bases: :py:obj:`django.db.models.Model`

   Model of the vendor.

   .. attribute:: name

      Name of the vendor.

      :type: str

   .. attribute:: identifier

      Unique identifier of the vendor.

      :type: str

   .. attribute:: gstin

      GSTIN number of the vendor.

      :type: str

   .. attribute:: address

      Primary key of the ``ShippingAddress`` instance associated with the vendor.

      :type: ShippingAddress

   .. attribute:: communication

      Primary key of the ``Communication`` instance associated with the vendor.

      :type: Communication

   .. attribute:: backaccount

      Primary key of the ``BankAccount`` instance associated with the vendor.

      :type: BankAccount

   .. attribute:: purchasedata

      Primary key of the ``PurchaseData`` instance associated with the vendor.

      :type: PurchaseData

   :returns: String representation of the vendor name.
   :rtype: str


.. py:class:: Company


   Bases: :py:obj:`django.db.models.Model`

   Model of the company.

   .. attribute:: name

      Name of the company.

      :type: str

   .. attribute:: owner

      Owner of the company.

      :type: str

   .. attribute:: gstin

      GSTIN number of the company.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: email

      E-mail address of the contact person.

      :type: str

   .. attribute:: location

      City of the company.

      :type: str

   .. attribute:: image

      Photo/logo of the company.

      :type: ImageField

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress`` instance associated with the company.

      :type: ShippingAddress

   :returns: String representation of the company name.
   :rtype: str


.. py:class:: PurchaseInvoice


   Bases: :py:obj:`django.db.models.Model`

   Model for the purchase invoice.

   .. attribute:: company

      Primary key of the ``Company``.

      :type: Company

   .. attribute:: po

      Primary key of the ``PurchaseOrder``.

      :type: PurchaseOrder

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress``.

      :type: ShippingAddress

   .. attribute:: communication

      Primary key of the ``Communication``.

      :type: Communication


.. py:class:: SalesInvoice


   Bases: :py:obj:`django.db.models.Model`

   Model for the sales order invoice.

   .. attribute:: company

      Primary key of the ``Company``.

      :type: Company

   .. attribute:: so

      Primary key of the ``SalesOrder``.

      :type: SalesOrder

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress``.

      :type: ShippingAddress


.. py:class:: FilterState


   Bases: :py:obj:`django.db.models.Model`

   Model of the filter state.

   .. attribute:: name

      Name of the filter state.

      :type: str


.. py:class:: FilterColumn


   Bases: :py:obj:`django.db.models.Model`

   Model of the column state.

   .. attribute:: name

      Name of the column.

      :type: str

   .. attribute:: label

      Label of the column.

      :type: str

   .. attribute:: visible

      Visibility flag.

      :type: bool

   .. attribute:: position

      Index of the column.

      :type: int

   .. attribute:: state

      Primary key of the ``FilterState`` instance being referenced by the column instance.

      :type: FilterState


.. py:class:: Object


   Bases: :py:obj:`django.db.models.Model`

   Model for a generic object.

   .. attribute:: identifier

      Unique identifier of the object.

      :type: str

   .. attribute:: name

      Name of the object.

      :type: str

   .. attribute:: model

      Model associated with the object.

      :type: str


.. py:class:: EventCard


   Bases: :py:obj:`django.db.models.Model`

   Model for event card to be displayed in the history view.

   .. attribute:: obj

      Object associated with the event.

      :type: OneToOneField

   .. attribute:: objId

      Unique identifier of the object.

      :type: str

   .. attribute:: objname

      Name of the object.

      :type: str

   .. attribute:: objmodel

      Model of the object.

      :type: str

   .. attribute:: date

      Timestamp of the event.

      :type: DateField

   .. attribute:: operation

      Type of event.

      :type: str


.. py:class:: EventType


   Bases: :py:obj:`django.db.models.Model`

   Model for event type.

   .. attribute:: name

      Name of the event being triggered.

      :type: str

   .. attribute:: label

      Label associated with the event.

      :type: str

   :returns: Returns the string representation of the label when the event type is queried.
   :rtype: Label


.. py:class:: ObjectModel


   Bases: :py:obj:`django.db.models.Model`

   Model associated with an object.

   .. attribute:: name

      Name of the object.

      :type: str

   .. attribute:: label

      Label string of the object.

      :type: str

   .. attribute:: modName

      Name of the model associated with the object.

      :type: str

   :returns: Returns string representation of the label when object model is queried.
   :rtype: Label


.. py:class:: HistoryFilterState


   Bases: :py:obj:`django.db.models.Model`

   Model of filter state of the history.

   .. attribute:: params

      Paramameters of the configured filters.

      :type: str


.. py:class:: ShippingAddress


   Bases: :py:obj:`django.db.models.Model`

   Model of the shipping address.

   .. attribute:: title

      Title of the firm.

      :type: str

   .. attribute:: name

      Name of the firm.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: city

      City.

      :type: str

   .. attribute:: state

      State.

      :type: str

   .. attribute:: country

      Country.

      :type: str

   .. attribute:: website

      Official website of the firm.

      :type: URLField

   .. attribute:: post

      Postal code of the firm.

      :type: str


.. py:class:: PurchaseData


   Bases: :py:obj:`django.db.models.Model`

   Model of the purchase data.

   .. attribute:: currency

      Currency of purchase.

      :type: str

   .. attribute:: minorder

      Minimum order quantity.

      :type: int

   .. attribute:: contactperson

      Name of the contact person.

      :type: str

   .. attribute:: refcode

      Reference code.

      :type: str

   .. attribute:: transportmode

      Mode of transport of the shipment.

      :type: str


.. py:class:: Communication


   Bases: :py:obj:`django.db.models.Model`

   Model of the communication information.

   .. attribute:: language

      Language of communication.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: email

      E-mail of the contact person.

      :type: EmailField

   .. attribute:: fax

      Fax number.

      :type: str


.. py:class:: BankAccount


   Bases: :py:obj:`django.db.models.Model`

   Model of the bank account details.

   .. attribute:: name

      Name of the bank.

      :type: str

   .. attribute:: branch

      Branch number of the bank.

      :type: str

   .. attribute:: region

      City in which the branch is located.

      :type: str

   .. attribute:: route

      Transit number.

      :type: str

   .. attribute:: number

      Bank account number.

      :type: int

   .. attribute:: acctype

      Type of bank account.

      :type: str

   .. attribute:: iban

      IBAN number.

      :type: str

   .. attribute:: code

      Bank code.

      :type: str

   .. attribute:: branchcode

      Branch code.

      :type: str


.. py:function:: get_columns(state)

   Gets the columns of the display table.

   This function takes a filter state and returns an array of column names that are
   ordered depending on the position attribute of the columns. This order is important
   as the queryset will be rendered in the display table according to the column order
   in this returned array.

   :param state: Filter state of the columns.
   :type state: FilterState

   :returns: A list that dictates the order of the columns.
   :rtype: List


.. py:function:: sort_ascending_descending(request, model)

   Sorts and saves the state of the column.

   This function takes a request, finds which column needs to be sorted in ascending/descending
   order, and returns the sorted queryset.

   :param request: ``GET`` request received for retreiving the list of model instances.
   :type request: HttpRequest
   :param model: Model of the objects being retrieved.
   :type model: Model

   :returns: List of sorted object instances.
   :rtype: QuerySet


.. py:function:: change_column_position(request, state)

   Modifies the column states depending on the request.

   This function:
       - Takes a filter state
       - Extracts the column names into an order array
       - Modifies the column order in the array depending on user input direction (left/right)
       - Saves this modified state of columns into the database
       - Returns the modified column names array

   :param request: ``GET`` request for retrieving the state of the columns.
   :type request: HttpRequest
   :param state: Filter state of the columns.
   :type state: FilterState

   :returns: List of sorted columns.
   :rtype: List


.. py:function:: paginate(queryset, filter, page_number)

   Paginates the list of objects.

   This function takes the entire queryset and filters out only objects belonging to the
   request page

   :param queryset: ``QuerySet`` of the objects retrieved from the database.
   :type queryset: QuerySet
   :param filter: Filter state of the columns.
   :type filter: FilterState
   :param page_number: Page number requested.
   :type page_number: int


.. py:class:: GoodsReceiptNoteFilter


   Bases: :py:obj:`django_filters.FilterSet`

   .. py:class:: Meta




.. py:class:: GRNEntrySerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``GRNEntry`` class instance.

   The ``GRNEntrySerializer.data`` attribute gives the ``JSON`` serialized data of the ``GRNEntry`` instance::

       {
           "grn": 103,
           "grne_id": 117,
           "product": {
               "pk": 637,
               "name": "piano",
               "category": "Ultricies PC",
               "quantity": 23921,
               "identifier": "PROD9",
               "location": "Musselburgh",
               "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
               "prod_id": 637
           },
           "quantity": 100,
           "receivedQty": 50,
           "acceptedQty": 50,
           "rejectedQty": 0,
           "remark": "OK"
       }


   .. py:class:: Meta




.. py:class:: GRNEntryWithPORefSerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``GRNEntry`` class instance if the GRN references a purchase order.

   The ``GRNEntryWithPORefSerializer.data`` attribute gives the ``JSON`` serialized data of the ``GRNEntry`` instance::

       {
           "grn": 103,
           "grne_id": 117,
           "ppe_id": 324,
           "po_id": 293,
           "product": {
               "pk": 637,
               "name": "piano",
               "category": "Ultricies PC",
               "quantity": 23921,
               "identifier": "PROD9",
               "location": "Musselburgh",
               "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
               "prod_id": 637
           },
           "quantity": 100,
           "receivedQty": 50,
           "acceptedQty": 50,
           "rejectedQty": 0,
           "remark": "OK"
       }


   .. py:class:: Meta




.. py:class:: GRNInvoiceSerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``GRNInvoice`` class instance.

   The ``GRNInvoiceSerializer.data`` attribute gives the ``JSON`` serialized data of the ``GRNInvoice`` instance::

       {
           "company": {
               "name": "Fringillami",
               "owner": "Ivor Barnett",
               "gstin": "89AAC056465468",
               "phone": "332 220-7026",
               "address": "Ap #849-6241 Euismod Av., 677598, Carinthia, Belgium",
               "email": "est.tempor@fringillami.org",
               "location": "Belgium",
               "image": "/media/images/logo.png"
           },
           "grn": {
               "grnes": [
                   {
                       "grn": 103,
                       "grne_id": 117,
                       "ppe_id": 324,
                       "po_id": 293,
                       "product": {
                           "pk": 637,
                           "name": "piano",
                           "category": "Ultricies PC",
                           "quantity": 23921,
                           "identifier": "PROD9",
                           "location": "Musselburgh",
                           "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
                           "prod_id": 637
                       },
                       "quantity": 100,
                       "receivedQty": 50,
                       "acceptedQty": 50,
                       "rejectedQty": 0,
                       "remark": "OK"
                   },
                   {
                       "grn": 103,
                       "grne_id": 118,
                       "ppe_id": 325,
                       "po_id": 293,
                       "product": {
                           "pk": 645,
                           "name": "Tabl",
                           "category": "Sociis Natoque Company",
                           "quantity": 38276,
                           "identifier": "PROD17",
                           "location": "Schagen",
                           "description": "aldgjlakjlkasdj",
                           "prod_id": 645
                       },
                       "quantity": 250,
                       "receivedQty": 200,
                       "acceptedQty": 180,
                       "rejectedQty": 20,
                       "remark": "20 pieces faulty"
                   }
               ],
               "date": "29-Sep-2021",
               "vendor": {
                   "name": "Girish",
                   "identifier": "GJ",
                   "gstin": "GSTIN002",
                   "address": {
                       "name": "alsf",
                       "address": "jas;k",
                       "city": ";sdalkf",
                       "phone": "alsf",
                       "state": "kjdflk",
                       "country": "ljflkj",
                       "post": "54545"
                   }
               },
               "poRef": [
                   182
               ],
               "identifier": 846,
               "grnType": "auto",
               "amendDate": "2021-09-29T00:00:00Z",
               "transporter": "TeraTransport",
               "vehicleNumber": "GH-646358",
               "gateInwardNumber": "864353",
               "preparedBy": "KJL",
               "checkedBy": "KJH",
               "inspectedBy": "GIO",
               "approvedBy": "BHI"
           },
           "shippingaddress": {
               "name": "Harding Gross",
               "address": "8798 At, St., 7639",
               "city": "Rome",
               "phone": "936 651-4847",
               "state": "Lazio",
               "country": "Italy",
               "post": "300326"
           },
           "communication": {
               "email": "asfs@aflk.com",
               "phone": "6546432"
           }
       }


   .. py:class:: Meta




.. py:class:: GoodsReceiptNoteSerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``GoodsReceiptNote`` class instance.

   The ``GoodsReceiptNoteSerializer.data`` attribute gives the ``JSON`` serialized data of the ``GoodsReceiptNote`` instance::

       {
           "grnes": [
               {
                   "grn": 103,
                   "grne_id": 117,
                   "ppe_id": 324,
                   "po_id": 293,
                   "product": {
                       "pk": 637,
                       "name": "piano",
                       "category": "Ultricies PC",
                       "quantity": 23921,
                       "identifier": "PROD9",
                       "location": "Musselburgh",
                       "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
                       "prod_id": 637
                   },
                   "quantity": 100,
                   "receivedQty": 50,
                   "acceptedQty": 50,
                   "rejectedQty": 0,
                   "remark": "OK"
               },
               {
                   "grn": 103,
                   "grne_id": 118,
                   "ppe_id": 325,
                   "po_id": 293,
                   "product": {
                       "pk": 645,
                       "name": "Tabl",
                       "category": "Sociis Natoque Company",
                       "quantity": 38276,
                       "identifier": "PROD17",
                       "location": "Schagen",
                       "description": "aldgjlakjlkasdj",
                       "prod_id": 645
                   },
                   "quantity": 250,
                   "receivedQty": 200,
                   "acceptedQty": 180,
                   "rejectedQty": 20,
                   "remark": "20 pieces faulty"
               }
           ],
           "date": "29-Sep-2021",
           "vendor": {
               "name": "Girish",
               "identifier": "GJ",
               "gstin": "GSTIN002",
               "address": {
                   "name": "alsf",
                   "address": "jas;k",
                   "city": ";sdalkf",
                   "phone": "alsf",
                   "state": "kjdflk",
                   "country": "ljflkj",
                   "post": "54545"
               }
           },
           "poRef": [
               182
           ],
           "identifier": 846,
           "grnType": "auto",
           "amendDate": "2021-09-29T00:00:00Z",
           "transporter": "TeraTransport",
           "vehicleNumber": "GH-646358",
           "gateInwardNumber": "864353",
           "preparedBy": "KJL",
           "checkedBy": "KJH",
           "inspectedBy": "GIO",
           "approvedBy": "BHI"
       }


   .. py:class:: Meta




.. py:class:: PPEntrySerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``ProductPurchaseEntry`` class instance.

   The ``PPEntrySerializer.data`` attribute gives the ``JSON`` serialized data of the ``ProductPurchaseEntry`` instance::

       {
           "ppe_id": 324,
           "product": {
               "pk": 637,
               "name": "Piano",
               "category": "Ultricies PC",
               "quantity": 23921,
               "identifier": "PROD9",
               "location": "Musselburgh",
               "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
               "prod_id": 637
           },
           "quantity": 100,
           "price": 10.0,
           "discount": 0.0,
           "order": 182,
           "pendingQty": 50
       }


   .. py:class:: Meta




.. py:class:: ProductSerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``Product`` class instance.

   The ``ProductSerializer.data`` attribute gives the ``JSON`` serialized data of the ``Product`` instance::

       {
           "pk": 637,
           "name": "Piano",
           "category": "Ultricies PC",
           "quantity": 23921,
           "identifier": "PROD9",
           "location": "Musselburgh",
           "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
           "prod_id": 637
       }


   .. py:class:: Meta




.. py:class:: PurchaseInvoiceSerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``PurchaseInvoice`` class instance.

   The ``PurchaseInvoiceSerializer.data`` attribute gives the ``JSON`` serialized data of the ``PurchaseInvoice`` instance::

       {
           "company": {
               "name": "Fringillami",
               "owner": "Ivor Barnett",
               "gstin": "89AAC056465468",
               "phone": "332 220-7026",
               "address": "Ap #849-6241 Euismod Av., 677598, Carinthia, Belgium",
               "email": "est.tempor@fringillami.org",
               "location": "Belgium",
               "image": "/media/images/logo.png"
           },
           "po": {
               "vendor": {
                   "name": "Girish",
                   "identifier": "GJ",
                   "gstin": "GSTIN002",
                   "address": {
                       "name": "alsf",
                       "address": "jas;k",
                       "city": ";sdalkf",
                       "phone": "alsf",
                       "state": "kjdflk",
                       "country": "ljflkj",
                       "post": "54545"
                   }
               },
               "date": "25-Sep-2021",
               "po": 293,
               "subtotal": 279975.0,
               "taxtotal": 22398.0,
               "ordertotal": 302373.0,
               "ppes": [
                   {
                       "ppe_id": 324,
                       "product": {
                           "pk": 637,
                           "name": "piano",
                           "category": "Ultricies PC",
                           "quantity": 23921,
                           "identifier": "PROD9",
                           "location": "Musselburgh",
                           "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
                           "prod_id": 637
                       },
                       "quantity": 100,
                       "price": 10.0,
                       "discount": 0.0,
                       "order": 182,
                       "pendingQty": 50
                   },
                   {
                       "ppe_id": 325,
                       "product": {
                           "pk": 645,
                           "name": "Tabl",
                           "category": "Sociis Natoque Company",
                           "quantity": 38276,
                           "identifier": "PROD17",
                           "location": "Schagen",
                           "description": "aldgjlakjlkasdj",
                           "prod_id": 645
                       },
                       "quantity": 250,
                       "price": 90.0,
                       "discount": 8.0,
                       "order": 182,
                       "pendingQty": 70
                   },
                   {
                       "ppe_id": 326,
                       "product": {
                           "pk": 638,
                           "name": "Goblet drum",
                           "category": "Est Congue Consulting",
                           "quantity": 46076,
                           "identifier": "PROD10",
                           "location": "Kaluga",
                           "description": "aldgjlakjlkasdj",
                           "prod_id": 638
                       },
                       "quantity": 200,
                       "price": 150.0,
                       "discount": 12.0,
                       "order": 182,
                       "pendingQty": 200
                   },
                   {
                       "ppe_id": 327,
                       "product": {
                           "pk": 643,
                           "name": "quinto",
                           "category": "Enim Suspendisse Associates",
                           "quantity": 51099,
                           "identifier": "PROD15",
                           "location": "Nagpur",
                           "description": "aldgjlakjlkasdj",
                           "prod_id": 643
                       },
                       "quantity": 350,
                       "price": 150.0,
                       "discount": 10.0,
                       "order": 182,
                       "pendingQty": 350
                   },
                   {
                       "ppe_id": 328,
                       "product": {
                           "pk": 651,
                           "name": "Igihumurizo",
                           "category": "Curabitur Massa Vestibulum Consulting",
                           "quantity": 48553,
                           "identifier": "PROD23",
                           "location": "Yeovil",
                           "description": "aldgjlakjlkasdj",
                           "prod_id": 651
                       },
                       "quantity": 500,
                       "price": 50.0,
                       "discount": 6.0,
                       "order": 182,
                       "pendingQty": 500
                   },
                   {
                       "ppe_id": 329,
                       "product": {
                           "pk": 653,
                           "name": "Balsié",
                           "category": "Eu Foundation",
                           "quantity": 29988,
                           "identifier": "PROD25",
                           "location": "Sudbury",
                           "description": "aldgjlakjlkasdj",
                           "prod_id": 653
                       },
                       "quantity": 200,
                       "price": 500.0,
                       "discount": 15.0,
                       "order": 182,
                       "pendingQty": 200
                   },
                   {
                       "ppe_id": 330,
                       "product": {
                           "pk": 656,
                           "name": "Padayani thappu",
                           "category": "Posuere LLP",
                           "quantity": 6358,
                           "identifier": "PROD28",
                           "location": "Ruvo del Monte",
                           "description": "aldgjlakjlkasdj",
                           "prod_id": 656
                       },
                       "quantity": 350,
                       "price": 250.0,
                       "discount": 13.0,
                       "order": 182,
                       "pendingQty": 350
                   }
               ]
           },
           "shippingaddress": {
               "name": "Harding Gross",
               "address": "8798 At, St., 7639",
               "city": "Rome",
               "phone": "936 651-4847",
               "state": "Lazio",
               "country": "Italy",
               "post": "300326"
           },
           "communication": {
               "email": "asfs@aflk.com",
               "phone": "6546432"
           }
       }


   .. py:class:: Meta




.. py:class:: GRNInvoice


   Bases: :py:obj:`django.db.models.Model`

   Model for the goods receipt note invoice.

   .. attribute:: company

      Primary key of the ``Company``.

      :type: Company

   .. attribute:: grn

      Primary key of the ``GoodsReceiptNote``.

      :type: GoodsReceiptNote

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress``.

      :type: ShippingAddress

   .. attribute:: communication

      Primary key of the ``Communication``.

      :type: Communication


.. py:function:: create_grn_view(request)

   Creates a goods receipt note (GRN) on ``POST`` request, and returns a GRN creation form on ``GET`` request.

   .. http:get:: /grn

       Gets the GRN creation form.

       **Example request**:

       .. sourcecode:: http

           GET /grn/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9


       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: GRN creation form received successfully.

   .. http:post:: /grn

       Creates a GRN.
       There are two modes:
       - ``auto`` : Setting ``grn-grnType`` to ``auto`` creates a GRN with PO reference.
       - ``manual`` : Setting ``grn-grnType`` to ``manual`` creates a GRN without PO reference. In this case
                       the ``grn-poRef`` is not required.

       **Example request**:

       .. sourcecode:: http

           POST /consumer/ HTTP/1.1
           Host: localhost:8000
           Content-Type: multipart/form-data;

       :form grn-grnType: ``auto``

       :form grn-vendor: ``4``

       :form grn-poRef: ``182``

       :form grn-amendNumber: ``546``

       :form grn-amendDate: ``2021-09-29``

       :form grn-identifier: ``846``

       :form grn-date: ``2021-09-29``

       :form grn-transporter: ``TeraTransport``

       :form grn-vehicleNumber: ``GH-646358``

       :form grn-gateInwardNumber: ``864353``

       :form grn-preparedBy: ``KJL``

       :form grn-checkedBy: ``KJH``

       :form grn-inspectedBy: ``GIO``

       :form grn-approvedBy: ``BHI``

       :form form-TOTAL_FORMS: ``3``

       :form form-INITIAL_FORMS: ``0``

       :form form-MIN_NUM_FORMS: ````

       :form form-MAX_NUM_FORMS: ````

       :form form-0-product: ``637``

       :form form-0-quantity: ``100``

       :form form-0-receivedQty: ``50``

       :form form-0-acceptedQty: ``50``

       :form form-0-rejectedQty: ``0``

       :form form-0-remark: ``OK``

       :form form-0-DELETE: ````

       :form form-0-grne_id: ``-1``

       :form form-0-ppe_id: ``324``

       :form form-1-product: ``645``

       :form form-1-quantity: ``250``

       :form form-1-receivedQty: ``200``

       :form form-1-acceptedQty: ``180``

       :form form-1-rejectedQty: ``20``

       :form form-1-remark: ``20 pieces faulty``

       :form form-1-DELETE: ````

       :form form-1-grne_id: ``-1``

       :form form-1-ppe_id: ``325``

       :form form-2-product: ``638``

       :form form-2-quantity: ``200``

       :form form-2-receivedQty: ``0``

       :form form-2-acceptedQty: ``0``

       :form form-2-rejectedQty: ``0``

       :form form-2-remark: ````

       :form form-2-DELETE: ````

       :form form-2-grne_id: ``-1``

       :form form-2-ppe_id: ``326``

       :resheader Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryLTR88aZAnBUSE7mv
       :statuscode 302: Redirects to ``/grn``.



.. py:function:: update_grn_view(request)

   Updates the goods receipt note (GRN) on ``POST`` request, and returns a GRN update form on ``GET`` request.

   .. http:get:: /grn/update

       Gets the GRN update form.

       **Example request**:

       .. sourcecode:: http

           GET /grn/update HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9


       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: GRN update form received successfully.

   .. http:post:: /grn/update

       Updates a GRN.
       There are two modes:
       - ``auto`` : Setting ``grn-grnType`` to ``auto`` creates a GRN with PO reference.
       - ``manual`` : Setting ``grn-grnType`` to ``manual`` creates a GRN without PO reference. In this case
                       the ``grn-poRef`` is not required.

       **Example request**:

       .. sourcecode:: http

           POST /consumer/ HTTP/1.1
           Host: localhost:8000
           Content-Type: multipart/form-data;

       :form grn-grnType: ``auto``

       :form grn-vendor: ``4``

       :form grn-poRef: ``182``

       :form grn-amendNumber: ``546``

       :form grn-amendDate: ``2021-09-29``

       :form grn-identifier: ``846``

       :form grn-date: ``2021-09-29``

       :form grn-transporter: ``TeraTransport``

       :form grn-vehicleNumber: ``GH-646358``

       :form grn-gateInwardNumber: ``864353``

       :form grn-preparedBy: ``KJL``

       :form grn-checkedBy: ``KJH``

       :form grn-inspectedBy: ``GIO``

       :form grn-approvedBy: ``BHI``

       :form form-TOTAL_FORMS: ``3``

       :form form-INITIAL_FORMS: ``0``

       :form form-MIN_NUM_FORMS: ````

       :form form-MAX_NUM_FORMS: ````

       :form form-0-product: ``637``

       :form form-0-quantity: ``100``

       :form form-0-receivedQty: ``50``

       :form form-0-acceptedQty: ``50``

       :form form-0-rejectedQty: ``0``

       :form form-0-remark: ``OK``

       :form form-0-DELETE: ````

       :form form-0-grne_id: ``-1``

       :form form-0-ppe_id: ``324``

       :form form-1-product: ``645``

       :form form-1-quantity: ``250``

       :form form-1-receivedQty: ``200``

       :form form-1-acceptedQty: ``180``

       :form form-1-rejectedQty: ``20``

       :form form-1-remark: ``20 pieces faulty``

       :form form-1-DELETE: ````

       :form form-1-grne_id: ``-1``

       :form form-1-ppe_id: ``325``

       :form form-2-product: ``638``

       :form form-2-quantity: ``200``

       :form form-2-receivedQty: ``0``

       :form form-2-acceptedQty: ``0``

       :form form-2-rejectedQty: ``0``

       :form form-2-remark: ````

       :form form-2-DELETE: ````

       :form form-2-grne_id: ``-1``

       :form form-2-ppe_id: ``326``

       :resheader Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryLTR88aZAnBUSE7mv
       :statuscode 302: Redirects to ``/grn``.



.. py:function:: delete_grn_view(request, pk)

   Deletes the GRN with primary key ``object_id`` on ``POST`` request.

   .. http:post:: /grn/<str:object_id>/delete

       Deletes the GRN represented by the primary key ``object_id``.

       **Example request**:

       .. sourcecode:: http

           POST /grn/104/delete HTTP/1.1
           Host: localhost:8000
           Content-Type: application/x-www-form-urlencoded

       :param object_id: GRN primary key.
       :resheader Content-Type: application/x-www-form-urlencoded
       :statuscode 302: Redirects to ``/grn``.
       :statuscode 500: GRN matching query does not exist.



.. py:function:: display_grns_view(request)

   Retrieves the list of GRNs on ``GET`` request.

   .. http:get:: /grns/

       Gets the list of all GRNs.

       **Example request**:

       .. sourcecode:: http

           GET /grns/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

       :form page: The page number of the GRN list.

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: List of GRNs received successfully.


.. py:function:: print_grn_view(request, pk)

   Opens the GRN with primary key ``grn_id`` for printing on ``GET`` request.

   .. http:post:: /grn/<str:grn_id>/print

       Opens the GRN represented by the primary key ``grn_id``.

       **Example request**:

       .. sourcecode:: http

           POST /grn/103/print HTTP/1.1
           Host: localhost:8000
           Content-Type: application/x-www-form-urlencoded


       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: application/json; charset=utf-8

           [
               {
                   "company": {
                       "name": "Fringillami",
                       "owner": "Ivor Barnett",
                       "gstin": "89AAC056465468",
                       "phone": "332 220-7026",
                       "address": "Ap #849-6241 Euismod Av., 677598, Carinthia, Belgium",
                       "email": "est.tempor@fringillami.org",
                       "location": "Belgium",
                       "image": "/media/images/hyperlink-green_x91WW5n.png"
                   },
                   "grn": {
                       "grnes": [
                           {
                               "grn": 103,
                               "grne_id": 117,
                               "ppe_id": 324,
                               "po_id": 293,
                               "product": {
                                   "pk": 637,
                                   "name": "piano",
                                   "category": "Ultricies PC",
                                   "quantity": 23921,
                                   "identifier": "PROD9",
                                   "location": "Musselburgh",
                                   "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
                                   "prod_id": 637
                               },
                               "quantity": 100,
                               "receivedQty": 50,
                               "acceptedQty": 50,
                               "rejectedQty": 0,
                               "remark": "OK"
                           },
                           {
                               "grn": 103,
                               "grne_id": 118,
                               "ppe_id": 325,
                               "po_id": 293,
                               "product": {
                                   "pk": 645,
                                   "name": "Tabl",
                                   "category": "Sociis Natoque Company",
                                   "quantity": 38276,
                                   "identifier": "PROD17",
                                   "location": "Schagen",
                                   "description": "aldgjlakjlkasdj",
                                   "prod_id": 645
                               },
                               "quantity": 250,
                               "receivedQty": 200,
                               "acceptedQty": 180,
                               "rejectedQty": 20,
                               "remark": "20 pieces faulty"
                           }
                       ],
                       "date": "29-Sep-2021",
                       "vendor": {
                           "name": "Girish",
                           "identifier": "GJ",
                           "gstin": "GSTIN002",
                           "address": {
                               "name": "alsf",
                               "address": "jas;k",
                               "city": ";sdalkf",
                               "phone": "alsf",
                               "state": "kjdflk",
                               "country": "ljflkj",
                               "post": "54545"
                           }
                       },
                       "poRef": [
                           182
                       ],
                       "identifier": 846,
                       "grnType": "auto",
                       "amendDate": "2021-09-29T00:00:00Z",
                       "transporter": "TeraTransport",
                       "vehicleNumber": "GH-646358",
                       "gateInwardNumber": "864353",
                       "preparedBy": "KJL",
                       "checkedBy": "KJH",
                       "inspectedBy": "GIO",
                       "approvedBy": "BHI"
                   },
                   "shippingaddress": {
                       "name": "Harding Gross",
                       "address": "8798 At, St., 7639",
                       "city": "Rome",
                       "phone": "936 651-4847",
                       "state": "Lazio",
                       "country": "Italy",
                       "post": "300326"
                   },
                   "communication": {
                       "email": "asfs@aflk.com",
                       "phone": "6546432"
                   }
               }
           ]

       :param grn_id: GRN primary key.
       :resheader Content-Type: application/json
       :statuscode 200: GRN print request successful.
       :statuscode 500: GRN matching query does not exist.



.. py:class:: ProductBasicInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for basic product information.

   .. attribute:: name

      Name of the product.

      :type: str

   .. attribute:: item_type

      Type of the product.

      :type: str

   .. attribute:: category

      Product category.

      :type: str

   .. attribute:: description

      Short description of the product.

      :type: str


.. py:class:: ProductDetailedInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for product physical details

   .. attribute:: length

      Length of the product.

      :type: str

   .. attribute:: width

      Width of the product.

      :type: str

   .. attribute:: height

      Height of the product.

      :type: str

   .. attribute:: weight

      Weight of the product.

      :type: str


.. py:class:: ProductPricingForm


   Bases: :py:obj:`django.forms.Form`

   Form for pricing information of the product.

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Default discount percentage on the product.

      :type: float


.. py:class:: ProductPurchaseEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for product purchase entry.

   .. attribute:: ppe_id

      Unique identifier of the product purchase entry.

      :type: int

   .. attribute:: product

      Product associated wit the product purchase entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product to be ordered.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product purchase.

      :type: float


.. py:class:: ProductSalesEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for product sales entry.

   .. attribute:: pse_id

      Unique identifier of the product sales entry.

      :type: int

   .. attribute:: product

      Product associated with the product sales entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product.

      :type: float


.. py:class:: ProductStatusForm


   Bases: :py:obj:`django.forms.Form`

   Form for locating and identifying the product.

   .. attribute:: quantity

      Stock quantity of the product.

      :type: int

   .. attribute:: identifier

      Unique identifier of the product.

      :type: str

   .. attribute:: location

      Physical location of the product.

      :type: str


.. py:class:: ProductStorageInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for storage information.

   .. attribute:: barcode

      Barcode of the product.

      :type: str

   .. attribute:: expiry

      Expiry date of the product.

      :type: DateField


.. py:class:: PurchaseOrderBasicInfo


   Bases: :py:obj:`django.forms.Form`

   Form for basic information of the purchase order.

   .. attribute:: vendor

      Vendor associated with the purcahse order.

      :type: Vendor

   .. attribute:: date

      Date of the purchase order creation.

      :type: DateField

   .. attribute:: po

      Purchase order number.

      :type: int

   .. attribute:: discount

      Percentage of overall discount.

      :type: float

   .. attribute:: tax

      Percentage of tax.

      :type: float

   .. attribute:: paid

      Amount paid to the vendor.

      :type: float

   .. attribute:: balance

      Balance amount to be paid to the vendor.

      :type: float

   .. attribute:: subtotal

      Total of all the product purchase entries associated with the purchase order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the purchase order including  `taxtotal`.

      :type: float


.. py:class:: GRNInfo


   Bases: :py:obj:`django.forms.Form`

   Form for goods receipt note (GRN).

   .. attribute:: vendor

      Vendor associated with the goods receipt note.

      :type: Vendor

   .. attribute:: poRef

      List of identifiers of the purchase orders from which the goods receipt note is derived.

      :type: PurchaseOrder

   .. attribute:: identifier

      Unique identifier of the goods receipt note.

      :type: str

   .. attribute:: date

      Date of GRN creation.

      :type: DateField

   .. attribute:: grnType

      Type of GRN (``auto`` or ``manual``).

      :type: str

   .. attribute:: amendNumber

      Amendment number of the GRN.

      :type: int

   .. attribute:: amendDate

      Amendment date.

      :type: DateField

   .. attribute:: transporter

      Name of the transport/shipping service.

      :type: str

   .. attribute:: vehicleNumber

      Vehicle number using which the products are shipped.

      :type: str

   .. attribute:: gateInwardNumber

      Gate inward number of the vehicle.

      :type: str

   .. attribute:: preparedBy

      Name/identifier of the person who created the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who validated the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who inspected the physical products in the goods receipt note.

      :type: str

   .. attribute:: approvedBy

      Name/identifier of the authority who approved the goods receipt note.

      :type: str


.. py:class:: GRNEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for goods receipt note entry (GRNE).

   .. attribute:: product

      Product associated with the goods receipt note entry.

      :type: Product

   .. attribute:: grne_id

      Unique identifier of the GRNE.

      :type: int

   .. attribute:: ppe_id

      Unique identifier of the product purchase entry associated with the GRNE.

      :type: int

   .. attribute:: quantity

      Ordered quantity of product with reference to product purchase entry.

      :type: int

   .. attribute:: remark

      Remarks of the quality engineer or the GRN creator about status of products received.

      :type: str

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str


.. py:class:: ThumbnailForm


   Bases: :py:obj:`django.forms.Form`

   For for product thumbnail image.

   .. attribute:: image

      Image of the product.

      :type: ImageField


.. py:class:: SalesOrderBasicInfo


   Bases: :py:obj:`django.forms.Form`

   Form for basic information on sales order.

   .. attribute:: consumer

      Consumer associated with the sales order.

      :type: Consumer

   .. attribute:: date

      Date of the sales order creation.

      :type: DateField

   .. attribute:: so

      Sales order number.

      :type: int

   .. attribute:: discount

      Percentage discount associated with the sales order.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable.

      :type: float

   .. attribute:: paid

      Amount received from the consumer.

      :type: float

   .. attribute:: balance

      Amount balance with the consumer.

      :type: float

   .. attribute:: subtotal

      Total of all the product sales entries associated with the sales order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the sales order including  `taxtotal`.

      :type: float


.. py:class:: ShippingAddressForm


   Bases: :py:obj:`django.forms.Form`

   For for shipping address.

   .. attribute:: title

      Title of the firm.

      :type: str

   .. attribute:: name

      Name of the firm.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: city

      City.

      :type: str

   .. attribute:: state

      State.

      :type: str

   .. attribute:: country

      Country.

      :type: str

   .. attribute:: website

      Official website of the firm.

      :type: URLField

   .. attribute:: post

      Postal code of the firm.

      :type: str


.. py:class:: VendorForm


   Bases: :py:obj:`django.forms.Form`

   Form for basic informaion of the vendor.

   .. attribute:: name

      Name of the vendor.

      :type: str

   .. attribute:: identifier

      Unique identifier of the vendor.

      :type: str

   .. attribute:: gstin

      GSTIN number of the vendor.

      :type: str


.. py:class:: ConsumerForm


   Bases: :py:obj:`django.forms.Form`

   Form for consumer.

   .. attribute:: name

      Name of the consumer.

      :type: str

   .. attribute:: identifier

      Unique identifier of the consumer.

      :type: str

   .. attribute:: gstin

      GSTIN number of the consumer.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Address of the consumer.

      :type: str

   .. attribute:: email

      E-mail address of the consumer.

      :type: str

   .. attribute:: location

      City of the consumer.

      :type: str


.. py:class:: CompanyForm


   Bases: :py:obj:`django.forms.Form`

   Form for company.

   .. attribute:: name

      Name of the company.

      :type: str

   .. attribute:: owner

      Name of the owner of the company.

      :type: str

   .. attribute:: gstin

      GSTIN number of the company.

      :type: str

   .. attribute:: phone

      Contact number of the company.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: email

      E-mail address of the contact person.

      :type: str

   .. attribute:: location

      City of the company.

      :type: str


.. py:class:: HistoryForm


   Bases: :py:obj:`django.forms.Form`

   Form for history view.

   .. attribute:: qlen

      Count of the events visible on the history view.

      :type: int


.. py:class:: CommunicationForm


   Bases: :py:obj:`django.forms.Form`

   Form for communication information.

   .. attribute:: language

      Language of communication.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: email

      E-mail of the contact person.

      :type: EmailField

   .. attribute:: fax

      Fax number.

      :type: str


.. py:class:: PurchaseDataForm


   Bases: :py:obj:`django.forms.Form`

   Form for purchase related data.

   .. attribute:: currency

      Currency of purchase.

      :type: str

   .. attribute:: minorder

      Minimum order quantity.

      :type: int

   .. attribute:: contactperson

      Name of the contact person.

      :type: str

   .. attribute:: refcode

      Reference code.

      :type: str

   .. attribute:: transportmode

      Mode of transport of the shipment.

      :type: str


.. py:class:: BankAccountForm


   Bases: :py:obj:`django.forms.Form`

   Form for bank account details.

   .. attribute:: name

      Name of the bank.

      :type: str

   .. attribute:: branch

      Branch number of the bank.

      :type: str

   .. attribute:: region

      City in which the branch is located.

      :type: str

   .. attribute:: route

      Transit number.

      :type: str

   .. attribute:: number

      Bank account number.

      :type: int

   .. attribute:: acctype

      Type of bank account.

      :type: str

   .. attribute:: iban

      IBAN number.

      :type: str

   .. attribute:: code

      Bank code.

      :type: str

   .. attribute:: branchcode

      Branch code.

      :type: str


.. py:class:: Product


   Bases: :py:obj:`django.db.models.Model`

   Model of the product.

   .. attribute:: name

      Name of the product.

      :type: str

   .. attribute:: category

      Product category.

      :type: str

   .. attribute:: item_type

      Type of the product.

      :type: str

   .. attribute:: description

      Short description of the product.

      :type: str

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: quantity

      Stock quantity of the product.

      :type: int

   .. attribute:: identifier

      Unique identifier of the product.

      :type: str

   .. attribute:: location

      Physical location of the product.

      :type: str

   .. attribute:: length

      Length of the product.

      :type: str

   .. attribute:: width

      Width of the product.

      :type: str

   .. attribute:: height

      Height of the product.

      :type: str

   .. attribute:: weight

      Weight of the product.

      :type: str

   .. attribute:: discount

      Default discount percentage on the product.

      :type: float

   .. attribute:: barcode

      Barcode of the product.

      :type: str

   .. attribute:: expiry

      Expiry date of the product.

      :type: DateField

   .. attribute:: image

      Image of the product.

      :type: ImageField


.. py:class:: ProductPurchaseEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the product purchase entry.

   .. attribute:: product

      Product associated wit the product purchase entry.

      :type: ModelChoiceField

   .. attribute:: quantity

      Quantity of the product to be ordered.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product purchase.

      :type: float

   .. attribute:: order

      Referenced purchase order.

      :type: PurchaseOrder

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str

   .. method:: is_complete()

      Returns the completion status (boolean).

   .. method:: pending_quantity()

      Returns the pending quantity against the entry (int).



.. py:class:: GRNEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the goods receipt note entry (GRNE).

   .. attribute:: product

      Primary key of the ``Product`` instance associated with the goods receipt note entry.

      :type: Product

   .. attribute:: quantity

      Ordered quantity of product with reference to product purchase entry.

      :type: int

   .. attribute:: grne

      Primary key of the ``GoodsReceiptNote`` instance.

      :type: int

   .. attribute:: ppe

      Primary key of the ``ProductPurchaseEntry`` instance associated with the GRNE.

      :type: int

   .. attribute:: remark

      Remarks of the quality engineer or the GRN creator about status of products received.

      :type: str

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str


.. py:class:: ProductSalesEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the product sales entry.

   .. attribute:: product

      Primary key of the ``Product`` associated with the product sales entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product.

      :type: float

   .. attribute:: order

      Primary key of the ``SalesOrder`` referenced by the entry.

      :type: SalesOrder


.. py:class:: SalesOrder


   Bases: :py:obj:`django.db.models.Model`

   Model of the sales order.

   .. attribute:: consumer

      Consumer associated with the sales order.

      :type: ModelChoiceField

   .. attribute:: date

      Date of the sales order creation.

      :type: DateField

   .. attribute:: so

      Sales order number.

      :type: int

   .. attribute:: discount

      Percentage discount associated with the sales order.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable.

      :type: float

   .. attribute:: paid

      Amount received from the consumer.

      :type: float

   .. attribute:: balance

      Amount balance with the consumer.

      :type: float

   .. attribute:: subtotal

      Total of all the product sales entries associated with the sales order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the sales order including  `taxtotal`.

      :type: float


.. py:class:: PurchaseOrder


   Bases: :py:obj:`django.db.models.Model`

   Model of the purchase order.

   .. attribute:: vendor

      Vendor associated with the purchase order.

      :type: Vendor

   .. attribute:: date

      Date and time of the purchase order creation.

      :type: DateField

   .. attribute:: po

      Purchase order number.

      :type: int

   .. attribute:: discount

      Percentage discount.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable for the purchase.

      :type: float

   .. attribute:: paid

      Amount paid against the PO.

      :type: float

   .. attribute:: balance

      Amount balance which remains to be paid.

      :type: float

   .. attribute:: subtotal

      Total of all the product purchase entries associated with the purchase order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the purchase order including  `taxtotal`.

      :type: float

   .. method:: is_complete()

      Returns the completion status (boolean).

   .. method:: pending_ppes()

      Returns list of product purchase entries which are not completed.



.. py:class:: GoodsReceiptNote


   Bases: :py:obj:`django.db.models.Model`

   Model of the goods receipt note (GRN).

   .. attribute:: vendor

      Vendor associated with the goods receipt note.

      :type: ModelChoiceField

   .. attribute:: poRef

      List of identifiers of the purchase orders from which the goods receipt note is derived.

      :type: MultipleChoiceField

   .. attribute:: identifier

      Unique identifier of the goods receipt note.

      :type: str

   .. attribute:: date

      Date of GRN creation.

      :type: DateField

   .. attribute:: grnType

      Type of GRN (``auto`` or ``manual``).

      :type: ChoiceField

   .. attribute:: amendNumber

      Amendment number of the GRN.

      :type: int

   .. attribute:: amendDate

      Amendment date.

      :type: DateField

   .. attribute:: transporter

      Name of the transport/shipping service.

      :type: str

   .. attribute:: vehicleNumber

      Vehicle number using which the products are shipped.

      :type: str

   .. attribute:: gateInwardNumber

      Gate inward number of the vehicle.

      :type: str

   .. attribute:: preparedBy

      Name/identifier of the person who created the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who validated the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who inspected the physical products in the goods receipt note.

      :type: str

   .. attribute:: approvedBy

      Name/identifier of the authority who approved the goods receipt note.

      :type: str


.. py:class:: Consumer


   Bases: :py:obj:`django.db.models.Model`

   Model of the consumer.

   .. attribute:: name

      Name of the consumer.

      :type: str

   .. attribute:: identifier

      Unique identifier of the consumer.

      :type: str

   .. attribute:: gstin

      GSTIN number of the consumer.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Address of the consumer.

      :type: str

   .. attribute:: email

      E-mail address of the consumer.

      :type: str

   .. attribute:: location

      City of the consumer.

      :type: str

   :returns: [description]
   :rtype: [type]


.. py:class:: Vendor


   Bases: :py:obj:`django.db.models.Model`

   Model of the vendor.

   .. attribute:: name

      Name of the vendor.

      :type: str

   .. attribute:: identifier

      Unique identifier of the vendor.

      :type: str

   .. attribute:: gstin

      GSTIN number of the vendor.

      :type: str

   .. attribute:: address

      Primary key of the ``ShippingAddress`` instance associated with the vendor.

      :type: ShippingAddress

   .. attribute:: communication

      Primary key of the ``Communication`` instance associated with the vendor.

      :type: Communication

   .. attribute:: backaccount

      Primary key of the ``BankAccount`` instance associated with the vendor.

      :type: BankAccount

   .. attribute:: purchasedata

      Primary key of the ``PurchaseData`` instance associated with the vendor.

      :type: PurchaseData

   :returns: String representation of the vendor name.
   :rtype: str


.. py:class:: Company


   Bases: :py:obj:`django.db.models.Model`

   Model of the company.

   .. attribute:: name

      Name of the company.

      :type: str

   .. attribute:: owner

      Owner of the company.

      :type: str

   .. attribute:: gstin

      GSTIN number of the company.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: email

      E-mail address of the contact person.

      :type: str

   .. attribute:: location

      City of the company.

      :type: str

   .. attribute:: image

      Photo/logo of the company.

      :type: ImageField

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress`` instance associated with the company.

      :type: ShippingAddress

   :returns: String representation of the company name.
   :rtype: str


.. py:class:: PurchaseInvoice


   Bases: :py:obj:`django.db.models.Model`

   Model for the purchase invoice.

   .. attribute:: company

      Primary key of the ``Company``.

      :type: Company

   .. attribute:: po

      Primary key of the ``PurchaseOrder``.

      :type: PurchaseOrder

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress``.

      :type: ShippingAddress

   .. attribute:: communication

      Primary key of the ``Communication``.

      :type: Communication


.. py:class:: SalesInvoice


   Bases: :py:obj:`django.db.models.Model`

   Model for the sales order invoice.

   .. attribute:: company

      Primary key of the ``Company``.

      :type: Company

   .. attribute:: so

      Primary key of the ``SalesOrder``.

      :type: SalesOrder

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress``.

      :type: ShippingAddress


.. py:class:: FilterState


   Bases: :py:obj:`django.db.models.Model`

   Model of the filter state.

   .. attribute:: name

      Name of the filter state.

      :type: str


.. py:class:: FilterColumn


   Bases: :py:obj:`django.db.models.Model`

   Model of the column state.

   .. attribute:: name

      Name of the column.

      :type: str

   .. attribute:: label

      Label of the column.

      :type: str

   .. attribute:: visible

      Visibility flag.

      :type: bool

   .. attribute:: position

      Index of the column.

      :type: int

   .. attribute:: state

      Primary key of the ``FilterState`` instance being referenced by the column instance.

      :type: FilterState


.. py:class:: Object


   Bases: :py:obj:`django.db.models.Model`

   Model for a generic object.

   .. attribute:: identifier

      Unique identifier of the object.

      :type: str

   .. attribute:: name

      Name of the object.

      :type: str

   .. attribute:: model

      Model associated with the object.

      :type: str


.. py:class:: EventCard


   Bases: :py:obj:`django.db.models.Model`

   Model for event card to be displayed in the history view.

   .. attribute:: obj

      Object associated with the event.

      :type: OneToOneField

   .. attribute:: objId

      Unique identifier of the object.

      :type: str

   .. attribute:: objname

      Name of the object.

      :type: str

   .. attribute:: objmodel

      Model of the object.

      :type: str

   .. attribute:: date

      Timestamp of the event.

      :type: DateField

   .. attribute:: operation

      Type of event.

      :type: str


.. py:class:: EventType


   Bases: :py:obj:`django.db.models.Model`

   Model for event type.

   .. attribute:: name

      Name of the event being triggered.

      :type: str

   .. attribute:: label

      Label associated with the event.

      :type: str

   :returns: Returns the string representation of the label when the event type is queried.
   :rtype: Label


.. py:class:: ObjectModel


   Bases: :py:obj:`django.db.models.Model`

   Model associated with an object.

   .. attribute:: name

      Name of the object.

      :type: str

   .. attribute:: label

      Label string of the object.

      :type: str

   .. attribute:: modName

      Name of the model associated with the object.

      :type: str

   :returns: Returns string representation of the label when object model is queried.
   :rtype: Label


.. py:class:: HistoryFilterState


   Bases: :py:obj:`django.db.models.Model`

   Model of filter state of the history.

   .. attribute:: params

      Paramameters of the configured filters.

      :type: str


.. py:class:: ShippingAddress


   Bases: :py:obj:`django.db.models.Model`

   Model of the shipping address.

   .. attribute:: title

      Title of the firm.

      :type: str

   .. attribute:: name

      Name of the firm.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: city

      City.

      :type: str

   .. attribute:: state

      State.

      :type: str

   .. attribute:: country

      Country.

      :type: str

   .. attribute:: website

      Official website of the firm.

      :type: URLField

   .. attribute:: post

      Postal code of the firm.

      :type: str


.. py:class:: PurchaseData


   Bases: :py:obj:`django.db.models.Model`

   Model of the purchase data.

   .. attribute:: currency

      Currency of purchase.

      :type: str

   .. attribute:: minorder

      Minimum order quantity.

      :type: int

   .. attribute:: contactperson

      Name of the contact person.

      :type: str

   .. attribute:: refcode

      Reference code.

      :type: str

   .. attribute:: transportmode

      Mode of transport of the shipment.

      :type: str


.. py:class:: Communication


   Bases: :py:obj:`django.db.models.Model`

   Model of the communication information.

   .. attribute:: language

      Language of communication.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: email

      E-mail of the contact person.

      :type: EmailField

   .. attribute:: fax

      Fax number.

      :type: str


.. py:class:: BankAccount


   Bases: :py:obj:`django.db.models.Model`

   Model of the bank account details.

   .. attribute:: name

      Name of the bank.

      :type: str

   .. attribute:: branch

      Branch number of the bank.

      :type: str

   .. attribute:: region

      City in which the branch is located.

      :type: str

   .. attribute:: route

      Transit number.

      :type: str

   .. attribute:: number

      Bank account number.

      :type: int

   .. attribute:: acctype

      Type of bank account.

      :type: str

   .. attribute:: iban

      IBAN number.

      :type: str

   .. attribute:: code

      Bank code.

      :type: str

   .. attribute:: branchcode

      Branch code.

      :type: str


.. py:function:: get_columns(state)

   Gets the columns of the display table.

   This function takes a filter state and returns an array of column names that are
   ordered depending on the position attribute of the columns. This order is important
   as the queryset will be rendered in the display table according to the column order
   in this returned array.

   :param state: Filter state of the columns.
   :type state: FilterState

   :returns: A list that dictates the order of the columns.
   :rtype: List


.. py:function:: sort_ascending_descending(request, model)

   Sorts and saves the state of the column.

   This function takes a request, finds which column needs to be sorted in ascending/descending
   order, and returns the sorted queryset.

   :param request: ``GET`` request received for retreiving the list of model instances.
   :type request: HttpRequest
   :param model: Model of the objects being retrieved.
   :type model: Model

   :returns: List of sorted object instances.
   :rtype: QuerySet


.. py:function:: change_column_position(request, state)

   Modifies the column states depending on the request.

   This function:
       - Takes a filter state
       - Extracts the column names into an order array
       - Modifies the column order in the array depending on user input direction (left/right)
       - Saves this modified state of columns into the database
       - Returns the modified column names array

   :param request: ``GET`` request for retrieving the state of the columns.
   :type request: HttpRequest
   :param state: Filter state of the columns.
   :type state: FilterState

   :returns: List of sorted columns.
   :rtype: List


.. py:function:: paginate(queryset, filter, page_number)

   Paginates the list of objects.

   This function takes the entire queryset and filters out only objects belonging to the
   request page

   :param queryset: ``QuerySet`` of the objects retrieved from the database.
   :type queryset: QuerySet
   :param filter: Filter state of the columns.
   :type filter: FilterState
   :param page_number: Page number requested.
   :type page_number: int


.. py:class:: PurchaseOrderFilter


   Bases: :py:obj:`django_filters.FilterSet`

   .. py:class:: Meta




.. py:class:: ProductSerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``Product`` class instance.

   The ``ProductSerializer.data`` attribute gives the ``JSON`` serialized data of the ``Product`` instance::

       {
           "pk": 637,
           "name": "Piano",
           "category": "Ultricies PC",
           "quantity": 23921,
           "identifier": "PROD9",
           "location": "Musselburgh",
           "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
           "prod_id": 637
       }


   .. py:class:: Meta




.. py:class:: PPEntrySerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``ProductPurchaseEntry`` class instance.

   The ``PPEntrySerializer.data`` attribute gives the ``JSON`` serialized data of the ``ProductPurchaseEntry`` instance::

       {
           "ppe_id": 324,
           "product": {
               "pk": 637,
               "name": "Piano",
               "category": "Ultricies PC",
               "quantity": 23921,
               "identifier": "PROD9",
               "location": "Musselburgh",
               "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
               "prod_id": 637
           },
           "quantity": 100,
           "price": 10.0,
           "discount": 0.0,
           "order": 182,
           "pendingQty": 50
       }


   .. py:class:: Meta




.. py:class:: PurchaseInvoiceSerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``PurchaseInvoice`` class instance.

   The ``PurchaseInvoiceSerializer.data`` attribute gives the ``JSON`` serialized data of the ``PurchaseInvoice`` instance::

       {
           "company": {
               "name": "Fringillami",
               "owner": "Ivor Barnett",
               "gstin": "89AAC056465468",
               "phone": "332 220-7026",
               "address": "Ap #849-6241 Euismod Av., 677598, Carinthia, Belgium",
               "email": "est.tempor@fringillami.org",
               "location": "Belgium",
               "image": "/media/images/logo.png"
           },
           "po": {
               "vendor": {
                   "name": "Girish",
                   "identifier": "GJ",
                   "gstin": "GSTIN002",
                   "address": {
                       "name": "alsf",
                       "address": "jas;k",
                       "city": ";sdalkf",
                       "phone": "alsf",
                       "state": "kjdflk",
                       "country": "ljflkj",
                       "post": "54545"
                   }
               },
               "date": "25-Sep-2021",
               "po": 293,
               "subtotal": 279975.0,
               "taxtotal": 22398.0,
               "ordertotal": 302373.0,
               "ppes": [
                   {
                       "ppe_id": 324,
                       "product": {
                           "pk": 637,
                           "name": "piano",
                           "category": "Ultricies PC",
                           "quantity": 23921,
                           "identifier": "PROD9",
                           "location": "Musselburgh",
                           "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
                           "prod_id": 637
                       },
                       "quantity": 100,
                       "price": 10.0,
                       "discount": 0.0,
                       "order": 182,
                       "pendingQty": 50
                   },
                   {
                       "ppe_id": 325,
                       "product": {
                           "pk": 645,
                           "name": "Tabl",
                           "category": "Sociis Natoque Company",
                           "quantity": 38276,
                           "identifier": "PROD17",
                           "location": "Schagen",
                           "description": "aldgjlakjlkasdj",
                           "prod_id": 645
                       },
                       "quantity": 250,
                       "price": 90.0,
                       "discount": 8.0,
                       "order": 182,
                       "pendingQty": 70
                   },
                   {
                       "ppe_id": 326,
                       "product": {
                           "pk": 638,
                           "name": "Goblet drum",
                           "category": "Est Congue Consulting",
                           "quantity": 46076,
                           "identifier": "PROD10",
                           "location": "Kaluga",
                           "description": "aldgjlakjlkasdj",
                           "prod_id": 638
                       },
                       "quantity": 200,
                       "price": 150.0,
                       "discount": 12.0,
                       "order": 182,
                       "pendingQty": 200
                   },
                   {
                       "ppe_id": 327,
                       "product": {
                           "pk": 643,
                           "name": "quinto",
                           "category": "Enim Suspendisse Associates",
                           "quantity": 51099,
                           "identifier": "PROD15",
                           "location": "Nagpur",
                           "description": "aldgjlakjlkasdj",
                           "prod_id": 643
                       },
                       "quantity": 350,
                       "price": 150.0,
                       "discount": 10.0,
                       "order": 182,
                       "pendingQty": 350
                   },
                   {
                       "ppe_id": 328,
                       "product": {
                           "pk": 651,
                           "name": "Igihumurizo",
                           "category": "Curabitur Massa Vestibulum Consulting",
                           "quantity": 48553,
                           "identifier": "PROD23",
                           "location": "Yeovil",
                           "description": "aldgjlakjlkasdj",
                           "prod_id": 651
                       },
                       "quantity": 500,
                       "price": 50.0,
                       "discount": 6.0,
                       "order": 182,
                       "pendingQty": 500
                   },
                   {
                       "ppe_id": 329,
                       "product": {
                           "pk": 653,
                           "name": "Balsié",
                           "category": "Eu Foundation",
                           "quantity": 29988,
                           "identifier": "PROD25",
                           "location": "Sudbury",
                           "description": "aldgjlakjlkasdj",
                           "prod_id": 653
                       },
                       "quantity": 200,
                       "price": 500.0,
                       "discount": 15.0,
                       "order": 182,
                       "pendingQty": 200
                   },
                   {
                       "ppe_id": 330,
                       "product": {
                           "pk": 656,
                           "name": "Padayani thappu",
                           "category": "Posuere LLP",
                           "quantity": 6358,
                           "identifier": "PROD28",
                           "location": "Ruvo del Monte",
                           "description": "aldgjlakjlkasdj",
                           "prod_id": 656
                       },
                       "quantity": 350,
                       "price": 250.0,
                       "discount": 13.0,
                       "order": 182,
                       "pendingQty": 350
                   }
               ]
           },
           "shippingaddress": {
               "name": "Harding Gross",
               "address": "8798 At, St., 7639",
               "city": "Rome",
               "phone": "936 651-4847",
               "state": "Lazio",
               "country": "Italy",
               "post": "300326"
           },
           "communication": {
               "email": "asfs@aflk.com",
               "phone": "6546432"
           }
       }


   .. py:class:: Meta




.. py:function:: create_purchase_order_view(request)

   Creates a purchase order (PO) on ``POST`` request, and returns a PO creation form on ``GET`` request.

   .. http:get:: /purchase_order

       Gets the purchase order creation form.

       **Example request**:

       .. sourcecode:: http

           GET /purchase_order/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9


       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: Purchase order creation form received successfully.

   .. http:post:: /purchase_order

       Creates a purchase order.

       **Example request**:

       .. sourcecode:: http

           POST /purchase_order/ HTTP/1.1
           Host: localhost:8000
           Content-Type: multipart/form-data;

       :form po-vendor: ``4``

       :form vend-name: ``Girish``

       :form vend-identifier: ``GJ``

       :form po-po: ``69``

       :form po-date: ``2021-09-29``

       :form po-tax: ``12``

       :form po-discount: ``8``

       :form po-paid: ``4500``

       :form po-balance: ``1200``

       :form ship-title: ``FingDocks``

       :form ship-name: ``Harding Gross``

       :form ship-phone: ``936 651-4847``

       :form ship-address: ``8798 At, St., 7639``

       :form ship-city: ``Rome``

       :form ship-state: ``Lazio``

       :form ship-country: ``Italy``

       :form ship-website: ``http://fringdocs.com``

       :form ship-post: ``300326``

       :form po-subtotal: ``2595000.00``

       :form po-taxtotal: ``207600.00``

       :form po-ordertotal: ``2802600.00``

       :form form-TOTAL_FORMS: ``2``

       :form form-INITIAL_FORMS: ``0``

       :form form-MIN_NUM_FORMS: ````

       :form form-MAX_NUM_FORMS: ````

       :form form-0-product: ``649``

       :form form-0-quantity: ``300``

       :form form-0-price: ``4500``

       :form form-0-discount: ``10``

       :form form-0-DELETE: ````

       :form form-0-ppe_id: ``-1``

       :form form-1-product: ``664``

       :form form-1-quantity: ``250``

       :form form-1-price: ``6000``

       :form form-1-discount: ``8``

       :form form-1-DELETE: ````

       :form form-1-ppe_id: ``-1``

       :resheader Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryLTR88aZAnBUSE7mv
       :statuscode 302: Redirects to ``/purchase_order``.



.. py:function:: update_purchase_order_view(request)

   Updates a purchase order on ``POST`` request and returns the purchase order update form for ``GET`` request.

   .. http:get:: /purchaes_order/update

       Gets the purchase order update form whose primary key matches the query parameter ``pk``.

       **Example request**:

       .. sourcecode:: http

           GET /purchase_order/update HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

       :query pk: The primary key of the purchase order.

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: Purchase order update form received successfully.

   .. http:post:: /purchase_order/update

       Updates the purchase order.

       **Example request**:

       .. sourcecode:: http

           POST /purchase_order/update HTTP/1.1
           Host: localhost:8000
           Content-Type: multipart/form-data;

       :form pk: ``187``

       :form po-vendor: ``4``

       :form vend-name: ``Girish``

       :form vend-identifier: ``GJ``

       :form po-po: ``69``

       :form po-date: ``2021-09-29``

       :form po-tax: ``12``

       :form po-discount: ``8.0``

       :form po-paid: ``4500.0``

       :form po-balance: ``1200.0``

       :form ship-title: ``FingDocks``

       :form ship-name: ``Harding Gross``

       :form ship-phone: ``936 651-4847``

       :form ship-address: ``8798 At, St., 7639``

       :form ship-city: ``Rome``

       :form ship-state: ``Lazio``

       :form ship-country: ``Italy``

       :form ship-website: ``http://fringdocs.com``

       :form ship-post: ``300326``

       :form po-subtotal: ``2595000.0``

       :form po-taxtotal: ``207600.0``

       :form po-ordertotal: ``2802600.0``

       :form form-TOTAL_FORMS: ``2``

       :form form-INITIAL_FORMS: ``2``

       :form form-MIN_NUM_FORMS: ````

       :form form-MAX_NUM_FORMS: ````

       :form form-0-product: ``649``

       :form form-0-quantity: ``300``

       :form form-0-price: ``4500``

       :form form-0-discount: ``10``

       :form form-0-DELETE: ````

       :form form-0-ppe_id: ``339``

       :form form-1-product: ``664``

       :form form-1-quantity: ``250``

       :form form-1-price: ``6000``

       :form form-1-discount: ``8``

       :form form-1-DELETE: ````

       :form form-1-ppe_id: ``340``

       :resheader Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryLTR88aZAnBUSE7mv
       :statuscode 302: Redirects to ``/consumer``.



.. py:function:: display_purchase_orders_view(request)

   Retrieves the list of purchase orders on ``GET`` request.

   .. http:get:: /purchase_orders/

       Gets the list of all purchase orders.

       **Example request**:

       .. sourcecode:: http

           GET /purchase_orders/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

       :form page: The page number of the purchase order list.

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: List of purchase orders received successfully.


.. py:function:: delete_purchase_order_view(request, pk)

   Deletes the purchase order with primary key ``object_id`` on ``POST`` request.

   .. http:post:: /purchase_order/<str:object_id>/delete

       Deletes the consumer represented by the primary key ``object_id``.

       **Example request**:

       .. sourcecode:: http

           POST /purchase_order/187/delete HTTP/1.1
           Host: localhost:8000
           Content-Type: application/x-www-form-urlencoded

       :param object_id: Purchase order primary key.
       :resheader Content-Type: application/x-www-form-urlencoded
       :statuscode 302: Redirects to ``/purchase_order``.
       :statuscode 500: Purchase order matching query does not exist.



.. py:function:: print_purchase_order_view(request, pk)

   Opens the purchase order with primary key ``po_id`` for printing on ``GET`` request.

   .. http:post:: /purchase_order/<str:po_id>/print

       Opens the purchase order represented by the primary key ``po_id``.

       **Example request**:

       .. sourcecode:: http

           POST /purchase_order/182/print HTTP/1.1
           Host: localhost:8000
           Content-Type: application/x-www-form-urlencoded

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: application/json; charset=utf-8

           [
               {
                   "company": {
                       "name": "Fringillami",
                       "owner": "Ivor Barnett",
                       "gstin": "89AAC056465468",
                       "phone": "332 220-7026",
                       "address": "Ap #849-6241 Euismod Av., 677598, Carinthia, Belgium",
                       "email": "est.tempor@fringillami.org",
                       "location": "Belgium",
                       "image": "/media/images/hyperlink-green_x91WW5n.png"
                   },
                   "po": {
                       "vendor": {
                           "name": "Girish",
                           "identifier": "GJ",
                           "gstin": "GSTIN002",
                           "address": {
                               "name": "alsf",
                               "address": "jas;k",
                               "city": ";sdalkf",
                               "phone": "alsf",
                               "state": "kjdflk",
                               "country": "ljflkj",
                               "post": "54545"
                           }
                       },
                       "date": "25-Sep-2021",
                       "po": 293,
                       "subtotal": 279975.0,
                       "taxtotal": 22398.0,
                       "ordertotal": 302373.0,
                       "ppes": [
                           {
                               "ppe_id": 324,
                               "product": {
                                   "pk": 637,
                                   "name": "piano",
                                   "category": "Ultricies PC",
                                   "quantity": 23921,
                                   "identifier": "PROD9",
                                   "location": "Musselburgh",
                                   "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
                                   "prod_id": 637
                               },
                               "quantity": 100,
                               "price": 10.0,
                               "discount": 0.0,
                               "order": 182,
                               "pendingQty": 50
                           },
                           {
                               "ppe_id": 325,
                               "product": {
                                   "pk": 645,
                                   "name": "Tabl",
                                   "category": "Sociis Natoque Company",
                                   "quantity": 38276,
                                   "identifier": "PROD17",
                                   "location": "Schagen",
                                   "description": "aldgjlakjlkasdj",
                                   "prod_id": 645
                               },
                               "quantity": 250,
                               "price": 90.0,
                               "discount": 8.0,
                               "order": 182,
                               "pendingQty": 70
                           },
                           {
                               "ppe_id": 326,
                               "product": {
                                   "pk": 638,
                                   "name": "Goblet drum",
                                   "category": "Est Congue Consulting",
                                   "quantity": 46076,
                                   "identifier": "PROD10",
                                   "location": "Kaluga",
                                   "description": "aldgjlakjlkasdj",
                                   "prod_id": 638
                               },
                               "quantity": 200,
                               "price": 150.0,
                               "discount": 12.0,
                               "order": 182,
                               "pendingQty": 200
                           },
                           {
                               "ppe_id": 327,
                               "product": {
                                   "pk": 643,
                                   "name": "quinto",
                                   "category": "Enim Suspendisse Associates",
                                   "quantity": 51099,
                                   "identifier": "PROD15",
                                   "location": "Nagpur",
                                   "description": "aldgjlakjlkasdj",
                                   "prod_id": 643
                               },
                               "quantity": 350,
                               "price": 150.0,
                               "discount": 10.0,
                               "order": 182,
                               "pendingQty": 350
                           },
                           {
                               "ppe_id": 328,
                               "product": {
                                   "pk": 651,
                                   "name": "Igihumurizo",
                                   "category": "Curabitur Massa Vestibulum Consulting",
                                   "quantity": 48553,
                                   "identifier": "PROD23",
                                   "location": "Yeovil",
                                   "description": "aldgjlakjlkasdj",
                                   "prod_id": 651
                               },
                               "quantity": 500,
                               "price": 50.0,
                               "discount": 6.0,
                               "order": 182,
                               "pendingQty": 500
                           },
                           {
                               "ppe_id": 329,
                               "product": {
                                   "pk": 653,
                                   "name": "Balsié",
                                   "category": "Eu Foundation",
                                   "quantity": 29988,
                                   "identifier": "PROD25",
                                   "location": "Sudbury",
                                   "description": "aldgjlakjlkasdj",
                                   "prod_id": 653
                               },
                               "quantity": 200,
                               "price": 500.0,
                               "discount": 15.0,
                               "order": 182,
                               "pendingQty": 200
                           },
                           {
                               "ppe_id": 330,
                               "product": {
                                   "pk": 656,
                                   "name": "Padayani thappu",
                                   "category": "Posuere LLP",
                                   "quantity": 6358,
                                   "identifier": "PROD28",
                                   "location": "Ruvo del Monte",
                                   "description": "aldgjlakjlkasdj",
                                   "prod_id": 656
                               },
                               "quantity": 350,
                               "price": 250.0,
                               "discount": 13.0,
                               "order": 182,
                               "pendingQty": 350
                           }
                       ]
                   },
                   "shippingaddress": {
                       "name": "Harding Gross",
                       "address": "8798 At, St., 7639",
                       "city": "Rome",
                       "phone": "936 651-4847",
                       "state": "Lazio",
                       "country": "Italy",
                       "post": "300326"
                   },
                   "communication": {
                       "email": "asfs@aflk.com",
                       "phone": "6546432"
                   }
               }
           ]

       :param po_id: Purchase order primary key.
       :resheader Content-Type: application/json
       :statuscode 200: Purchase order print request successful.
       :statuscode 500: Purchase order matching query does not exist.



.. py:function:: get_product_purchase_entries_view(request)

   Returns the ``JSON`` serialized data of product purchase entries on ``GET`` request.

   .. http:get:: /product_purchase_entries/

       Gets the JSON serialized data of the requested product purchase entries.

       **Example request**:

       .. sourcecode:: http

           GET /product_purchase_entries/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: application/json; charset=utf-8

           [
               {
                   "ppe_id": 324,
                   "product": {
                       "pk": 637,
                       "name": "piano",
                       "category": "Ultricies PC",
                       "quantity": 23921,
                       "identifier": "PROD9",
                       "location": "Musselburgh",
                       "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
                       "prod_id": 637
                   },
                   "quantity": 100,
                   "price": 10.0,
                   "discount": 0.0,
                   "order": 182,
                   "pendingQty": 50,
                   "po": 293
               },
               {
                   "ppe_id": 325,
                   "product": {
                       "pk": 645,
                       "name": "Tabl",
                       "category": "Sociis Natoque Company",
                       "quantity": 38276,
                       "identifier": "PROD17",
                       "location": "Schagen",
                       "description": "aldgjlakjlkasdj",
                       "prod_id": 645
                   },
                   "quantity": 250,
                   "price": 90.0,
                   "discount": 8.0,
                   "order": 182,
                   "pendingQty": 70,
                   "po": 293
               },
               {
                   "ppe_id": 326,
                   "product": {
                       "pk": 638,
                       "name": "Goblet drum",
                       "category": "Est Congue Consulting",
                       "quantity": 46076,
                       "identifier": "PROD10",
                       "location": "Kaluga",
                       "description": "aldgjlakjlkasdj",
                       "prod_id": 638
                   },
                   "quantity": 200,
                   "price": 150.0,
                   "discount": 12.0,
                   "order": 182,
                   "pendingQty": 200,
                   "po": 293
               },
               {
                   "ppe_id": 327,
                   "product": {
                       "pk": 643,
                       "name": "quinto",
                       "category": "Enim Suspendisse Associates",
                       "quantity": 51099,
                       "identifier": "PROD15",
                       "location": "Nagpur",
                       "description": "aldgjlakjlkasdj",
                       "prod_id": 643
                   },
                   "quantity": 350,
                   "price": 150.0,
                   "discount": 10.0,
                   "order": 182,
                   "pendingQty": 350,
                   "po": 293
               },
               {
                   "ppe_id": 328,
                   "product": {
                       "pk": 651,
                       "name": "Igihumurizo",
                       "category": "Curabitur Massa Vestibulum Consulting",
                       "quantity": 48553,
                       "identifier": "PROD23",
                       "location": "Yeovil",
                       "description": "aldgjlakjlkasdj",
                       "prod_id": 651
                   },
                   "quantity": 500,
                   "price": 50.0,
                   "discount": 6.0,
                   "order": 182,
                   "pendingQty": 500,
                   "po": 293
               },
               {
                   "ppe_id": 329,
                   "product": {
                       "pk": 653,
                       "name": "Balsié",
                       "category": "Eu Foundation",
                       "quantity": 29988,
                       "identifier": "PROD25",
                       "location": "Sudbury",
                       "description": "aldgjlakjlkasdj",
                       "prod_id": 653
                   },
                   "quantity": 200,
                   "price": 500.0,
                   "discount": 15.0,
                   "order": 182,
                   "pendingQty": 200,
                   "po": 293
               },
               {
                   "ppe_id": 330,
                   "product": {
                       "pk": 656,
                       "name": "Padayani thappu",
                       "category": "Posuere LLP",
                       "quantity": 6358,
                       "identifier": "PROD28",
                       "location": "Ruvo del Monte",
                       "description": "aldgjlakjlkasdj",
                       "prod_id": 656
                   },
                   "quantity": 350,
                   "price": 250.0,
                   "discount": 13.0,
                   "order": 182,
                   "pendingQty": 350,
                   "po": 293
               }
           ]

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: List of product purchase entries received successfully.
       :statuscode 400: Bad request version
       :statuscode 500: Product purchase entries matching query does not exist.


.. py:class:: ProductBasicInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for basic product information.

   .. attribute:: name

      Name of the product.

      :type: str

   .. attribute:: item_type

      Type of the product.

      :type: str

   .. attribute:: category

      Product category.

      :type: str

   .. attribute:: description

      Short description of the product.

      :type: str


.. py:class:: ProductDetailedInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for product physical details

   .. attribute:: length

      Length of the product.

      :type: str

   .. attribute:: width

      Width of the product.

      :type: str

   .. attribute:: height

      Height of the product.

      :type: str

   .. attribute:: weight

      Weight of the product.

      :type: str


.. py:class:: ProductPricingForm


   Bases: :py:obj:`django.forms.Form`

   Form for pricing information of the product.

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Default discount percentage on the product.

      :type: float


.. py:class:: ProductPurchaseEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for product purchase entry.

   .. attribute:: ppe_id

      Unique identifier of the product purchase entry.

      :type: int

   .. attribute:: product

      Product associated wit the product purchase entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product to be ordered.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product purchase.

      :type: float


.. py:class:: ProductSalesEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for product sales entry.

   .. attribute:: pse_id

      Unique identifier of the product sales entry.

      :type: int

   .. attribute:: product

      Product associated with the product sales entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product.

      :type: float


.. py:class:: ProductStatusForm


   Bases: :py:obj:`django.forms.Form`

   Form for locating and identifying the product.

   .. attribute:: quantity

      Stock quantity of the product.

      :type: int

   .. attribute:: identifier

      Unique identifier of the product.

      :type: str

   .. attribute:: location

      Physical location of the product.

      :type: str


.. py:class:: ProductStorageInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for storage information.

   .. attribute:: barcode

      Barcode of the product.

      :type: str

   .. attribute:: expiry

      Expiry date of the product.

      :type: DateField


.. py:class:: PurchaseOrderBasicInfo


   Bases: :py:obj:`django.forms.Form`

   Form for basic information of the purchase order.

   .. attribute:: vendor

      Vendor associated with the purcahse order.

      :type: Vendor

   .. attribute:: date

      Date of the purchase order creation.

      :type: DateField

   .. attribute:: po

      Purchase order number.

      :type: int

   .. attribute:: discount

      Percentage of overall discount.

      :type: float

   .. attribute:: tax

      Percentage of tax.

      :type: float

   .. attribute:: paid

      Amount paid to the vendor.

      :type: float

   .. attribute:: balance

      Balance amount to be paid to the vendor.

      :type: float

   .. attribute:: subtotal

      Total of all the product purchase entries associated with the purchase order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the purchase order including  `taxtotal`.

      :type: float


.. py:class:: GRNInfo


   Bases: :py:obj:`django.forms.Form`

   Form for goods receipt note (GRN).

   .. attribute:: vendor

      Vendor associated with the goods receipt note.

      :type: Vendor

   .. attribute:: poRef

      List of identifiers of the purchase orders from which the goods receipt note is derived.

      :type: PurchaseOrder

   .. attribute:: identifier

      Unique identifier of the goods receipt note.

      :type: str

   .. attribute:: date

      Date of GRN creation.

      :type: DateField

   .. attribute:: grnType

      Type of GRN (``auto`` or ``manual``).

      :type: str

   .. attribute:: amendNumber

      Amendment number of the GRN.

      :type: int

   .. attribute:: amendDate

      Amendment date.

      :type: DateField

   .. attribute:: transporter

      Name of the transport/shipping service.

      :type: str

   .. attribute:: vehicleNumber

      Vehicle number using which the products are shipped.

      :type: str

   .. attribute:: gateInwardNumber

      Gate inward number of the vehicle.

      :type: str

   .. attribute:: preparedBy

      Name/identifier of the person who created the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who validated the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who inspected the physical products in the goods receipt note.

      :type: str

   .. attribute:: approvedBy

      Name/identifier of the authority who approved the goods receipt note.

      :type: str


.. py:class:: GRNEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for goods receipt note entry (GRNE).

   .. attribute:: product

      Product associated with the goods receipt note entry.

      :type: Product

   .. attribute:: grne_id

      Unique identifier of the GRNE.

      :type: int

   .. attribute:: ppe_id

      Unique identifier of the product purchase entry associated with the GRNE.

      :type: int

   .. attribute:: quantity

      Ordered quantity of product with reference to product purchase entry.

      :type: int

   .. attribute:: remark

      Remarks of the quality engineer or the GRN creator about status of products received.

      :type: str

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str


.. py:class:: ThumbnailForm


   Bases: :py:obj:`django.forms.Form`

   For for product thumbnail image.

   .. attribute:: image

      Image of the product.

      :type: ImageField


.. py:class:: SalesOrderBasicInfo


   Bases: :py:obj:`django.forms.Form`

   Form for basic information on sales order.

   .. attribute:: consumer

      Consumer associated with the sales order.

      :type: Consumer

   .. attribute:: date

      Date of the sales order creation.

      :type: DateField

   .. attribute:: so

      Sales order number.

      :type: int

   .. attribute:: discount

      Percentage discount associated with the sales order.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable.

      :type: float

   .. attribute:: paid

      Amount received from the consumer.

      :type: float

   .. attribute:: balance

      Amount balance with the consumer.

      :type: float

   .. attribute:: subtotal

      Total of all the product sales entries associated with the sales order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the sales order including  `taxtotal`.

      :type: float


.. py:class:: ShippingAddressForm


   Bases: :py:obj:`django.forms.Form`

   For for shipping address.

   .. attribute:: title

      Title of the firm.

      :type: str

   .. attribute:: name

      Name of the firm.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: city

      City.

      :type: str

   .. attribute:: state

      State.

      :type: str

   .. attribute:: country

      Country.

      :type: str

   .. attribute:: website

      Official website of the firm.

      :type: URLField

   .. attribute:: post

      Postal code of the firm.

      :type: str


.. py:class:: VendorForm


   Bases: :py:obj:`django.forms.Form`

   Form for basic informaion of the vendor.

   .. attribute:: name

      Name of the vendor.

      :type: str

   .. attribute:: identifier

      Unique identifier of the vendor.

      :type: str

   .. attribute:: gstin

      GSTIN number of the vendor.

      :type: str


.. py:class:: ConsumerForm


   Bases: :py:obj:`django.forms.Form`

   Form for consumer.

   .. attribute:: name

      Name of the consumer.

      :type: str

   .. attribute:: identifier

      Unique identifier of the consumer.

      :type: str

   .. attribute:: gstin

      GSTIN number of the consumer.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Address of the consumer.

      :type: str

   .. attribute:: email

      E-mail address of the consumer.

      :type: str

   .. attribute:: location

      City of the consumer.

      :type: str


.. py:class:: CompanyForm


   Bases: :py:obj:`django.forms.Form`

   Form for company.

   .. attribute:: name

      Name of the company.

      :type: str

   .. attribute:: owner

      Name of the owner of the company.

      :type: str

   .. attribute:: gstin

      GSTIN number of the company.

      :type: str

   .. attribute:: phone

      Contact number of the company.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: email

      E-mail address of the contact person.

      :type: str

   .. attribute:: location

      City of the company.

      :type: str


.. py:class:: HistoryForm


   Bases: :py:obj:`django.forms.Form`

   Form for history view.

   .. attribute:: qlen

      Count of the events visible on the history view.

      :type: int


.. py:class:: CommunicationForm


   Bases: :py:obj:`django.forms.Form`

   Form for communication information.

   .. attribute:: language

      Language of communication.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: email

      E-mail of the contact person.

      :type: EmailField

   .. attribute:: fax

      Fax number.

      :type: str


.. py:class:: PurchaseDataForm


   Bases: :py:obj:`django.forms.Form`

   Form for purchase related data.

   .. attribute:: currency

      Currency of purchase.

      :type: str

   .. attribute:: minorder

      Minimum order quantity.

      :type: int

   .. attribute:: contactperson

      Name of the contact person.

      :type: str

   .. attribute:: refcode

      Reference code.

      :type: str

   .. attribute:: transportmode

      Mode of transport of the shipment.

      :type: str


.. py:class:: BankAccountForm


   Bases: :py:obj:`django.forms.Form`

   Form for bank account details.

   .. attribute:: name

      Name of the bank.

      :type: str

   .. attribute:: branch

      Branch number of the bank.

      :type: str

   .. attribute:: region

      City in which the branch is located.

      :type: str

   .. attribute:: route

      Transit number.

      :type: str

   .. attribute:: number

      Bank account number.

      :type: int

   .. attribute:: acctype

      Type of bank account.

      :type: str

   .. attribute:: iban

      IBAN number.

      :type: str

   .. attribute:: code

      Bank code.

      :type: str

   .. attribute:: branchcode

      Branch code.

      :type: str


.. py:class:: Product


   Bases: :py:obj:`django.db.models.Model`

   Model of the product.

   .. attribute:: name

      Name of the product.

      :type: str

   .. attribute:: category

      Product category.

      :type: str

   .. attribute:: item_type

      Type of the product.

      :type: str

   .. attribute:: description

      Short description of the product.

      :type: str

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: quantity

      Stock quantity of the product.

      :type: int

   .. attribute:: identifier

      Unique identifier of the product.

      :type: str

   .. attribute:: location

      Physical location of the product.

      :type: str

   .. attribute:: length

      Length of the product.

      :type: str

   .. attribute:: width

      Width of the product.

      :type: str

   .. attribute:: height

      Height of the product.

      :type: str

   .. attribute:: weight

      Weight of the product.

      :type: str

   .. attribute:: discount

      Default discount percentage on the product.

      :type: float

   .. attribute:: barcode

      Barcode of the product.

      :type: str

   .. attribute:: expiry

      Expiry date of the product.

      :type: DateField

   .. attribute:: image

      Image of the product.

      :type: ImageField


.. py:class:: ProductPurchaseEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the product purchase entry.

   .. attribute:: product

      Product associated wit the product purchase entry.

      :type: ModelChoiceField

   .. attribute:: quantity

      Quantity of the product to be ordered.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product purchase.

      :type: float

   .. attribute:: order

      Referenced purchase order.

      :type: PurchaseOrder

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str

   .. method:: is_complete()

      Returns the completion status (boolean).

   .. method:: pending_quantity()

      Returns the pending quantity against the entry (int).



.. py:class:: GRNEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the goods receipt note entry (GRNE).

   .. attribute:: product

      Primary key of the ``Product`` instance associated with the goods receipt note entry.

      :type: Product

   .. attribute:: quantity

      Ordered quantity of product with reference to product purchase entry.

      :type: int

   .. attribute:: grne

      Primary key of the ``GoodsReceiptNote`` instance.

      :type: int

   .. attribute:: ppe

      Primary key of the ``ProductPurchaseEntry`` instance associated with the GRNE.

      :type: int

   .. attribute:: remark

      Remarks of the quality engineer or the GRN creator about status of products received.

      :type: str

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str


.. py:class:: ProductSalesEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the product sales entry.

   .. attribute:: product

      Primary key of the ``Product`` associated with the product sales entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product.

      :type: float

   .. attribute:: order

      Primary key of the ``SalesOrder`` referenced by the entry.

      :type: SalesOrder


.. py:class:: SalesOrder


   Bases: :py:obj:`django.db.models.Model`

   Model of the sales order.

   .. attribute:: consumer

      Consumer associated with the sales order.

      :type: ModelChoiceField

   .. attribute:: date

      Date of the sales order creation.

      :type: DateField

   .. attribute:: so

      Sales order number.

      :type: int

   .. attribute:: discount

      Percentage discount associated with the sales order.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable.

      :type: float

   .. attribute:: paid

      Amount received from the consumer.

      :type: float

   .. attribute:: balance

      Amount balance with the consumer.

      :type: float

   .. attribute:: subtotal

      Total of all the product sales entries associated with the sales order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the sales order including  `taxtotal`.

      :type: float


.. py:class:: PurchaseOrder


   Bases: :py:obj:`django.db.models.Model`

   Model of the purchase order.

   .. attribute:: vendor

      Vendor associated with the purchase order.

      :type: Vendor

   .. attribute:: date

      Date and time of the purchase order creation.

      :type: DateField

   .. attribute:: po

      Purchase order number.

      :type: int

   .. attribute:: discount

      Percentage discount.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable for the purchase.

      :type: float

   .. attribute:: paid

      Amount paid against the PO.

      :type: float

   .. attribute:: balance

      Amount balance which remains to be paid.

      :type: float

   .. attribute:: subtotal

      Total of all the product purchase entries associated with the purchase order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the purchase order including  `taxtotal`.

      :type: float

   .. method:: is_complete()

      Returns the completion status (boolean).

   .. method:: pending_ppes()

      Returns list of product purchase entries which are not completed.



.. py:class:: GoodsReceiptNote


   Bases: :py:obj:`django.db.models.Model`

   Model of the goods receipt note (GRN).

   .. attribute:: vendor

      Vendor associated with the goods receipt note.

      :type: ModelChoiceField

   .. attribute:: poRef

      List of identifiers of the purchase orders from which the goods receipt note is derived.

      :type: MultipleChoiceField

   .. attribute:: identifier

      Unique identifier of the goods receipt note.

      :type: str

   .. attribute:: date

      Date of GRN creation.

      :type: DateField

   .. attribute:: grnType

      Type of GRN (``auto`` or ``manual``).

      :type: ChoiceField

   .. attribute:: amendNumber

      Amendment number of the GRN.

      :type: int

   .. attribute:: amendDate

      Amendment date.

      :type: DateField

   .. attribute:: transporter

      Name of the transport/shipping service.

      :type: str

   .. attribute:: vehicleNumber

      Vehicle number using which the products are shipped.

      :type: str

   .. attribute:: gateInwardNumber

      Gate inward number of the vehicle.

      :type: str

   .. attribute:: preparedBy

      Name/identifier of the person who created the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who validated the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who inspected the physical products in the goods receipt note.

      :type: str

   .. attribute:: approvedBy

      Name/identifier of the authority who approved the goods receipt note.

      :type: str


.. py:class:: Consumer


   Bases: :py:obj:`django.db.models.Model`

   Model of the consumer.

   .. attribute:: name

      Name of the consumer.

      :type: str

   .. attribute:: identifier

      Unique identifier of the consumer.

      :type: str

   .. attribute:: gstin

      GSTIN number of the consumer.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Address of the consumer.

      :type: str

   .. attribute:: email

      E-mail address of the consumer.

      :type: str

   .. attribute:: location

      City of the consumer.

      :type: str

   :returns: [description]
   :rtype: [type]


.. py:class:: Vendor


   Bases: :py:obj:`django.db.models.Model`

   Model of the vendor.

   .. attribute:: name

      Name of the vendor.

      :type: str

   .. attribute:: identifier

      Unique identifier of the vendor.

      :type: str

   .. attribute:: gstin

      GSTIN number of the vendor.

      :type: str

   .. attribute:: address

      Primary key of the ``ShippingAddress`` instance associated with the vendor.

      :type: ShippingAddress

   .. attribute:: communication

      Primary key of the ``Communication`` instance associated with the vendor.

      :type: Communication

   .. attribute:: backaccount

      Primary key of the ``BankAccount`` instance associated with the vendor.

      :type: BankAccount

   .. attribute:: purchasedata

      Primary key of the ``PurchaseData`` instance associated with the vendor.

      :type: PurchaseData

   :returns: String representation of the vendor name.
   :rtype: str


.. py:class:: Company


   Bases: :py:obj:`django.db.models.Model`

   Model of the company.

   .. attribute:: name

      Name of the company.

      :type: str

   .. attribute:: owner

      Owner of the company.

      :type: str

   .. attribute:: gstin

      GSTIN number of the company.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: email

      E-mail address of the contact person.

      :type: str

   .. attribute:: location

      City of the company.

      :type: str

   .. attribute:: image

      Photo/logo of the company.

      :type: ImageField

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress`` instance associated with the company.

      :type: ShippingAddress

   :returns: String representation of the company name.
   :rtype: str


.. py:class:: PurchaseInvoice


   Bases: :py:obj:`django.db.models.Model`

   Model for the purchase invoice.

   .. attribute:: company

      Primary key of the ``Company``.

      :type: Company

   .. attribute:: po

      Primary key of the ``PurchaseOrder``.

      :type: PurchaseOrder

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress``.

      :type: ShippingAddress

   .. attribute:: communication

      Primary key of the ``Communication``.

      :type: Communication


.. py:class:: SalesInvoice


   Bases: :py:obj:`django.db.models.Model`

   Model for the sales order invoice.

   .. attribute:: company

      Primary key of the ``Company``.

      :type: Company

   .. attribute:: so

      Primary key of the ``SalesOrder``.

      :type: SalesOrder

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress``.

      :type: ShippingAddress


.. py:class:: FilterState


   Bases: :py:obj:`django.db.models.Model`

   Model of the filter state.

   .. attribute:: name

      Name of the filter state.

      :type: str


.. py:class:: FilterColumn


   Bases: :py:obj:`django.db.models.Model`

   Model of the column state.

   .. attribute:: name

      Name of the column.

      :type: str

   .. attribute:: label

      Label of the column.

      :type: str

   .. attribute:: visible

      Visibility flag.

      :type: bool

   .. attribute:: position

      Index of the column.

      :type: int

   .. attribute:: state

      Primary key of the ``FilterState`` instance being referenced by the column instance.

      :type: FilterState


.. py:class:: Object


   Bases: :py:obj:`django.db.models.Model`

   Model for a generic object.

   .. attribute:: identifier

      Unique identifier of the object.

      :type: str

   .. attribute:: name

      Name of the object.

      :type: str

   .. attribute:: model

      Model associated with the object.

      :type: str


.. py:class:: EventCard


   Bases: :py:obj:`django.db.models.Model`

   Model for event card to be displayed in the history view.

   .. attribute:: obj

      Object associated with the event.

      :type: OneToOneField

   .. attribute:: objId

      Unique identifier of the object.

      :type: str

   .. attribute:: objname

      Name of the object.

      :type: str

   .. attribute:: objmodel

      Model of the object.

      :type: str

   .. attribute:: date

      Timestamp of the event.

      :type: DateField

   .. attribute:: operation

      Type of event.

      :type: str


.. py:class:: EventType


   Bases: :py:obj:`django.db.models.Model`

   Model for event type.

   .. attribute:: name

      Name of the event being triggered.

      :type: str

   .. attribute:: label

      Label associated with the event.

      :type: str

   :returns: Returns the string representation of the label when the event type is queried.
   :rtype: Label


.. py:class:: ObjectModel


   Bases: :py:obj:`django.db.models.Model`

   Model associated with an object.

   .. attribute:: name

      Name of the object.

      :type: str

   .. attribute:: label

      Label string of the object.

      :type: str

   .. attribute:: modName

      Name of the model associated with the object.

      :type: str

   :returns: Returns string representation of the label when object model is queried.
   :rtype: Label


.. py:class:: HistoryFilterState


   Bases: :py:obj:`django.db.models.Model`

   Model of filter state of the history.

   .. attribute:: params

      Paramameters of the configured filters.

      :type: str


.. py:class:: ShippingAddress


   Bases: :py:obj:`django.db.models.Model`

   Model of the shipping address.

   .. attribute:: title

      Title of the firm.

      :type: str

   .. attribute:: name

      Name of the firm.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: city

      City.

      :type: str

   .. attribute:: state

      State.

      :type: str

   .. attribute:: country

      Country.

      :type: str

   .. attribute:: website

      Official website of the firm.

      :type: URLField

   .. attribute:: post

      Postal code of the firm.

      :type: str


.. py:class:: PurchaseData


   Bases: :py:obj:`django.db.models.Model`

   Model of the purchase data.

   .. attribute:: currency

      Currency of purchase.

      :type: str

   .. attribute:: minorder

      Minimum order quantity.

      :type: int

   .. attribute:: contactperson

      Name of the contact person.

      :type: str

   .. attribute:: refcode

      Reference code.

      :type: str

   .. attribute:: transportmode

      Mode of transport of the shipment.

      :type: str


.. py:class:: Communication


   Bases: :py:obj:`django.db.models.Model`

   Model of the communication information.

   .. attribute:: language

      Language of communication.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: email

      E-mail of the contact person.

      :type: EmailField

   .. attribute:: fax

      Fax number.

      :type: str


.. py:class:: BankAccount


   Bases: :py:obj:`django.db.models.Model`

   Model of the bank account details.

   .. attribute:: name

      Name of the bank.

      :type: str

   .. attribute:: branch

      Branch number of the bank.

      :type: str

   .. attribute:: region

      City in which the branch is located.

      :type: str

   .. attribute:: route

      Transit number.

      :type: str

   .. attribute:: number

      Bank account number.

      :type: int

   .. attribute:: acctype

      Type of bank account.

      :type: str

   .. attribute:: iban

      IBAN number.

      :type: str

   .. attribute:: code

      Bank code.

      :type: str

   .. attribute:: branchcode

      Branch code.

      :type: str


.. py:function:: get_columns(state)

   Gets the columns of the display table.

   This function takes a filter state and returns an array of column names that are
   ordered depending on the position attribute of the columns. This order is important
   as the queryset will be rendered in the display table according to the column order
   in this returned array.

   :param state: Filter state of the columns.
   :type state: FilterState

   :returns: A list that dictates the order of the columns.
   :rtype: List


.. py:function:: sort_ascending_descending(request, model)

   Sorts and saves the state of the column.

   This function takes a request, finds which column needs to be sorted in ascending/descending
   order, and returns the sorted queryset.

   :param request: ``GET`` request received for retreiving the list of model instances.
   :type request: HttpRequest
   :param model: Model of the objects being retrieved.
   :type model: Model

   :returns: List of sorted object instances.
   :rtype: QuerySet


.. py:function:: change_column_position(request, state)

   Modifies the column states depending on the request.

   This function:
       - Takes a filter state
       - Extracts the column names into an order array
       - Modifies the column order in the array depending on user input direction (left/right)
       - Saves this modified state of columns into the database
       - Returns the modified column names array

   :param request: ``GET`` request for retrieving the state of the columns.
   :type request: HttpRequest
   :param state: Filter state of the columns.
   :type state: FilterState

   :returns: List of sorted columns.
   :rtype: List


.. py:function:: paginate(queryset, filter, page_number)

   Paginates the list of objects.

   This function takes the entire queryset and filters out only objects belonging to the
   request page

   :param queryset: ``QuerySet`` of the objects retrieved from the database.
   :type queryset: QuerySet
   :param filter: Filter state of the columns.
   :type filter: FilterState
   :param page_number: Page number requested.
   :type page_number: int


.. py:class:: CompanySerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``Company`` class instance.

   The ``CompanySerializer.data`` attribute gives the ``JSON`` serialized data of the ``Company`` instance::

       {
           "name": "Fringillami",
           "owner": "Ivor Barnett",
           "gstin": "89AAC056465468",
           "phone": "332 220-7026",
           "address": "Ap #849-6241 Euismod Av., 677598, Carinthia, Belgium",
           "email": "est.tempor@fringillami.org",
           "location": "Belgium",
           "image": "/media/images/logo.png"
       }


   .. py:class:: Meta




.. py:class:: ShippingAddressSerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``ShippingAddress`` class instance.

   The ``ShippingAddressSerializer.data`` attribute gives the ``JSON`` serialized data of the ``ShippingAddress`` instance::

       {
           "name": "Harding Gross",
           "address": "8798 At, St., 7639",
           "city": "Rome",
           "phone": "936 651-4847",
           "state": "Lazio",
           "country": "Italy",
           "post": "300326"
       }


   .. py:class:: Meta




.. py:class:: CompanyFilter


   Bases: :py:obj:`django_filters.FilterSet`

   .. py:class:: Meta




.. py:function:: create_company_view(request)

   Creates a company on ``POST`` request and returns a company creation form  ``GET`` request.

   .. http:get:: /company

       Gets the company creation form.

       **Example request**:

       .. sourcecode:: http

           GET /company/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9


       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: Company creation form received successfully.

   .. http:post:: /company

       Creates a company.

       **Example request**:

       .. sourcecode:: http

           POST /company/ HTTP/1.1
           Host: localhost:8000
           Content-Type: multipart/form-data;

       :form comp-name: ``Fringillami``

       :form comp-owner: ``Ivor Barnett``

       :form comp-gstin: ``89AAC056465468``

       :form comp-phone: ``332 220-7026``

       :form comp-address: ``Ap #849-6241 Euismod Av., 677598, Carinthia, Belgium``

       :form comp-email: ``est.tempor@fringillami.org``

       :form comp-location: ``Belgium``

       :form ship-title: ``FingDocks``

       :form ship-name: ``Harding Gross``

       :form ship-phone: ``936 651-4847``

       :form ship-address: ``8798 At, St., 7639``

       :form ship-city: ``Rome``

       :form ship-state: ``Lazio``

       :form ship-country: ``Italy``

       :form ship-website: ``fringdocs.com``

       :form ship-post: ``300326``

       :resheader Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryLTR88aZAnBUSE7mv
       :statuscode 302: Redirects to ``/company``.



.. py:function:: update_company_view(request)

   Updates a company on ``POST`` request and returns the company update form  ``GET`` request.

   .. http:get:: /company/update

       Gets the company update form whose primary key matches the query parameter ``pk``.

       **Example request**:

       .. sourcecode:: http

           GET /company/update HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

       :query pk: The primary key of the company.

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: Company update form received successfully.

   .. http:post:: /company/update

       Updates a company.

       **Example request**:

       .. sourcecode:: http

           POST /company/ HTTP/1.1
           Host: localhost:8000
           Content-Type: multipart/form-data;

       :form pk: ``4``

       :form comp-name: ``Fringillami``

       :form comp-owner: ``Ivor Barnett``

       :form comp-gstin: ``89AAC056465468``

       :form comp-phone: ``332 220-7026``

       :form comp-address: ``Ap #849-6241 Euismod Av., 677598, Carinthia, Belgium``

       :form comp-email: ``est.tempor@fringillami.org``

       :form comp-location: ``Belgium``

       :form ship-title: ``FingDocks``

       :form ship-name: ``Harding Gross``

       :form ship-phone: ``936 651-4847``

       :form ship-address: ``8798 At, St., 7639``

       :form ship-city: ``Rome``

       :form ship-state: ``Lazio``

       :form ship-country: ``Italy``

       :form ship-website: ``fringdocs.com``

       :form ship-post: ``300326``

       :resheader Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryLTR88aZAnBUSE7mv
       :statuscode 302: Redirects to ``/company``.



.. py:function:: delete_company_view(request, pk)

   Deletes the company with primary key ``pk`` on ``POST`` request.

   .. http:post:: /company/<str:object_id>/delete

       Deletes the company represented by the primary key ``object_id``.

       **Example request**:

       .. sourcecode:: http

           POST /company/32/delete HTTP/1.1
           Host: localhost:8000
           Content-Type: application/x-www-form-urlencoded

       :param object_id: Company primary key.
       :resheader Content-Type: application/x-www-form-urlencoded
       :statuscode 302: Redirects to ``/company``.
       :statuscode 500: Company matching query does not exist.



.. py:function:: display_companies_view(request)

   Retrieves the list of companies on ``GET`` request.

   .. http:get:: /companies/

       Gets the list of all companies.

       **Example request**:

       .. sourcecode:: http

           GET /companies/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

       :form page: The page number of the companies list.

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: List of companies received successfully.


.. py:class:: ProductBasicInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for basic product information.

   .. attribute:: name

      Name of the product.

      :type: str

   .. attribute:: item_type

      Type of the product.

      :type: str

   .. attribute:: category

      Product category.

      :type: str

   .. attribute:: description

      Short description of the product.

      :type: str


.. py:class:: ProductDetailedInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for product physical details

   .. attribute:: length

      Length of the product.

      :type: str

   .. attribute:: width

      Width of the product.

      :type: str

   .. attribute:: height

      Height of the product.

      :type: str

   .. attribute:: weight

      Weight of the product.

      :type: str


.. py:class:: ProductPricingForm


   Bases: :py:obj:`django.forms.Form`

   Form for pricing information of the product.

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Default discount percentage on the product.

      :type: float


.. py:class:: ProductPurchaseEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for product purchase entry.

   .. attribute:: ppe_id

      Unique identifier of the product purchase entry.

      :type: int

   .. attribute:: product

      Product associated wit the product purchase entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product to be ordered.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product purchase.

      :type: float


.. py:class:: ProductSalesEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for product sales entry.

   .. attribute:: pse_id

      Unique identifier of the product sales entry.

      :type: int

   .. attribute:: product

      Product associated with the product sales entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product.

      :type: float


.. py:class:: ProductStatusForm


   Bases: :py:obj:`django.forms.Form`

   Form for locating and identifying the product.

   .. attribute:: quantity

      Stock quantity of the product.

      :type: int

   .. attribute:: identifier

      Unique identifier of the product.

      :type: str

   .. attribute:: location

      Physical location of the product.

      :type: str


.. py:class:: ProductStorageInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for storage information.

   .. attribute:: barcode

      Barcode of the product.

      :type: str

   .. attribute:: expiry

      Expiry date of the product.

      :type: DateField


.. py:class:: PurchaseOrderBasicInfo


   Bases: :py:obj:`django.forms.Form`

   Form for basic information of the purchase order.

   .. attribute:: vendor

      Vendor associated with the purcahse order.

      :type: Vendor

   .. attribute:: date

      Date of the purchase order creation.

      :type: DateField

   .. attribute:: po

      Purchase order number.

      :type: int

   .. attribute:: discount

      Percentage of overall discount.

      :type: float

   .. attribute:: tax

      Percentage of tax.

      :type: float

   .. attribute:: paid

      Amount paid to the vendor.

      :type: float

   .. attribute:: balance

      Balance amount to be paid to the vendor.

      :type: float

   .. attribute:: subtotal

      Total of all the product purchase entries associated with the purchase order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the purchase order including  `taxtotal`.

      :type: float


.. py:class:: GRNInfo


   Bases: :py:obj:`django.forms.Form`

   Form for goods receipt note (GRN).

   .. attribute:: vendor

      Vendor associated with the goods receipt note.

      :type: Vendor

   .. attribute:: poRef

      List of identifiers of the purchase orders from which the goods receipt note is derived.

      :type: PurchaseOrder

   .. attribute:: identifier

      Unique identifier of the goods receipt note.

      :type: str

   .. attribute:: date

      Date of GRN creation.

      :type: DateField

   .. attribute:: grnType

      Type of GRN (``auto`` or ``manual``).

      :type: str

   .. attribute:: amendNumber

      Amendment number of the GRN.

      :type: int

   .. attribute:: amendDate

      Amendment date.

      :type: DateField

   .. attribute:: transporter

      Name of the transport/shipping service.

      :type: str

   .. attribute:: vehicleNumber

      Vehicle number using which the products are shipped.

      :type: str

   .. attribute:: gateInwardNumber

      Gate inward number of the vehicle.

      :type: str

   .. attribute:: preparedBy

      Name/identifier of the person who created the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who validated the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who inspected the physical products in the goods receipt note.

      :type: str

   .. attribute:: approvedBy

      Name/identifier of the authority who approved the goods receipt note.

      :type: str


.. py:class:: GRNEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for goods receipt note entry (GRNE).

   .. attribute:: product

      Product associated with the goods receipt note entry.

      :type: Product

   .. attribute:: grne_id

      Unique identifier of the GRNE.

      :type: int

   .. attribute:: ppe_id

      Unique identifier of the product purchase entry associated with the GRNE.

      :type: int

   .. attribute:: quantity

      Ordered quantity of product with reference to product purchase entry.

      :type: int

   .. attribute:: remark

      Remarks of the quality engineer or the GRN creator about status of products received.

      :type: str

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str


.. py:class:: ThumbnailForm


   Bases: :py:obj:`django.forms.Form`

   For for product thumbnail image.

   .. attribute:: image

      Image of the product.

      :type: ImageField


.. py:class:: SalesOrderBasicInfo


   Bases: :py:obj:`django.forms.Form`

   Form for basic information on sales order.

   .. attribute:: consumer

      Consumer associated with the sales order.

      :type: Consumer

   .. attribute:: date

      Date of the sales order creation.

      :type: DateField

   .. attribute:: so

      Sales order number.

      :type: int

   .. attribute:: discount

      Percentage discount associated with the sales order.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable.

      :type: float

   .. attribute:: paid

      Amount received from the consumer.

      :type: float

   .. attribute:: balance

      Amount balance with the consumer.

      :type: float

   .. attribute:: subtotal

      Total of all the product sales entries associated with the sales order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the sales order including  `taxtotal`.

      :type: float


.. py:class:: ShippingAddressForm


   Bases: :py:obj:`django.forms.Form`

   For for shipping address.

   .. attribute:: title

      Title of the firm.

      :type: str

   .. attribute:: name

      Name of the firm.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: city

      City.

      :type: str

   .. attribute:: state

      State.

      :type: str

   .. attribute:: country

      Country.

      :type: str

   .. attribute:: website

      Official website of the firm.

      :type: URLField

   .. attribute:: post

      Postal code of the firm.

      :type: str


.. py:class:: VendorForm


   Bases: :py:obj:`django.forms.Form`

   Form for basic informaion of the vendor.

   .. attribute:: name

      Name of the vendor.

      :type: str

   .. attribute:: identifier

      Unique identifier of the vendor.

      :type: str

   .. attribute:: gstin

      GSTIN number of the vendor.

      :type: str


.. py:class:: ConsumerForm


   Bases: :py:obj:`django.forms.Form`

   Form for consumer.

   .. attribute:: name

      Name of the consumer.

      :type: str

   .. attribute:: identifier

      Unique identifier of the consumer.

      :type: str

   .. attribute:: gstin

      GSTIN number of the consumer.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Address of the consumer.

      :type: str

   .. attribute:: email

      E-mail address of the consumer.

      :type: str

   .. attribute:: location

      City of the consumer.

      :type: str


.. py:class:: CompanyForm


   Bases: :py:obj:`django.forms.Form`

   Form for company.

   .. attribute:: name

      Name of the company.

      :type: str

   .. attribute:: owner

      Name of the owner of the company.

      :type: str

   .. attribute:: gstin

      GSTIN number of the company.

      :type: str

   .. attribute:: phone

      Contact number of the company.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: email

      E-mail address of the contact person.

      :type: str

   .. attribute:: location

      City of the company.

      :type: str


.. py:class:: HistoryForm


   Bases: :py:obj:`django.forms.Form`

   Form for history view.

   .. attribute:: qlen

      Count of the events visible on the history view.

      :type: int


.. py:class:: CommunicationForm


   Bases: :py:obj:`django.forms.Form`

   Form for communication information.

   .. attribute:: language

      Language of communication.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: email

      E-mail of the contact person.

      :type: EmailField

   .. attribute:: fax

      Fax number.

      :type: str


.. py:class:: PurchaseDataForm


   Bases: :py:obj:`django.forms.Form`

   Form for purchase related data.

   .. attribute:: currency

      Currency of purchase.

      :type: str

   .. attribute:: minorder

      Minimum order quantity.

      :type: int

   .. attribute:: contactperson

      Name of the contact person.

      :type: str

   .. attribute:: refcode

      Reference code.

      :type: str

   .. attribute:: transportmode

      Mode of transport of the shipment.

      :type: str


.. py:class:: BankAccountForm


   Bases: :py:obj:`django.forms.Form`

   Form for bank account details.

   .. attribute:: name

      Name of the bank.

      :type: str

   .. attribute:: branch

      Branch number of the bank.

      :type: str

   .. attribute:: region

      City in which the branch is located.

      :type: str

   .. attribute:: route

      Transit number.

      :type: str

   .. attribute:: number

      Bank account number.

      :type: int

   .. attribute:: acctype

      Type of bank account.

      :type: str

   .. attribute:: iban

      IBAN number.

      :type: str

   .. attribute:: code

      Bank code.

      :type: str

   .. attribute:: branchcode

      Branch code.

      :type: str


.. py:class:: Product


   Bases: :py:obj:`django.db.models.Model`

   Model of the product.

   .. attribute:: name

      Name of the product.

      :type: str

   .. attribute:: category

      Product category.

      :type: str

   .. attribute:: item_type

      Type of the product.

      :type: str

   .. attribute:: description

      Short description of the product.

      :type: str

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: quantity

      Stock quantity of the product.

      :type: int

   .. attribute:: identifier

      Unique identifier of the product.

      :type: str

   .. attribute:: location

      Physical location of the product.

      :type: str

   .. attribute:: length

      Length of the product.

      :type: str

   .. attribute:: width

      Width of the product.

      :type: str

   .. attribute:: height

      Height of the product.

      :type: str

   .. attribute:: weight

      Weight of the product.

      :type: str

   .. attribute:: discount

      Default discount percentage on the product.

      :type: float

   .. attribute:: barcode

      Barcode of the product.

      :type: str

   .. attribute:: expiry

      Expiry date of the product.

      :type: DateField

   .. attribute:: image

      Image of the product.

      :type: ImageField


.. py:class:: ProductPurchaseEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the product purchase entry.

   .. attribute:: product

      Product associated wit the product purchase entry.

      :type: ModelChoiceField

   .. attribute:: quantity

      Quantity of the product to be ordered.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product purchase.

      :type: float

   .. attribute:: order

      Referenced purchase order.

      :type: PurchaseOrder

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str

   .. method:: is_complete()

      Returns the completion status (boolean).

   .. method:: pending_quantity()

      Returns the pending quantity against the entry (int).



.. py:class:: GRNEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the goods receipt note entry (GRNE).

   .. attribute:: product

      Primary key of the ``Product`` instance associated with the goods receipt note entry.

      :type: Product

   .. attribute:: quantity

      Ordered quantity of product with reference to product purchase entry.

      :type: int

   .. attribute:: grne

      Primary key of the ``GoodsReceiptNote`` instance.

      :type: int

   .. attribute:: ppe

      Primary key of the ``ProductPurchaseEntry`` instance associated with the GRNE.

      :type: int

   .. attribute:: remark

      Remarks of the quality engineer or the GRN creator about status of products received.

      :type: str

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str


.. py:class:: ProductSalesEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the product sales entry.

   .. attribute:: product

      Primary key of the ``Product`` associated with the product sales entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product.

      :type: float

   .. attribute:: order

      Primary key of the ``SalesOrder`` referenced by the entry.

      :type: SalesOrder


.. py:class:: SalesOrder


   Bases: :py:obj:`django.db.models.Model`

   Model of the sales order.

   .. attribute:: consumer

      Consumer associated with the sales order.

      :type: ModelChoiceField

   .. attribute:: date

      Date of the sales order creation.

      :type: DateField

   .. attribute:: so

      Sales order number.

      :type: int

   .. attribute:: discount

      Percentage discount associated with the sales order.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable.

      :type: float

   .. attribute:: paid

      Amount received from the consumer.

      :type: float

   .. attribute:: balance

      Amount balance with the consumer.

      :type: float

   .. attribute:: subtotal

      Total of all the product sales entries associated with the sales order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the sales order including  `taxtotal`.

      :type: float


.. py:class:: PurchaseOrder


   Bases: :py:obj:`django.db.models.Model`

   Model of the purchase order.

   .. attribute:: vendor

      Vendor associated with the purchase order.

      :type: Vendor

   .. attribute:: date

      Date and time of the purchase order creation.

      :type: DateField

   .. attribute:: po

      Purchase order number.

      :type: int

   .. attribute:: discount

      Percentage discount.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable for the purchase.

      :type: float

   .. attribute:: paid

      Amount paid against the PO.

      :type: float

   .. attribute:: balance

      Amount balance which remains to be paid.

      :type: float

   .. attribute:: subtotal

      Total of all the product purchase entries associated with the purchase order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the purchase order including  `taxtotal`.

      :type: float

   .. method:: is_complete()

      Returns the completion status (boolean).

   .. method:: pending_ppes()

      Returns list of product purchase entries which are not completed.



.. py:class:: GoodsReceiptNote


   Bases: :py:obj:`django.db.models.Model`

   Model of the goods receipt note (GRN).

   .. attribute:: vendor

      Vendor associated with the goods receipt note.

      :type: ModelChoiceField

   .. attribute:: poRef

      List of identifiers of the purchase orders from which the goods receipt note is derived.

      :type: MultipleChoiceField

   .. attribute:: identifier

      Unique identifier of the goods receipt note.

      :type: str

   .. attribute:: date

      Date of GRN creation.

      :type: DateField

   .. attribute:: grnType

      Type of GRN (``auto`` or ``manual``).

      :type: ChoiceField

   .. attribute:: amendNumber

      Amendment number of the GRN.

      :type: int

   .. attribute:: amendDate

      Amendment date.

      :type: DateField

   .. attribute:: transporter

      Name of the transport/shipping service.

      :type: str

   .. attribute:: vehicleNumber

      Vehicle number using which the products are shipped.

      :type: str

   .. attribute:: gateInwardNumber

      Gate inward number of the vehicle.

      :type: str

   .. attribute:: preparedBy

      Name/identifier of the person who created the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who validated the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who inspected the physical products in the goods receipt note.

      :type: str

   .. attribute:: approvedBy

      Name/identifier of the authority who approved the goods receipt note.

      :type: str


.. py:class:: Consumer


   Bases: :py:obj:`django.db.models.Model`

   Model of the consumer.

   .. attribute:: name

      Name of the consumer.

      :type: str

   .. attribute:: identifier

      Unique identifier of the consumer.

      :type: str

   .. attribute:: gstin

      GSTIN number of the consumer.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Address of the consumer.

      :type: str

   .. attribute:: email

      E-mail address of the consumer.

      :type: str

   .. attribute:: location

      City of the consumer.

      :type: str

   :returns: [description]
   :rtype: [type]


.. py:class:: Vendor


   Bases: :py:obj:`django.db.models.Model`

   Model of the vendor.

   .. attribute:: name

      Name of the vendor.

      :type: str

   .. attribute:: identifier

      Unique identifier of the vendor.

      :type: str

   .. attribute:: gstin

      GSTIN number of the vendor.

      :type: str

   .. attribute:: address

      Primary key of the ``ShippingAddress`` instance associated with the vendor.

      :type: ShippingAddress

   .. attribute:: communication

      Primary key of the ``Communication`` instance associated with the vendor.

      :type: Communication

   .. attribute:: backaccount

      Primary key of the ``BankAccount`` instance associated with the vendor.

      :type: BankAccount

   .. attribute:: purchasedata

      Primary key of the ``PurchaseData`` instance associated with the vendor.

      :type: PurchaseData

   :returns: String representation of the vendor name.
   :rtype: str


.. py:class:: Company


   Bases: :py:obj:`django.db.models.Model`

   Model of the company.

   .. attribute:: name

      Name of the company.

      :type: str

   .. attribute:: owner

      Owner of the company.

      :type: str

   .. attribute:: gstin

      GSTIN number of the company.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: email

      E-mail address of the contact person.

      :type: str

   .. attribute:: location

      City of the company.

      :type: str

   .. attribute:: image

      Photo/logo of the company.

      :type: ImageField

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress`` instance associated with the company.

      :type: ShippingAddress

   :returns: String representation of the company name.
   :rtype: str


.. py:class:: PurchaseInvoice


   Bases: :py:obj:`django.db.models.Model`

   Model for the purchase invoice.

   .. attribute:: company

      Primary key of the ``Company``.

      :type: Company

   .. attribute:: po

      Primary key of the ``PurchaseOrder``.

      :type: PurchaseOrder

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress``.

      :type: ShippingAddress

   .. attribute:: communication

      Primary key of the ``Communication``.

      :type: Communication


.. py:class:: SalesInvoice


   Bases: :py:obj:`django.db.models.Model`

   Model for the sales order invoice.

   .. attribute:: company

      Primary key of the ``Company``.

      :type: Company

   .. attribute:: so

      Primary key of the ``SalesOrder``.

      :type: SalesOrder

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress``.

      :type: ShippingAddress


.. py:class:: FilterState


   Bases: :py:obj:`django.db.models.Model`

   Model of the filter state.

   .. attribute:: name

      Name of the filter state.

      :type: str


.. py:class:: FilterColumn


   Bases: :py:obj:`django.db.models.Model`

   Model of the column state.

   .. attribute:: name

      Name of the column.

      :type: str

   .. attribute:: label

      Label of the column.

      :type: str

   .. attribute:: visible

      Visibility flag.

      :type: bool

   .. attribute:: position

      Index of the column.

      :type: int

   .. attribute:: state

      Primary key of the ``FilterState`` instance being referenced by the column instance.

      :type: FilterState


.. py:class:: Object


   Bases: :py:obj:`django.db.models.Model`

   Model for a generic object.

   .. attribute:: identifier

      Unique identifier of the object.

      :type: str

   .. attribute:: name

      Name of the object.

      :type: str

   .. attribute:: model

      Model associated with the object.

      :type: str


.. py:class:: EventCard


   Bases: :py:obj:`django.db.models.Model`

   Model for event card to be displayed in the history view.

   .. attribute:: obj

      Object associated with the event.

      :type: OneToOneField

   .. attribute:: objId

      Unique identifier of the object.

      :type: str

   .. attribute:: objname

      Name of the object.

      :type: str

   .. attribute:: objmodel

      Model of the object.

      :type: str

   .. attribute:: date

      Timestamp of the event.

      :type: DateField

   .. attribute:: operation

      Type of event.

      :type: str


.. py:class:: EventType


   Bases: :py:obj:`django.db.models.Model`

   Model for event type.

   .. attribute:: name

      Name of the event being triggered.

      :type: str

   .. attribute:: label

      Label associated with the event.

      :type: str

   :returns: Returns the string representation of the label when the event type is queried.
   :rtype: Label


.. py:class:: ObjectModel


   Bases: :py:obj:`django.db.models.Model`

   Model associated with an object.

   .. attribute:: name

      Name of the object.

      :type: str

   .. attribute:: label

      Label string of the object.

      :type: str

   .. attribute:: modName

      Name of the model associated with the object.

      :type: str

   :returns: Returns string representation of the label when object model is queried.
   :rtype: Label


.. py:class:: HistoryFilterState


   Bases: :py:obj:`django.db.models.Model`

   Model of filter state of the history.

   .. attribute:: params

      Paramameters of the configured filters.

      :type: str


.. py:class:: ShippingAddress


   Bases: :py:obj:`django.db.models.Model`

   Model of the shipping address.

   .. attribute:: title

      Title of the firm.

      :type: str

   .. attribute:: name

      Name of the firm.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: city

      City.

      :type: str

   .. attribute:: state

      State.

      :type: str

   .. attribute:: country

      Country.

      :type: str

   .. attribute:: website

      Official website of the firm.

      :type: URLField

   .. attribute:: post

      Postal code of the firm.

      :type: str


.. py:class:: PurchaseData


   Bases: :py:obj:`django.db.models.Model`

   Model of the purchase data.

   .. attribute:: currency

      Currency of purchase.

      :type: str

   .. attribute:: minorder

      Minimum order quantity.

      :type: int

   .. attribute:: contactperson

      Name of the contact person.

      :type: str

   .. attribute:: refcode

      Reference code.

      :type: str

   .. attribute:: transportmode

      Mode of transport of the shipment.

      :type: str


.. py:class:: Communication


   Bases: :py:obj:`django.db.models.Model`

   Model of the communication information.

   .. attribute:: language

      Language of communication.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: email

      E-mail of the contact person.

      :type: EmailField

   .. attribute:: fax

      Fax number.

      :type: str


.. py:class:: BankAccount


   Bases: :py:obj:`django.db.models.Model`

   Model of the bank account details.

   .. attribute:: name

      Name of the bank.

      :type: str

   .. attribute:: branch

      Branch number of the bank.

      :type: str

   .. attribute:: region

      City in which the branch is located.

      :type: str

   .. attribute:: route

      Transit number.

      :type: str

   .. attribute:: number

      Bank account number.

      :type: int

   .. attribute:: acctype

      Type of bank account.

      :type: str

   .. attribute:: iban

      IBAN number.

      :type: str

   .. attribute:: code

      Bank code.

      :type: str

   .. attribute:: branchcode

      Branch code.

      :type: str


.. py:function:: get_columns(state)

   Gets the columns of the display table.

   This function takes a filter state and returns an array of column names that are
   ordered depending on the position attribute of the columns. This order is important
   as the queryset will be rendered in the display table according to the column order
   in this returned array.

   :param state: Filter state of the columns.
   :type state: FilterState

   :returns: A list that dictates the order of the columns.
   :rtype: List


.. py:function:: sort_ascending_descending(request, model)

   Sorts and saves the state of the column.

   This function takes a request, finds which column needs to be sorted in ascending/descending
   order, and returns the sorted queryset.

   :param request: ``GET`` request received for retreiving the list of model instances.
   :type request: HttpRequest
   :param model: Model of the objects being retrieved.
   :type model: Model

   :returns: List of sorted object instances.
   :rtype: QuerySet


.. py:function:: change_column_position(request, state)

   Modifies the column states depending on the request.

   This function:
       - Takes a filter state
       - Extracts the column names into an order array
       - Modifies the column order in the array depending on user input direction (left/right)
       - Saves this modified state of columns into the database
       - Returns the modified column names array

   :param request: ``GET`` request for retrieving the state of the columns.
   :type request: HttpRequest
   :param state: Filter state of the columns.
   :type state: FilterState

   :returns: List of sorted columns.
   :rtype: List


.. py:function:: paginate(queryset, filter, page_number)

   Paginates the list of objects.

   This function takes the entire queryset and filters out only objects belonging to the
   request page

   :param queryset: ``QuerySet`` of the objects retrieved from the database.
   :type queryset: QuerySet
   :param filter: Filter state of the columns.
   :type filter: FilterState
   :param page_number: Page number requested.
   :type page_number: int


.. py:class:: VendorFilter


   Bases: :py:obj:`django_filters.FilterSet`

   .. py:class:: Meta




.. py:class:: VendorSerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``Vendor`` class instance.

   The ``VendorSerializer.data`` attribute gives the ``JSON`` serialized data of the ``Vendor`` instance::

       {
           "name": "Harding Gross",
           "identifier": "HG",
           "gstin": "89ACC16843543",
           "address": {
               "name": "Harding Gross",
               "address": "8798 At, St., 7639",
               "city": "Rome",
               "phone": "936 651-4847",
               "state": "Lazio",
               "country": "Italy",
               "post": "300326"
       }


   .. py:class:: Meta




.. py:function:: create_vendor_view(request)

   Creates a vendor on ``POST`` request, and returns a vendor creation form on ``GET`` request.

   .. http:get:: /vendor

       Gets the vendor creation form.

       **Example request**:

       .. sourcecode:: http

           GET /vendor/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9


       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: Vendor creation form received successfully.

   .. http:post:: /vendor

       Creates a vendor.

       **Example request**:

       .. sourcecode:: http

           POST /vendor/ HTTP/1.1
           Host: localhost:8000
           Content-Type: multipart/form-data;

       :form vend-name: ``Lug Vendor``

       :form vend-identifier: ``TBPN-02692``

       :form vend-gstin: ``89AAC254254F2``

       :form ship-title: ``AKATSUKI``

       :form ship-name: ``Kuame Burns``

       :form ship-phone: ``679 166-3127``

       :form ship-address: ``Nonummy Avenue``

       :form ship-city: ``Chung Cheong``

       :form ship-state: ``Guanacaste``

       :form ship-country: ``tellusidnunc.net``

       :form ship-website: ``Germany.protitor@tellusid.net``

       :form ship-post: ``8949``

       :form pdform-currency: ``DEM``

       :form pdform-minorder: ``2000``

       :form pdform-contactperson: ``Harding Gross``

       :form pdform-refcode: ``CUST000124``

       :form pdform-transportmode: ``Express``

       :form com-language: ``German``

       :form com-phone: ``936 651-4817``

       :form com-email: ``non.sollicitudin@uttincidunt.org``

       :form com-fax: ``323 555 1234``

       :form bank-name: ``FIRST FLORIDA INTEGRITY BANK``

       :form bank-branch: ``Bavaria``

       :form bank-region: ``Bayem``

       :form bank-route: ``67016325``

       :form bank-number: ``42543251393``

       :form bank-acctype: ``Current``

       :form bank-iban: ``DE6233542``

       :form bank-code: ``BA54354354``

       :form bank-branchcode: ``BA35435823``

       :resheader Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryLTR88aZAnBUSE7mv
       :statuscode 302: Redirects to ``/vendor``.



.. py:function:: update_vendor_view(request)

   Updates a vendor on ``POST`` request and returns the vendor update form for ``GET`` request.

   .. http:get:: /vendor/update

       Gets the vendor update form whose primary key matches the query parameter ``pk``.

       **Example request**:

       .. sourcecode:: http

           GET /vendor/update HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

       :query pk: The primary key of the vendor.

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: Vendor update form received successfully.

   .. http:post:: /vendor/update

       Updates the vendor.

       **Example request**:

       .. sourcecode:: http

           POST /vendor/update HTTP/1.1
           Host: localhost:8000
           Content-Type: multipart/form-data;

       :form vend-name: ``Lug Vendor``

       :form vend-identifier: ``TBPN-02692``

       :form vend-gstin: ``89AAC254254F2``

       :form ship-title: ``AKATSUKI``

       :form ship-name: ``Kuame Burns``

       :form ship-phone: ``679 166-3127``

       :form ship-address: ``Nonummy Avenue``

       :form ship-city: ``Chung Cheong``

       :form ship-state: ``Guanacaste``

       :form ship-country: ``tellusidnunc.net``

       :form ship-website: ``Germany.protitor@tellusid.net``

       :form ship-post: ``8949``

       :form pdform-currency: ``DEM``

       :form pdform-minorder: ``1000``

       :form pdform-contactperson: ``Harding Gross``

       :form pdform-refcode: ``CUST000124``

       :form pdform-transportmode: ``Express``

       :form com-language: ``German``

       :form com-phone: ``936 651-4817``

       :form com-email: ``non.sollicitudin@uttincidunt.org``

       :form com-fax: ``323 555 1234``

       :form bank-name: ``FIRST FLORIDA INTEGRITY BANK``

       :form bank-branch: ``Bavaria``

       :form bank-region: ``Bayem``

       :form bank-route: ``67016325``

       :form bank-number: ``42543251393``

       :form bank-acctype: ``Current``

       :form bank-iban: ``DE6233542``

       :form bank-code: ``BA54354354``

       :form bank-branchcode: ``BA35435823``

       :resheader Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryLTR88aZAnBUSE7mv
       :statuscode 302: Redirects to ``/consumer``.



.. py:function:: delete_vendor_view(request, pk)

   Deletes the vendor with primary key ``pk`` on ``POST`` request.

   .. http:post:: /vendor/<str:object_id>/delete

       Deletes the vendor represented by the primary key ``object_id``.

       **Example request**:

       .. sourcecode:: http

           POST /vendor/5/delete HTTP/1.1
           Host: localhost:8000
           Content-Type: application/x-www-form-urlencoded

       :param object_id: Vendor primary key.
       :resheader Content-Type: application/x-www-form-urlencoded
       :statuscode 302: Redirects to ``/vendors``.
       :statuscode 500: Vendor matching query does not exist.



.. py:function:: display_vendors_view(request)

   Retrieves the list of vendors on ``GET`` request.

   .. http:get:: /vendors/

       Gets the list of all vendors.

       **Example request**:

       .. sourcecode:: http

           GET /vendors/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

       :form page: The page number of the vendors list.

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: List of vendors received successfully.


.. py:function:: get_vendor(request)

   Returns the ``JSON`` serialized data of the requested vendor on ``GET`` request.

   .. http:get:: /get_vendor/

       Gets the JSON serialized data of the requested vendor.

       **Example request**:

       .. sourcecode:: http

           GET /get_vendor/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

       :param vendor_id: Vendor primary key.

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: application/json; charset=utf-8

           [
               {
                   "name": "Lug Vendor",
                   "identifier": "TBPN-02692",
                   "gstin": "89AAC4683897343",
                   "address": {
                       "name": "Kuame Burns",
                       "address": "Nonummy Avenue",
                       "city": "Chung Cheong",
                       "phone": "679 166-3127",
                       "state": "Guanacaste",
                       "country": "tellusidnunc.net",
                       "post": "8949"
                   }
               }
           ]

       :resheader Content-Type: application/json
       :statuscode 200: List of vendors received successfully.
       :statuscode 400: Bad request version
       :statuscode 500: Vendor matching query does not exist.


.. py:class:: ProductBasicInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for basic product information.

   .. attribute:: name

      Name of the product.

      :type: str

   .. attribute:: item_type

      Type of the product.

      :type: str

   .. attribute:: category

      Product category.

      :type: str

   .. attribute:: description

      Short description of the product.

      :type: str


.. py:class:: ProductDetailedInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for product physical details

   .. attribute:: length

      Length of the product.

      :type: str

   .. attribute:: width

      Width of the product.

      :type: str

   .. attribute:: height

      Height of the product.

      :type: str

   .. attribute:: weight

      Weight of the product.

      :type: str


.. py:class:: ProductPricingForm


   Bases: :py:obj:`django.forms.Form`

   Form for pricing information of the product.

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Default discount percentage on the product.

      :type: float


.. py:class:: ProductPurchaseEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for product purchase entry.

   .. attribute:: ppe_id

      Unique identifier of the product purchase entry.

      :type: int

   .. attribute:: product

      Product associated wit the product purchase entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product to be ordered.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product purchase.

      :type: float


.. py:class:: ProductSalesEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for product sales entry.

   .. attribute:: pse_id

      Unique identifier of the product sales entry.

      :type: int

   .. attribute:: product

      Product associated with the product sales entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product.

      :type: float


.. py:class:: ProductStatusForm


   Bases: :py:obj:`django.forms.Form`

   Form for locating and identifying the product.

   .. attribute:: quantity

      Stock quantity of the product.

      :type: int

   .. attribute:: identifier

      Unique identifier of the product.

      :type: str

   .. attribute:: location

      Physical location of the product.

      :type: str


.. py:class:: ProductStorageInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for storage information.

   .. attribute:: barcode

      Barcode of the product.

      :type: str

   .. attribute:: expiry

      Expiry date of the product.

      :type: DateField


.. py:class:: PurchaseOrderBasicInfo


   Bases: :py:obj:`django.forms.Form`

   Form for basic information of the purchase order.

   .. attribute:: vendor

      Vendor associated with the purcahse order.

      :type: Vendor

   .. attribute:: date

      Date of the purchase order creation.

      :type: DateField

   .. attribute:: po

      Purchase order number.

      :type: int

   .. attribute:: discount

      Percentage of overall discount.

      :type: float

   .. attribute:: tax

      Percentage of tax.

      :type: float

   .. attribute:: paid

      Amount paid to the vendor.

      :type: float

   .. attribute:: balance

      Balance amount to be paid to the vendor.

      :type: float

   .. attribute:: subtotal

      Total of all the product purchase entries associated with the purchase order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the purchase order including  `taxtotal`.

      :type: float


.. py:class:: GRNInfo


   Bases: :py:obj:`django.forms.Form`

   Form for goods receipt note (GRN).

   .. attribute:: vendor

      Vendor associated with the goods receipt note.

      :type: Vendor

   .. attribute:: poRef

      List of identifiers of the purchase orders from which the goods receipt note is derived.

      :type: PurchaseOrder

   .. attribute:: identifier

      Unique identifier of the goods receipt note.

      :type: str

   .. attribute:: date

      Date of GRN creation.

      :type: DateField

   .. attribute:: grnType

      Type of GRN (``auto`` or ``manual``).

      :type: str

   .. attribute:: amendNumber

      Amendment number of the GRN.

      :type: int

   .. attribute:: amendDate

      Amendment date.

      :type: DateField

   .. attribute:: transporter

      Name of the transport/shipping service.

      :type: str

   .. attribute:: vehicleNumber

      Vehicle number using which the products are shipped.

      :type: str

   .. attribute:: gateInwardNumber

      Gate inward number of the vehicle.

      :type: str

   .. attribute:: preparedBy

      Name/identifier of the person who created the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who validated the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who inspected the physical products in the goods receipt note.

      :type: str

   .. attribute:: approvedBy

      Name/identifier of the authority who approved the goods receipt note.

      :type: str


.. py:class:: GRNEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for goods receipt note entry (GRNE).

   .. attribute:: product

      Product associated with the goods receipt note entry.

      :type: Product

   .. attribute:: grne_id

      Unique identifier of the GRNE.

      :type: int

   .. attribute:: ppe_id

      Unique identifier of the product purchase entry associated with the GRNE.

      :type: int

   .. attribute:: quantity

      Ordered quantity of product with reference to product purchase entry.

      :type: int

   .. attribute:: remark

      Remarks of the quality engineer or the GRN creator about status of products received.

      :type: str

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str


.. py:class:: ThumbnailForm


   Bases: :py:obj:`django.forms.Form`

   For for product thumbnail image.

   .. attribute:: image

      Image of the product.

      :type: ImageField


.. py:class:: SalesOrderBasicInfo


   Bases: :py:obj:`django.forms.Form`

   Form for basic information on sales order.

   .. attribute:: consumer

      Consumer associated with the sales order.

      :type: Consumer

   .. attribute:: date

      Date of the sales order creation.

      :type: DateField

   .. attribute:: so

      Sales order number.

      :type: int

   .. attribute:: discount

      Percentage discount associated with the sales order.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable.

      :type: float

   .. attribute:: paid

      Amount received from the consumer.

      :type: float

   .. attribute:: balance

      Amount balance with the consumer.

      :type: float

   .. attribute:: subtotal

      Total of all the product sales entries associated with the sales order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the sales order including  `taxtotal`.

      :type: float


.. py:class:: ShippingAddressForm


   Bases: :py:obj:`django.forms.Form`

   For for shipping address.

   .. attribute:: title

      Title of the firm.

      :type: str

   .. attribute:: name

      Name of the firm.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: city

      City.

      :type: str

   .. attribute:: state

      State.

      :type: str

   .. attribute:: country

      Country.

      :type: str

   .. attribute:: website

      Official website of the firm.

      :type: URLField

   .. attribute:: post

      Postal code of the firm.

      :type: str


.. py:class:: VendorForm


   Bases: :py:obj:`django.forms.Form`

   Form for basic informaion of the vendor.

   .. attribute:: name

      Name of the vendor.

      :type: str

   .. attribute:: identifier

      Unique identifier of the vendor.

      :type: str

   .. attribute:: gstin

      GSTIN number of the vendor.

      :type: str


.. py:class:: ConsumerForm


   Bases: :py:obj:`django.forms.Form`

   Form for consumer.

   .. attribute:: name

      Name of the consumer.

      :type: str

   .. attribute:: identifier

      Unique identifier of the consumer.

      :type: str

   .. attribute:: gstin

      GSTIN number of the consumer.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Address of the consumer.

      :type: str

   .. attribute:: email

      E-mail address of the consumer.

      :type: str

   .. attribute:: location

      City of the consumer.

      :type: str


.. py:class:: CompanyForm


   Bases: :py:obj:`django.forms.Form`

   Form for company.

   .. attribute:: name

      Name of the company.

      :type: str

   .. attribute:: owner

      Name of the owner of the company.

      :type: str

   .. attribute:: gstin

      GSTIN number of the company.

      :type: str

   .. attribute:: phone

      Contact number of the company.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: email

      E-mail address of the contact person.

      :type: str

   .. attribute:: location

      City of the company.

      :type: str


.. py:class:: HistoryForm


   Bases: :py:obj:`django.forms.Form`

   Form for history view.

   .. attribute:: qlen

      Count of the events visible on the history view.

      :type: int


.. py:class:: CommunicationForm


   Bases: :py:obj:`django.forms.Form`

   Form for communication information.

   .. attribute:: language

      Language of communication.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: email

      E-mail of the contact person.

      :type: EmailField

   .. attribute:: fax

      Fax number.

      :type: str


.. py:class:: PurchaseDataForm


   Bases: :py:obj:`django.forms.Form`

   Form for purchase related data.

   .. attribute:: currency

      Currency of purchase.

      :type: str

   .. attribute:: minorder

      Minimum order quantity.

      :type: int

   .. attribute:: contactperson

      Name of the contact person.

      :type: str

   .. attribute:: refcode

      Reference code.

      :type: str

   .. attribute:: transportmode

      Mode of transport of the shipment.

      :type: str


.. py:class:: BankAccountForm


   Bases: :py:obj:`django.forms.Form`

   Form for bank account details.

   .. attribute:: name

      Name of the bank.

      :type: str

   .. attribute:: branch

      Branch number of the bank.

      :type: str

   .. attribute:: region

      City in which the branch is located.

      :type: str

   .. attribute:: route

      Transit number.

      :type: str

   .. attribute:: number

      Bank account number.

      :type: int

   .. attribute:: acctype

      Type of bank account.

      :type: str

   .. attribute:: iban

      IBAN number.

      :type: str

   .. attribute:: code

      Bank code.

      :type: str

   .. attribute:: branchcode

      Branch code.

      :type: str


.. py:class:: Product


   Bases: :py:obj:`django.db.models.Model`

   Model of the product.

   .. attribute:: name

      Name of the product.

      :type: str

   .. attribute:: category

      Product category.

      :type: str

   .. attribute:: item_type

      Type of the product.

      :type: str

   .. attribute:: description

      Short description of the product.

      :type: str

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: quantity

      Stock quantity of the product.

      :type: int

   .. attribute:: identifier

      Unique identifier of the product.

      :type: str

   .. attribute:: location

      Physical location of the product.

      :type: str

   .. attribute:: length

      Length of the product.

      :type: str

   .. attribute:: width

      Width of the product.

      :type: str

   .. attribute:: height

      Height of the product.

      :type: str

   .. attribute:: weight

      Weight of the product.

      :type: str

   .. attribute:: discount

      Default discount percentage on the product.

      :type: float

   .. attribute:: barcode

      Barcode of the product.

      :type: str

   .. attribute:: expiry

      Expiry date of the product.

      :type: DateField

   .. attribute:: image

      Image of the product.

      :type: ImageField


.. py:class:: ProductPurchaseEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the product purchase entry.

   .. attribute:: product

      Product associated wit the product purchase entry.

      :type: ModelChoiceField

   .. attribute:: quantity

      Quantity of the product to be ordered.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product purchase.

      :type: float

   .. attribute:: order

      Referenced purchase order.

      :type: PurchaseOrder

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str

   .. method:: is_complete()

      Returns the completion status (boolean).

   .. method:: pending_quantity()

      Returns the pending quantity against the entry (int).



.. py:class:: GRNEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the goods receipt note entry (GRNE).

   .. attribute:: product

      Primary key of the ``Product`` instance associated with the goods receipt note entry.

      :type: Product

   .. attribute:: quantity

      Ordered quantity of product with reference to product purchase entry.

      :type: int

   .. attribute:: grne

      Primary key of the ``GoodsReceiptNote`` instance.

      :type: int

   .. attribute:: ppe

      Primary key of the ``ProductPurchaseEntry`` instance associated with the GRNE.

      :type: int

   .. attribute:: remark

      Remarks of the quality engineer or the GRN creator about status of products received.

      :type: str

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str


.. py:class:: ProductSalesEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the product sales entry.

   .. attribute:: product

      Primary key of the ``Product`` associated with the product sales entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product.

      :type: float

   .. attribute:: order

      Primary key of the ``SalesOrder`` referenced by the entry.

      :type: SalesOrder


.. py:class:: SalesOrder


   Bases: :py:obj:`django.db.models.Model`

   Model of the sales order.

   .. attribute:: consumer

      Consumer associated with the sales order.

      :type: ModelChoiceField

   .. attribute:: date

      Date of the sales order creation.

      :type: DateField

   .. attribute:: so

      Sales order number.

      :type: int

   .. attribute:: discount

      Percentage discount associated with the sales order.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable.

      :type: float

   .. attribute:: paid

      Amount received from the consumer.

      :type: float

   .. attribute:: balance

      Amount balance with the consumer.

      :type: float

   .. attribute:: subtotal

      Total of all the product sales entries associated with the sales order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the sales order including  `taxtotal`.

      :type: float


.. py:class:: PurchaseOrder


   Bases: :py:obj:`django.db.models.Model`

   Model of the purchase order.

   .. attribute:: vendor

      Vendor associated with the purchase order.

      :type: Vendor

   .. attribute:: date

      Date and time of the purchase order creation.

      :type: DateField

   .. attribute:: po

      Purchase order number.

      :type: int

   .. attribute:: discount

      Percentage discount.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable for the purchase.

      :type: float

   .. attribute:: paid

      Amount paid against the PO.

      :type: float

   .. attribute:: balance

      Amount balance which remains to be paid.

      :type: float

   .. attribute:: subtotal

      Total of all the product purchase entries associated with the purchase order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the purchase order including  `taxtotal`.

      :type: float

   .. method:: is_complete()

      Returns the completion status (boolean).

   .. method:: pending_ppes()

      Returns list of product purchase entries which are not completed.



.. py:class:: GoodsReceiptNote


   Bases: :py:obj:`django.db.models.Model`

   Model of the goods receipt note (GRN).

   .. attribute:: vendor

      Vendor associated with the goods receipt note.

      :type: ModelChoiceField

   .. attribute:: poRef

      List of identifiers of the purchase orders from which the goods receipt note is derived.

      :type: MultipleChoiceField

   .. attribute:: identifier

      Unique identifier of the goods receipt note.

      :type: str

   .. attribute:: date

      Date of GRN creation.

      :type: DateField

   .. attribute:: grnType

      Type of GRN (``auto`` or ``manual``).

      :type: ChoiceField

   .. attribute:: amendNumber

      Amendment number of the GRN.

      :type: int

   .. attribute:: amendDate

      Amendment date.

      :type: DateField

   .. attribute:: transporter

      Name of the transport/shipping service.

      :type: str

   .. attribute:: vehicleNumber

      Vehicle number using which the products are shipped.

      :type: str

   .. attribute:: gateInwardNumber

      Gate inward number of the vehicle.

      :type: str

   .. attribute:: preparedBy

      Name/identifier of the person who created the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who validated the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who inspected the physical products in the goods receipt note.

      :type: str

   .. attribute:: approvedBy

      Name/identifier of the authority who approved the goods receipt note.

      :type: str


.. py:class:: Consumer


   Bases: :py:obj:`django.db.models.Model`

   Model of the consumer.

   .. attribute:: name

      Name of the consumer.

      :type: str

   .. attribute:: identifier

      Unique identifier of the consumer.

      :type: str

   .. attribute:: gstin

      GSTIN number of the consumer.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Address of the consumer.

      :type: str

   .. attribute:: email

      E-mail address of the consumer.

      :type: str

   .. attribute:: location

      City of the consumer.

      :type: str

   :returns: [description]
   :rtype: [type]


.. py:class:: Vendor


   Bases: :py:obj:`django.db.models.Model`

   Model of the vendor.

   .. attribute:: name

      Name of the vendor.

      :type: str

   .. attribute:: identifier

      Unique identifier of the vendor.

      :type: str

   .. attribute:: gstin

      GSTIN number of the vendor.

      :type: str

   .. attribute:: address

      Primary key of the ``ShippingAddress`` instance associated with the vendor.

      :type: ShippingAddress

   .. attribute:: communication

      Primary key of the ``Communication`` instance associated with the vendor.

      :type: Communication

   .. attribute:: backaccount

      Primary key of the ``BankAccount`` instance associated with the vendor.

      :type: BankAccount

   .. attribute:: purchasedata

      Primary key of the ``PurchaseData`` instance associated with the vendor.

      :type: PurchaseData

   :returns: String representation of the vendor name.
   :rtype: str


.. py:class:: Company


   Bases: :py:obj:`django.db.models.Model`

   Model of the company.

   .. attribute:: name

      Name of the company.

      :type: str

   .. attribute:: owner

      Owner of the company.

      :type: str

   .. attribute:: gstin

      GSTIN number of the company.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: email

      E-mail address of the contact person.

      :type: str

   .. attribute:: location

      City of the company.

      :type: str

   .. attribute:: image

      Photo/logo of the company.

      :type: ImageField

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress`` instance associated with the company.

      :type: ShippingAddress

   :returns: String representation of the company name.
   :rtype: str


.. py:class:: PurchaseInvoice


   Bases: :py:obj:`django.db.models.Model`

   Model for the purchase invoice.

   .. attribute:: company

      Primary key of the ``Company``.

      :type: Company

   .. attribute:: po

      Primary key of the ``PurchaseOrder``.

      :type: PurchaseOrder

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress``.

      :type: ShippingAddress

   .. attribute:: communication

      Primary key of the ``Communication``.

      :type: Communication


.. py:class:: SalesInvoice


   Bases: :py:obj:`django.db.models.Model`

   Model for the sales order invoice.

   .. attribute:: company

      Primary key of the ``Company``.

      :type: Company

   .. attribute:: so

      Primary key of the ``SalesOrder``.

      :type: SalesOrder

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress``.

      :type: ShippingAddress


.. py:class:: FilterState


   Bases: :py:obj:`django.db.models.Model`

   Model of the filter state.

   .. attribute:: name

      Name of the filter state.

      :type: str


.. py:class:: FilterColumn


   Bases: :py:obj:`django.db.models.Model`

   Model of the column state.

   .. attribute:: name

      Name of the column.

      :type: str

   .. attribute:: label

      Label of the column.

      :type: str

   .. attribute:: visible

      Visibility flag.

      :type: bool

   .. attribute:: position

      Index of the column.

      :type: int

   .. attribute:: state

      Primary key of the ``FilterState`` instance being referenced by the column instance.

      :type: FilterState


.. py:class:: Object


   Bases: :py:obj:`django.db.models.Model`

   Model for a generic object.

   .. attribute:: identifier

      Unique identifier of the object.

      :type: str

   .. attribute:: name

      Name of the object.

      :type: str

   .. attribute:: model

      Model associated with the object.

      :type: str


.. py:class:: EventCard


   Bases: :py:obj:`django.db.models.Model`

   Model for event card to be displayed in the history view.

   .. attribute:: obj

      Object associated with the event.

      :type: OneToOneField

   .. attribute:: objId

      Unique identifier of the object.

      :type: str

   .. attribute:: objname

      Name of the object.

      :type: str

   .. attribute:: objmodel

      Model of the object.

      :type: str

   .. attribute:: date

      Timestamp of the event.

      :type: DateField

   .. attribute:: operation

      Type of event.

      :type: str


.. py:class:: EventType


   Bases: :py:obj:`django.db.models.Model`

   Model for event type.

   .. attribute:: name

      Name of the event being triggered.

      :type: str

   .. attribute:: label

      Label associated with the event.

      :type: str

   :returns: Returns the string representation of the label when the event type is queried.
   :rtype: Label


.. py:class:: ObjectModel


   Bases: :py:obj:`django.db.models.Model`

   Model associated with an object.

   .. attribute:: name

      Name of the object.

      :type: str

   .. attribute:: label

      Label string of the object.

      :type: str

   .. attribute:: modName

      Name of the model associated with the object.

      :type: str

   :returns: Returns string representation of the label when object model is queried.
   :rtype: Label


.. py:class:: HistoryFilterState


   Bases: :py:obj:`django.db.models.Model`

   Model of filter state of the history.

   .. attribute:: params

      Paramameters of the configured filters.

      :type: str


.. py:class:: ShippingAddress


   Bases: :py:obj:`django.db.models.Model`

   Model of the shipping address.

   .. attribute:: title

      Title of the firm.

      :type: str

   .. attribute:: name

      Name of the firm.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: city

      City.

      :type: str

   .. attribute:: state

      State.

      :type: str

   .. attribute:: country

      Country.

      :type: str

   .. attribute:: website

      Official website of the firm.

      :type: URLField

   .. attribute:: post

      Postal code of the firm.

      :type: str


.. py:class:: PurchaseData


   Bases: :py:obj:`django.db.models.Model`

   Model of the purchase data.

   .. attribute:: currency

      Currency of purchase.

      :type: str

   .. attribute:: minorder

      Minimum order quantity.

      :type: int

   .. attribute:: contactperson

      Name of the contact person.

      :type: str

   .. attribute:: refcode

      Reference code.

      :type: str

   .. attribute:: transportmode

      Mode of transport of the shipment.

      :type: str


.. py:class:: Communication


   Bases: :py:obj:`django.db.models.Model`

   Model of the communication information.

   .. attribute:: language

      Language of communication.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: email

      E-mail of the contact person.

      :type: EmailField

   .. attribute:: fax

      Fax number.

      :type: str


.. py:class:: BankAccount


   Bases: :py:obj:`django.db.models.Model`

   Model of the bank account details.

   .. attribute:: name

      Name of the bank.

      :type: str

   .. attribute:: branch

      Branch number of the bank.

      :type: str

   .. attribute:: region

      City in which the branch is located.

      :type: str

   .. attribute:: route

      Transit number.

      :type: str

   .. attribute:: number

      Bank account number.

      :type: int

   .. attribute:: acctype

      Type of bank account.

      :type: str

   .. attribute:: iban

      IBAN number.

      :type: str

   .. attribute:: code

      Bank code.

      :type: str

   .. attribute:: branchcode

      Branch code.

      :type: str


.. py:function:: get_columns(state)

   Gets the columns of the display table.

   This function takes a filter state and returns an array of column names that are
   ordered depending on the position attribute of the columns. This order is important
   as the queryset will be rendered in the display table according to the column order
   in this returned array.

   :param state: Filter state of the columns.
   :type state: FilterState

   :returns: A list that dictates the order of the columns.
   :rtype: List


.. py:function:: sort_ascending_descending(request, model)

   Sorts and saves the state of the column.

   This function takes a request, finds which column needs to be sorted in ascending/descending
   order, and returns the sorted queryset.

   :param request: ``GET`` request received for retreiving the list of model instances.
   :type request: HttpRequest
   :param model: Model of the objects being retrieved.
   :type model: Model

   :returns: List of sorted object instances.
   :rtype: QuerySet


.. py:function:: change_column_position(request, state)

   Modifies the column states depending on the request.

   This function:
       - Takes a filter state
       - Extracts the column names into an order array
       - Modifies the column order in the array depending on user input direction (left/right)
       - Saves this modified state of columns into the database
       - Returns the modified column names array

   :param request: ``GET`` request for retrieving the state of the columns.
   :type request: HttpRequest
   :param state: Filter state of the columns.
   :type state: FilterState

   :returns: List of sorted columns.
   :rtype: List


.. py:function:: paginate(queryset, filter, page_number)

   Paginates the list of objects.

   This function takes the entire queryset and filters out only objects belonging to the
   request page

   :param queryset: ``QuerySet`` of the objects retrieved from the database.
   :type queryset: QuerySet
   :param filter: Filter state of the columns.
   :type filter: FilterState
   :param page_number: Page number requested.
   :type page_number: int


.. py:class:: ConsumerFilter


   Bases: :py:obj:`django_filters.FilterSet`

   .. py:class:: Meta




.. py:class:: ConsumerSerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``Consumer`` class instance.

   The ``ConsumerSerializer.data`` attribute gives the ``JSON`` serialized data of the ``Consumer`` instance::

       {
           "name": "The Music Store",
           "identifier": "CONS1256",
           "gstin": "89AAC4633353643",
           "phone": "+91 8325642358",
           "address": "Plot no 958, N- 4, Neo Complex, Barh, Wokha, Nagaland, 797111",
           "email": "JohnDoe@themusic.store",
           "location": "Wokha"
       }


   .. py:class:: Meta




.. py:function:: create_consumer_view(request)

   Creates a consumer on ``POST`` request, and returns a consumer creation form on ``GET`` request.

   .. http:get:: /consumer

       Gets the consumer creation form.

       **Example request**:

       .. sourcecode:: http

           GET /consumer/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9


       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: Consumer creation form received successfully.

   .. http:post:: /consumer

       Creates a consumer.

       **Example request**:

       .. sourcecode:: http

           POST /consumer/ HTTP/1.1
           Host: localhost:8000
           Content-Type: multipart/form-data;

       :form consumer-name: ``The Music Store``

       :form consumer-identifier: ``CONS1256``

       :form consumer-gstin: ``89ACC654654335``

       :form consumer-phone: ``+91 6543525422``

       :form consumer-address: ``Plot no. 958, N-4, Neo Complex, Barh, Wokha, Nagaland, 797111``

       :form consumer-email: ``johnDoe@themusic.store``

       :form consumer-location: ``Wokha``

       :resheader Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryLTR88aZAnBUSE7mv
       :statuscode 302: Redirects to ``/consumer``.



.. py:function:: update_consumer_view(request)

   Updates a consuemr on ``POST`` request and returns the consumer update form for ``GET`` request.

   .. http:get:: /consumer/update

       Gets the consumer update form whose primary key matches the query parameter ``pk``.

       **Example request**:

       .. sourcecode:: http

           GET /consumer/update HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

       :query pk: The primary key of the consumer.

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: Consumer update form received successfully.

   .. http:post:: /consumer/update

       Updates the consumer.

       **Example request**:

       .. sourcecode:: http

           POST /company/update HTTP/1.1
           Host: localhost:8000
           Content-Type: multipart/form-data;

       :form pk: ``7``

       :form consumer-name: ``The Music Store``

       :form consumer-identifier: ``CONS1256``

       :form consumer-gstin: ``89ACC654654335``

       :form consumer-phone: ``+91 6543525422``

       :form consumer-address: ``Plot no. 958, N-4, Neo Complex, Barh, Wokha, Nagaland, 797111``

       :form consumer-email: ``johnDoe@themusic.store``

       :form consumer-location: ``Wokha``

       :resheader Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryLTR88aZAnBUSE7mv
       :statuscode 302: Redirects to ``/consumer``.



.. py:function:: delete_consumer_view(request, pk)

   Deletes the consumer with primary key ``pk`` on ``POST`` request.

   .. http:post:: /consumer/<str:object_id>/delete

       Deletes the consumer represented by the primary key ``object_id``.

       **Example request**:

       .. sourcecode:: http

           POST /consumer/5/delete HTTP/1.1
           Host: localhost:8000
           Content-Type: application/x-www-form-urlencoded

       :param object_id: Consumer primary key.
       :resheader Content-Type: application/x-www-form-urlencoded
       :statuscode 302: Redirects to ``/consumer``.
       :statuscode 500: Consumer matching query does not exist.



.. py:function:: display_consumers_view(request)

   Retrieves the list of consumers on ``GET`` request.

   .. http:get:: /consumers/

       Gets the list of all consumers.

       **Example request**:

       .. sourcecode:: http

           GET /companies/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

       :form page: The page number of the consumers list.

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: List of consumers received successfully.


.. py:function:: get_consumer(request)

   Returns the ``JSON`` serialized data of the requested consumer on ``GET`` request.

   .. http:get:: /get_consumer/

       Gets the JSON serialized data of the requested consumer.

       **Example request**:

       .. sourcecode:: http

           GET /get_consumer/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: application/json; charset=utf-8

           [
               {
                   "name": "The Music Store",
                   "identifier": "CONS1256",
                   "gstin": "89AAC4633353643",
                   "phone": "+91 8325642358",
                   "address": "Plot no 958, N- 4, Neo Complex, Barh, Wokha, Nagaland, 797111",
                   "email": "JohnDoe@themusic.store",
                   "location": "Wokha"
               }
           ]

       :resheader Content-Type: application/json
       :statuscode 200: List of consumers received successfully.
       :statuscode 400: Bad request version
       :statuscode 500: Consumer matching query does not exist.


.. py:class:: ProductBasicInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for basic product information.

   .. attribute:: name

      Name of the product.

      :type: str

   .. attribute:: item_type

      Type of the product.

      :type: str

   .. attribute:: category

      Product category.

      :type: str

   .. attribute:: description

      Short description of the product.

      :type: str


.. py:class:: ProductDetailedInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for product physical details

   .. attribute:: length

      Length of the product.

      :type: str

   .. attribute:: width

      Width of the product.

      :type: str

   .. attribute:: height

      Height of the product.

      :type: str

   .. attribute:: weight

      Weight of the product.

      :type: str


.. py:class:: ProductPricingForm


   Bases: :py:obj:`django.forms.Form`

   Form for pricing information of the product.

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Default discount percentage on the product.

      :type: float


.. py:class:: ProductPurchaseEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for product purchase entry.

   .. attribute:: ppe_id

      Unique identifier of the product purchase entry.

      :type: int

   .. attribute:: product

      Product associated wit the product purchase entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product to be ordered.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product purchase.

      :type: float


.. py:class:: ProductSalesEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for product sales entry.

   .. attribute:: pse_id

      Unique identifier of the product sales entry.

      :type: int

   .. attribute:: product

      Product associated with the product sales entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product.

      :type: float


.. py:class:: ProductStatusForm


   Bases: :py:obj:`django.forms.Form`

   Form for locating and identifying the product.

   .. attribute:: quantity

      Stock quantity of the product.

      :type: int

   .. attribute:: identifier

      Unique identifier of the product.

      :type: str

   .. attribute:: location

      Physical location of the product.

      :type: str


.. py:class:: ProductStorageInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for storage information.

   .. attribute:: barcode

      Barcode of the product.

      :type: str

   .. attribute:: expiry

      Expiry date of the product.

      :type: DateField


.. py:class:: PurchaseOrderBasicInfo


   Bases: :py:obj:`django.forms.Form`

   Form for basic information of the purchase order.

   .. attribute:: vendor

      Vendor associated with the purcahse order.

      :type: Vendor

   .. attribute:: date

      Date of the purchase order creation.

      :type: DateField

   .. attribute:: po

      Purchase order number.

      :type: int

   .. attribute:: discount

      Percentage of overall discount.

      :type: float

   .. attribute:: tax

      Percentage of tax.

      :type: float

   .. attribute:: paid

      Amount paid to the vendor.

      :type: float

   .. attribute:: balance

      Balance amount to be paid to the vendor.

      :type: float

   .. attribute:: subtotal

      Total of all the product purchase entries associated with the purchase order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the purchase order including  `taxtotal`.

      :type: float


.. py:class:: GRNInfo


   Bases: :py:obj:`django.forms.Form`

   Form for goods receipt note (GRN).

   .. attribute:: vendor

      Vendor associated with the goods receipt note.

      :type: Vendor

   .. attribute:: poRef

      List of identifiers of the purchase orders from which the goods receipt note is derived.

      :type: PurchaseOrder

   .. attribute:: identifier

      Unique identifier of the goods receipt note.

      :type: str

   .. attribute:: date

      Date of GRN creation.

      :type: DateField

   .. attribute:: grnType

      Type of GRN (``auto`` or ``manual``).

      :type: str

   .. attribute:: amendNumber

      Amendment number of the GRN.

      :type: int

   .. attribute:: amendDate

      Amendment date.

      :type: DateField

   .. attribute:: transporter

      Name of the transport/shipping service.

      :type: str

   .. attribute:: vehicleNumber

      Vehicle number using which the products are shipped.

      :type: str

   .. attribute:: gateInwardNumber

      Gate inward number of the vehicle.

      :type: str

   .. attribute:: preparedBy

      Name/identifier of the person who created the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who validated the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who inspected the physical products in the goods receipt note.

      :type: str

   .. attribute:: approvedBy

      Name/identifier of the authority who approved the goods receipt note.

      :type: str


.. py:class:: GRNEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for goods receipt note entry (GRNE).

   .. attribute:: product

      Product associated with the goods receipt note entry.

      :type: Product

   .. attribute:: grne_id

      Unique identifier of the GRNE.

      :type: int

   .. attribute:: ppe_id

      Unique identifier of the product purchase entry associated with the GRNE.

      :type: int

   .. attribute:: quantity

      Ordered quantity of product with reference to product purchase entry.

      :type: int

   .. attribute:: remark

      Remarks of the quality engineer or the GRN creator about status of products received.

      :type: str

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str


.. py:class:: ThumbnailForm


   Bases: :py:obj:`django.forms.Form`

   For for product thumbnail image.

   .. attribute:: image

      Image of the product.

      :type: ImageField


.. py:class:: SalesOrderBasicInfo


   Bases: :py:obj:`django.forms.Form`

   Form for basic information on sales order.

   .. attribute:: consumer

      Consumer associated with the sales order.

      :type: Consumer

   .. attribute:: date

      Date of the sales order creation.

      :type: DateField

   .. attribute:: so

      Sales order number.

      :type: int

   .. attribute:: discount

      Percentage discount associated with the sales order.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable.

      :type: float

   .. attribute:: paid

      Amount received from the consumer.

      :type: float

   .. attribute:: balance

      Amount balance with the consumer.

      :type: float

   .. attribute:: subtotal

      Total of all the product sales entries associated with the sales order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the sales order including  `taxtotal`.

      :type: float


.. py:class:: ShippingAddressForm


   Bases: :py:obj:`django.forms.Form`

   For for shipping address.

   .. attribute:: title

      Title of the firm.

      :type: str

   .. attribute:: name

      Name of the firm.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: city

      City.

      :type: str

   .. attribute:: state

      State.

      :type: str

   .. attribute:: country

      Country.

      :type: str

   .. attribute:: website

      Official website of the firm.

      :type: URLField

   .. attribute:: post

      Postal code of the firm.

      :type: str


.. py:class:: VendorForm


   Bases: :py:obj:`django.forms.Form`

   Form for basic informaion of the vendor.

   .. attribute:: name

      Name of the vendor.

      :type: str

   .. attribute:: identifier

      Unique identifier of the vendor.

      :type: str

   .. attribute:: gstin

      GSTIN number of the vendor.

      :type: str


.. py:class:: ConsumerForm


   Bases: :py:obj:`django.forms.Form`

   Form for consumer.

   .. attribute:: name

      Name of the consumer.

      :type: str

   .. attribute:: identifier

      Unique identifier of the consumer.

      :type: str

   .. attribute:: gstin

      GSTIN number of the consumer.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Address of the consumer.

      :type: str

   .. attribute:: email

      E-mail address of the consumer.

      :type: str

   .. attribute:: location

      City of the consumer.

      :type: str


.. py:class:: CompanyForm


   Bases: :py:obj:`django.forms.Form`

   Form for company.

   .. attribute:: name

      Name of the company.

      :type: str

   .. attribute:: owner

      Name of the owner of the company.

      :type: str

   .. attribute:: gstin

      GSTIN number of the company.

      :type: str

   .. attribute:: phone

      Contact number of the company.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: email

      E-mail address of the contact person.

      :type: str

   .. attribute:: location

      City of the company.

      :type: str


.. py:class:: HistoryForm


   Bases: :py:obj:`django.forms.Form`

   Form for history view.

   .. attribute:: qlen

      Count of the events visible on the history view.

      :type: int


.. py:class:: CommunicationForm


   Bases: :py:obj:`django.forms.Form`

   Form for communication information.

   .. attribute:: language

      Language of communication.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: email

      E-mail of the contact person.

      :type: EmailField

   .. attribute:: fax

      Fax number.

      :type: str


.. py:class:: PurchaseDataForm


   Bases: :py:obj:`django.forms.Form`

   Form for purchase related data.

   .. attribute:: currency

      Currency of purchase.

      :type: str

   .. attribute:: minorder

      Minimum order quantity.

      :type: int

   .. attribute:: contactperson

      Name of the contact person.

      :type: str

   .. attribute:: refcode

      Reference code.

      :type: str

   .. attribute:: transportmode

      Mode of transport of the shipment.

      :type: str


.. py:class:: BankAccountForm


   Bases: :py:obj:`django.forms.Form`

   Form for bank account details.

   .. attribute:: name

      Name of the bank.

      :type: str

   .. attribute:: branch

      Branch number of the bank.

      :type: str

   .. attribute:: region

      City in which the branch is located.

      :type: str

   .. attribute:: route

      Transit number.

      :type: str

   .. attribute:: number

      Bank account number.

      :type: int

   .. attribute:: acctype

      Type of bank account.

      :type: str

   .. attribute:: iban

      IBAN number.

      :type: str

   .. attribute:: code

      Bank code.

      :type: str

   .. attribute:: branchcode

      Branch code.

      :type: str


.. py:class:: Product


   Bases: :py:obj:`django.db.models.Model`

   Model of the product.

   .. attribute:: name

      Name of the product.

      :type: str

   .. attribute:: category

      Product category.

      :type: str

   .. attribute:: item_type

      Type of the product.

      :type: str

   .. attribute:: description

      Short description of the product.

      :type: str

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: quantity

      Stock quantity of the product.

      :type: int

   .. attribute:: identifier

      Unique identifier of the product.

      :type: str

   .. attribute:: location

      Physical location of the product.

      :type: str

   .. attribute:: length

      Length of the product.

      :type: str

   .. attribute:: width

      Width of the product.

      :type: str

   .. attribute:: height

      Height of the product.

      :type: str

   .. attribute:: weight

      Weight of the product.

      :type: str

   .. attribute:: discount

      Default discount percentage on the product.

      :type: float

   .. attribute:: barcode

      Barcode of the product.

      :type: str

   .. attribute:: expiry

      Expiry date of the product.

      :type: DateField

   .. attribute:: image

      Image of the product.

      :type: ImageField


.. py:class:: ProductPurchaseEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the product purchase entry.

   .. attribute:: product

      Product associated wit the product purchase entry.

      :type: ModelChoiceField

   .. attribute:: quantity

      Quantity of the product to be ordered.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product purchase.

      :type: float

   .. attribute:: order

      Referenced purchase order.

      :type: PurchaseOrder

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str

   .. method:: is_complete()

      Returns the completion status (boolean).

   .. method:: pending_quantity()

      Returns the pending quantity against the entry (int).



.. py:class:: GRNEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the goods receipt note entry (GRNE).

   .. attribute:: product

      Primary key of the ``Product`` instance associated with the goods receipt note entry.

      :type: Product

   .. attribute:: quantity

      Ordered quantity of product with reference to product purchase entry.

      :type: int

   .. attribute:: grne

      Primary key of the ``GoodsReceiptNote`` instance.

      :type: int

   .. attribute:: ppe

      Primary key of the ``ProductPurchaseEntry`` instance associated with the GRNE.

      :type: int

   .. attribute:: remark

      Remarks of the quality engineer or the GRN creator about status of products received.

      :type: str

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str


.. py:class:: ProductSalesEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the product sales entry.

   .. attribute:: product

      Primary key of the ``Product`` associated with the product sales entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product.

      :type: float

   .. attribute:: order

      Primary key of the ``SalesOrder`` referenced by the entry.

      :type: SalesOrder


.. py:class:: SalesOrder


   Bases: :py:obj:`django.db.models.Model`

   Model of the sales order.

   .. attribute:: consumer

      Consumer associated with the sales order.

      :type: ModelChoiceField

   .. attribute:: date

      Date of the sales order creation.

      :type: DateField

   .. attribute:: so

      Sales order number.

      :type: int

   .. attribute:: discount

      Percentage discount associated with the sales order.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable.

      :type: float

   .. attribute:: paid

      Amount received from the consumer.

      :type: float

   .. attribute:: balance

      Amount balance with the consumer.

      :type: float

   .. attribute:: subtotal

      Total of all the product sales entries associated with the sales order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the sales order including  `taxtotal`.

      :type: float


.. py:class:: PurchaseOrder


   Bases: :py:obj:`django.db.models.Model`

   Model of the purchase order.

   .. attribute:: vendor

      Vendor associated with the purchase order.

      :type: Vendor

   .. attribute:: date

      Date and time of the purchase order creation.

      :type: DateField

   .. attribute:: po

      Purchase order number.

      :type: int

   .. attribute:: discount

      Percentage discount.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable for the purchase.

      :type: float

   .. attribute:: paid

      Amount paid against the PO.

      :type: float

   .. attribute:: balance

      Amount balance which remains to be paid.

      :type: float

   .. attribute:: subtotal

      Total of all the product purchase entries associated with the purchase order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the purchase order including  `taxtotal`.

      :type: float

   .. method:: is_complete()

      Returns the completion status (boolean).

   .. method:: pending_ppes()

      Returns list of product purchase entries which are not completed.



.. py:class:: GoodsReceiptNote


   Bases: :py:obj:`django.db.models.Model`

   Model of the goods receipt note (GRN).

   .. attribute:: vendor

      Vendor associated with the goods receipt note.

      :type: ModelChoiceField

   .. attribute:: poRef

      List of identifiers of the purchase orders from which the goods receipt note is derived.

      :type: MultipleChoiceField

   .. attribute:: identifier

      Unique identifier of the goods receipt note.

      :type: str

   .. attribute:: date

      Date of GRN creation.

      :type: DateField

   .. attribute:: grnType

      Type of GRN (``auto`` or ``manual``).

      :type: ChoiceField

   .. attribute:: amendNumber

      Amendment number of the GRN.

      :type: int

   .. attribute:: amendDate

      Amendment date.

      :type: DateField

   .. attribute:: transporter

      Name of the transport/shipping service.

      :type: str

   .. attribute:: vehicleNumber

      Vehicle number using which the products are shipped.

      :type: str

   .. attribute:: gateInwardNumber

      Gate inward number of the vehicle.

      :type: str

   .. attribute:: preparedBy

      Name/identifier of the person who created the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who validated the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who inspected the physical products in the goods receipt note.

      :type: str

   .. attribute:: approvedBy

      Name/identifier of the authority who approved the goods receipt note.

      :type: str


.. py:class:: Consumer


   Bases: :py:obj:`django.db.models.Model`

   Model of the consumer.

   .. attribute:: name

      Name of the consumer.

      :type: str

   .. attribute:: identifier

      Unique identifier of the consumer.

      :type: str

   .. attribute:: gstin

      GSTIN number of the consumer.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Address of the consumer.

      :type: str

   .. attribute:: email

      E-mail address of the consumer.

      :type: str

   .. attribute:: location

      City of the consumer.

      :type: str

   :returns: [description]
   :rtype: [type]


.. py:class:: Vendor


   Bases: :py:obj:`django.db.models.Model`

   Model of the vendor.

   .. attribute:: name

      Name of the vendor.

      :type: str

   .. attribute:: identifier

      Unique identifier of the vendor.

      :type: str

   .. attribute:: gstin

      GSTIN number of the vendor.

      :type: str

   .. attribute:: address

      Primary key of the ``ShippingAddress`` instance associated with the vendor.

      :type: ShippingAddress

   .. attribute:: communication

      Primary key of the ``Communication`` instance associated with the vendor.

      :type: Communication

   .. attribute:: backaccount

      Primary key of the ``BankAccount`` instance associated with the vendor.

      :type: BankAccount

   .. attribute:: purchasedata

      Primary key of the ``PurchaseData`` instance associated with the vendor.

      :type: PurchaseData

   :returns: String representation of the vendor name.
   :rtype: str


.. py:class:: Company


   Bases: :py:obj:`django.db.models.Model`

   Model of the company.

   .. attribute:: name

      Name of the company.

      :type: str

   .. attribute:: owner

      Owner of the company.

      :type: str

   .. attribute:: gstin

      GSTIN number of the company.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: email

      E-mail address of the contact person.

      :type: str

   .. attribute:: location

      City of the company.

      :type: str

   .. attribute:: image

      Photo/logo of the company.

      :type: ImageField

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress`` instance associated with the company.

      :type: ShippingAddress

   :returns: String representation of the company name.
   :rtype: str


.. py:class:: PurchaseInvoice


   Bases: :py:obj:`django.db.models.Model`

   Model for the purchase invoice.

   .. attribute:: company

      Primary key of the ``Company``.

      :type: Company

   .. attribute:: po

      Primary key of the ``PurchaseOrder``.

      :type: PurchaseOrder

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress``.

      :type: ShippingAddress

   .. attribute:: communication

      Primary key of the ``Communication``.

      :type: Communication


.. py:class:: SalesInvoice


   Bases: :py:obj:`django.db.models.Model`

   Model for the sales order invoice.

   .. attribute:: company

      Primary key of the ``Company``.

      :type: Company

   .. attribute:: so

      Primary key of the ``SalesOrder``.

      :type: SalesOrder

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress``.

      :type: ShippingAddress


.. py:class:: FilterState


   Bases: :py:obj:`django.db.models.Model`

   Model of the filter state.

   .. attribute:: name

      Name of the filter state.

      :type: str


.. py:class:: FilterColumn


   Bases: :py:obj:`django.db.models.Model`

   Model of the column state.

   .. attribute:: name

      Name of the column.

      :type: str

   .. attribute:: label

      Label of the column.

      :type: str

   .. attribute:: visible

      Visibility flag.

      :type: bool

   .. attribute:: position

      Index of the column.

      :type: int

   .. attribute:: state

      Primary key of the ``FilterState`` instance being referenced by the column instance.

      :type: FilterState


.. py:class:: Object


   Bases: :py:obj:`django.db.models.Model`

   Model for a generic object.

   .. attribute:: identifier

      Unique identifier of the object.

      :type: str

   .. attribute:: name

      Name of the object.

      :type: str

   .. attribute:: model

      Model associated with the object.

      :type: str


.. py:class:: EventCard


   Bases: :py:obj:`django.db.models.Model`

   Model for event card to be displayed in the history view.

   .. attribute:: obj

      Object associated with the event.

      :type: OneToOneField

   .. attribute:: objId

      Unique identifier of the object.

      :type: str

   .. attribute:: objname

      Name of the object.

      :type: str

   .. attribute:: objmodel

      Model of the object.

      :type: str

   .. attribute:: date

      Timestamp of the event.

      :type: DateField

   .. attribute:: operation

      Type of event.

      :type: str


.. py:class:: EventType


   Bases: :py:obj:`django.db.models.Model`

   Model for event type.

   .. attribute:: name

      Name of the event being triggered.

      :type: str

   .. attribute:: label

      Label associated with the event.

      :type: str

   :returns: Returns the string representation of the label when the event type is queried.
   :rtype: Label


.. py:class:: ObjectModel


   Bases: :py:obj:`django.db.models.Model`

   Model associated with an object.

   .. attribute:: name

      Name of the object.

      :type: str

   .. attribute:: label

      Label string of the object.

      :type: str

   .. attribute:: modName

      Name of the model associated with the object.

      :type: str

   :returns: Returns string representation of the label when object model is queried.
   :rtype: Label


.. py:class:: HistoryFilterState


   Bases: :py:obj:`django.db.models.Model`

   Model of filter state of the history.

   .. attribute:: params

      Paramameters of the configured filters.

      :type: str


.. py:class:: ShippingAddress


   Bases: :py:obj:`django.db.models.Model`

   Model of the shipping address.

   .. attribute:: title

      Title of the firm.

      :type: str

   .. attribute:: name

      Name of the firm.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: city

      City.

      :type: str

   .. attribute:: state

      State.

      :type: str

   .. attribute:: country

      Country.

      :type: str

   .. attribute:: website

      Official website of the firm.

      :type: URLField

   .. attribute:: post

      Postal code of the firm.

      :type: str


.. py:class:: PurchaseData


   Bases: :py:obj:`django.db.models.Model`

   Model of the purchase data.

   .. attribute:: currency

      Currency of purchase.

      :type: str

   .. attribute:: minorder

      Minimum order quantity.

      :type: int

   .. attribute:: contactperson

      Name of the contact person.

      :type: str

   .. attribute:: refcode

      Reference code.

      :type: str

   .. attribute:: transportmode

      Mode of transport of the shipment.

      :type: str


.. py:class:: Communication


   Bases: :py:obj:`django.db.models.Model`

   Model of the communication information.

   .. attribute:: language

      Language of communication.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: email

      E-mail of the contact person.

      :type: EmailField

   .. attribute:: fax

      Fax number.

      :type: str


.. py:class:: BankAccount


   Bases: :py:obj:`django.db.models.Model`

   Model of the bank account details.

   .. attribute:: name

      Name of the bank.

      :type: str

   .. attribute:: branch

      Branch number of the bank.

      :type: str

   .. attribute:: region

      City in which the branch is located.

      :type: str

   .. attribute:: route

      Transit number.

      :type: str

   .. attribute:: number

      Bank account number.

      :type: int

   .. attribute:: acctype

      Type of bank account.

      :type: str

   .. attribute:: iban

      IBAN number.

      :type: str

   .. attribute:: code

      Bank code.

      :type: str

   .. attribute:: branchcode

      Branch code.

      :type: str


.. py:function:: get_columns(state)

   Gets the columns of the display table.

   This function takes a filter state and returns an array of column names that are
   ordered depending on the position attribute of the columns. This order is important
   as the queryset will be rendered in the display table according to the column order
   in this returned array.

   :param state: Filter state of the columns.
   :type state: FilterState

   :returns: A list that dictates the order of the columns.
   :rtype: List


.. py:function:: sort_ascending_descending(request, model)

   Sorts and saves the state of the column.

   This function takes a request, finds which column needs to be sorted in ascending/descending
   order, and returns the sorted queryset.

   :param request: ``GET`` request received for retreiving the list of model instances.
   :type request: HttpRequest
   :param model: Model of the objects being retrieved.
   :type model: Model

   :returns: List of sorted object instances.
   :rtype: QuerySet


.. py:function:: change_column_position(request, state)

   Modifies the column states depending on the request.

   This function:
       - Takes a filter state
       - Extracts the column names into an order array
       - Modifies the column order in the array depending on user input direction (left/right)
       - Saves this modified state of columns into the database
       - Returns the modified column names array

   :param request: ``GET`` request for retrieving the state of the columns.
   :type request: HttpRequest
   :param state: Filter state of the columns.
   :type state: FilterState

   :returns: List of sorted columns.
   :rtype: List


.. py:function:: paginate(queryset, filter, page_number)

   Paginates the list of objects.

   This function takes the entire queryset and filters out only objects belonging to the
   request page

   :param queryset: ``QuerySet`` of the objects retrieved from the database.
   :type queryset: QuerySet
   :param filter: Filter state of the columns.
   :type filter: FilterState
   :param page_number: Page number requested.
   :type page_number: int


.. py:class:: SalesOrderFilter


   Bases: :py:obj:`django_filters.FilterSet`

   .. py:class:: Meta




.. py:class:: ProductSerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``Product`` class instance.

   The ``ProductSerializer.data`` attribute gives the ``JSON`` serialized data of the ``Product`` instance::

       {
           "pk": 637,
           "name": "Piano",
           "category": "Ultricies PC",
           "quantity": 23921,
           "identifier": "PROD9",
           "location": "Musselburgh",
           "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
           "prod_id": 637
       }


   .. py:class:: Meta




.. py:class:: PSEntrySerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``ProductSalesEntry`` class instance.

   The ``PSEntrySerializer.data`` attribute gives the ``JSON`` serialized data of the ``ProductSalesEntry`` instance::

       {
           "pse_id": 64,
           "product": {
               "pk": 637,
               "name": "Piano",
               "category": "Ultricies PC",
               "quantity": 23921,
               "identifier": "PROD9",
               "location": "Musselburgh",
               "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
               "prod_id": 637
           },
           "quantity": 50,
           "price": 9900.0,
           "discount": 10.0,
           "order": 29
       }


   .. py:class:: Meta




.. py:class:: SalesInvoiceSerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``SalesInvoice`` class instance.

   The ``SalesInvoiceSerializer.data`` attribute gives the ``JSON`` serialized data of the ``SalesInvoice`` instance::

       {
           "company": {
               "name": "Fringillami",
               "owner": "Ivor Barnett",
               "gstin": "89AAC056465468",
               "phone": "332 220-7026",
               "address": "Ap #849-6241 Euismod Av., 677598, Carinthia, Belgium",
               "email": "est.tempor@fringillami.org",
               "location": "Belgium",
               "image": "/media/images/hyperlink-green_x91WW5n.png"
           },
           "so": {
               "consumer": {
                   "name": "The Music Store",
                   "identifier": "CONS1256",
                   "gstin": "89AAC4633353643",
                   "phone": "+91 8325642358",
                   "address": "Plot no 958, N- 4, Neo Complex, Barh, Wokha, Nagaland, 797111",
                   "email": "JohnDoe@themusic.store",
                   "location": "Wokha"
               },
               "date": "2021-09-25T00:00:00Z",
               "so": 89,
               "subtotal": 744900.0,
               "taxtotal": 59592.0,
               "ordertotal": 804492.0,
               "pses": [
                   {
                       "pse_id": 64,
                       "product": {
                           "pk": 637,
                           "name": "piano",
                           "category": "Ultricies PC",
                           "quantity": 23921,
                           "identifier": "PROD9",
                           "location": "Musselburgh",
                           "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
                           "prod_id": 637
                       },
                       "quantity": 50,
                       "price": 9900.0,
                       "discount": 10.0,
                       "order": 29
                   },
                   {
                       "pse_id": 65,
                       "product": {
                           "pk": 649,
                           "name": "Sabar",
                           "category": "Amet Consulting",
                           "quantity": 3903,
                           "identifier": "PROD21",
                           "location": "Serang",
                           "description": "High Sierra Sabar, Travel bag, Blue, Grey, Zipper, 36.5 L, 51.5 cm, 26 cm ",
                           "prod_id": 649
                       },
                       "quantity": 25,
                       "price": 4800.0,
                       "discount": 8.0,
                       "order": 29
                   },
                   {
                       "pse_id": 66,
                       "product": {
                           "pk": 654,
                           "name": "Parai",
                           "category": "Aliquet Lobortis Ltd",
                           "quantity": 8534,
                           "identifier": "PROD26",
                           "location": "Burhaniye",
                           "description": "Kannan musical instruments Parai 15" inch (Baffallow skin) Daf Instrument",
                           "prod_id": 654
                       },
                       "quantity": 35,
                       "price": 6000.0,
                       "discount": 10.0,
                       "order": 29
                   }
               ]
           },
           "shippingaddress": {
               "name": "Harding Gross",
               "address": "8798 At, St., 7639",
               "city": "Rome",
               "phone": "936 651-4847",
               "state": "Lazio",
               "country": "Italy",
               "post": "300326"
           }
       }


   .. py:class:: Meta




.. py:function:: create_sales_order_view(request)

   Creates a sales order (SO) on ``POST`` request, and returns a SO creation form on ``GET`` request.

   .. http:get:: /sales_order

       Gets the sales order creation form.

       **Example request**:

       .. sourcecode:: http

           GET /sales_order/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9


       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: Sales order creation form received successfully.

   .. http:post:: /sales_order

       Creates a sales order.

       **Example request**:

       .. sourcecode:: http

           POST /sales_order/ HTTP/1.1
           Host: localhost:8000
           Content-Type: multipart/form-data;

       :form so-consumer: ``5``

       :form consumer-name: ``The Music Store``

       :form consumer-identifier: ``CONS1256``

       :form consumer-gstin: ``89ACC654654335``

       :form consumer-phone: ``+91 8325642358``

       :form consumer-address: ``Plot no 958, N- 4, Neo Complex, Barh, Wokha, Nagaland, 797111``

       :form consumer-email: ``JohnDoe@themusic.store``

       :form consumer-location: ``Wokha``

       :form so-so: ``465``

       :form so-date: ``2021-09-30``

       :form so-tax: ``12``

       :form so-discount: ``8``

       :form so-paid: ``4500``

       :form so-balance: ``1200``

       :form ship-title: ``FingDocks``

       :form ship-name: ``Harding Gross``

       :form ship-phone: ``936 651-4847``

       :form ship-address: ``8798 At, St., 7639``

       :form ship-city: ``Rome``

       :form ship-state: ``Lazio``

       :form ship-country: ``Italy``

       :form ship-website: ``http://fringdocs.com``

       :form ship-post: ``300326``

       :form so-subtotal: ``94600.00``

       :form so-taxtotal: ``7568.00``

       :form so-ordertotal: ``102168.00``

       :form form-TOTAL_FORMS: ``2``

       :form form-INITIAL_FORMS: ``0``

       :form form-MIN_NUM_FORMS: ````

       :form form-MAX_NUM_FORMS: ````

       :form form-0-product: ``645``

       :form form-0-quantity: ``450``

       :form form-0-price: ``120``

       :form form-0-discount: ``10``

       :form form-0-DELETE: ````

       :form form-0-pse_id: ``-1``

       :form form-1-product: ``654``

       :form form-1-quantity: ``500``

       :form form-1-price: ``100``

       :form form-1-discount: ``8``

       :form form-1-DELETE: ````

       :form form-1-pse_id: ``-1``

       :resheader Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryLTR88aZAnBUSE7mv
       :statuscode 302: Redirects to ``/sales_order``.



.. py:function:: update_sales_order_view(request)

   Updates a sales order on ``POST`` request and returns the sales order update form for ``GET`` request.

   .. http:get:: /sales_order/update

       Gets the sales order update form whose primary key matches the query parameter ``pk``.

       **Example request**:

       .. sourcecode:: http

           GET /sales_order/update HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

       :query pk: The primary key of the sales order.

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: Sales order update form received successfully.

   .. http:post:: /sales_order/update

       Updates the sales order.

       **Example request**:

       .. sourcecode:: http

           POST /sales_order/update HTTP/1.1
           Host: localhost:8000
           Content-Type: multipart/form-data;

       :form pk: ``30``

       :form so-consumer: ``7``

       :form consumer-name: ``The Music Store``

       :form consumer-identifier: ``CONS1256``

       :form consumer-gstin: ``89AAC4633353643``

       :form consumer-phone: ``+91 8325642358``

       :form consumer-address: ``Plot no 958, N- 4, Neo Complex, Barh, Wokha, Nagaland, 797111``

       :form consumer-email: ``JohnDoe@themusic.store``

       :form consumer-location: ``Wokha``

       :form so-so: ``465``

       :form so-date: ``2021-09-30``

       :form so-tax: ``10``

       :form so-discount: ``8.0``

       :form so-paid: ``4500.0``

       :form so-balance: ``1200.0``

       :form ship-title: ``FingDocks``

       :form ship-name: ``Harding Gross``

       :form ship-phone: ``936 651-4847``

       :form ship-address: ``8798 At, St., 7639``

       :form ship-city: ``Rome``

       :form ship-state: ``Lazio``

       :form ship-country: ``Italy``

       :form ship-website: ``http://fringdocs.com``

       :form ship-post: ``300326``

       :form so-subtotal: ``94600.0``

       :form so-taxtotal: ``7568.0``

       :form so-ordertotal: ``102168.0``

       :form form-TOTAL_FORMS: ``2``

       :form form-INITIAL_FORMS: ``2``

       :form form-MIN_NUM_FORMS: ````

       :form form-MAX_NUM_FORMS: ````

       :form form-0-product: ``645``

       :form form-0-quantity: ``450``

       :form form-0-price: ``120``

       :form form-0-discount: ``10``

       :form form-0-DELETE: ````

       :form form-0-pse_id: ``67``

       :form form-1-product: ``654``

       :form form-1-quantity: ``500``

       :form form-1-price: ``100``

       :form form-1-discount: ``8``

       :form form-1-DELETE: ````

       :form form-1-pse_id: ``68``

       :resheader Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryLTR88aZAnBUSE7mv
       :statuscode 302: Redirects to ``/sales_order``.



.. py:function:: delete_sales_order_view(request, pk)

   Deletes the sales order with primary key ``object_id`` on ``POST`` request.

   .. http:post:: /sales_order/<str:object_id>/delete

       Deletes the sales order represented by the primary key ``object_id``.

       **Example request**:

       .. sourcecode:: http

           POST /sales_order/30/delete HTTP/1.1
           Host: localhost:8000
           Content-Type: application/x-www-form-urlencoded

       :param object_id: Sales order primary key.
       :resheader Content-Type: application/x-www-form-urlencoded
       :statuscode 302: Redirects to ``/sales_order``.
       :statuscode 500: Sales order matching query does not exist.



.. py:function:: display_sales_orders_view(request)

   Retrieves the list of sales orders on ``GET`` request.

   .. http:get:: /sales_orders/

       Gets the list of all sales orders.

       **Example request**:

       .. sourcecode:: http

           GET /sales_orders/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

       :form page: The page number of the sales order list.

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: List of sales orders received successfully.


.. py:function:: print_sales_order_view(request, pk)

   Opens the sales order with primary key ``so_id`` for printing on ``GET`` request.

   .. http:post:: /purchase_order/<str:so_id>/print

       Opens the sales order represented by the primary key ``so_id``.

       **Example request**:

       .. sourcecode:: http

           POST /sales_order/182/print HTTP/1.1
           Host: localhost:8000
           Content-Type: application/x-www-form-urlencoded

       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: application/json; charset=utf-8

           [
               {
                   "company": {
                       "name": "Fringillami",
                       "owner": "Ivor Barnett",
                       "gstin": "89AAC056465468",
                       "phone": "332 220-7026",
                       "address": "Ap #849-6241 Euismod Av., 677598, Carinthia, Belgium",
                       "email": "est.tempor@fringillami.org",
                       "location": "Belgium",
                       "image": "/media/images/hyperlink-green_x91WW5n.png"
                   },
                   "so": {
                       "consumer": {
                           "name": "The Music Store",
                           "identifier": "CONS1256",
                           "gstin": "89AAC4633353643",
                           "phone": "+91 8325642358",
                           "address": "Plot no 958, N- 4, Neo Complex, Barh, Wokha, Nagaland, 797111",
                           "email": "JohnDoe@themusic.store",
                           "location": "Wokha"
                       },
                       "date": "2021-09-25T00:00:00Z",
                       "so": 89,
                       "subtotal": 744900.0,
                       "taxtotal": 59592.0,
                       "ordertotal": 804492.0,
                       "pses": [
                           {
                               "pse_id": 64,
                               "product": {
                                   "pk": 637,
                                   "name": "piano",
                                   "category": "Ultricies PC",
                                   "quantity": 23921,
                                   "identifier": "PROD9",
                                   "location": "Musselburgh",
                                   "description": "88-key, Tri-sensor Scaled Hammer Action Keyboard II, Simulated ebony and ivory keys ",
                                   "prod_id": 637
                               },
                               "quantity": 50,
                               "price": 9900.0,
                               "discount": 10.0,
                               "order": 29
                           },
                           {
                               "pse_id": 65,
                               "product": {
                                   "pk": 649,
                                   "name": "Sabar",
                                   "category": "Amet Consulting",
                                   "quantity": 3903,
                                   "identifier": "PROD21",
                                   "location": "Serang",
                                   "description": "High Sierra Sabar, Travel bag, Blue, Grey, Zipper, 36.5 L, 51.5 cm, 26 cm ",
                                   "prod_id": 649
                               },
                               "quantity": 25,
                               "price": 4800.0,
                               "discount": 8.0,
                               "order": 29
                           },
                           {
                               "pse_id": 66,
                               "product": {
                                   "pk": 654,
                                   "name": "Parai",
                                   "category": "Aliquet Lobortis Ltd",
                                   "quantity": 8534,
                                   "identifier": "PROD26",
                                   "location": "Burhaniye",
                                   "description": "Kannan musical instruments Parai 15" inch (Baffallow skin) Daf Instrument",
                                   "prod_id": 654
                               },
                               "quantity": 35,
                               "price": 6000.0,
                               "discount": 10.0,
                               "order": 29
                           }
                       ]
                   },
                   "shippingaddress": {
                       "name": "Harding Gross",
                       "address": "8798 At, St., 7639",
                       "city": "Rome",
                       "phone": "936 651-4847",
                       "state": "Lazio",
                       "country": "Italy",
                       "post": "300326"
                   }
               }
           ]

       :param so_id: Sales order primary key.
       :resheader Content-Type: application/json
       :statuscode 200: Sales order print request successful.
       :statuscode 500: Sales order matching query does not exist.



.. py:class:: ProductBasicInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for basic product information.

   .. attribute:: name

      Name of the product.

      :type: str

   .. attribute:: item_type

      Type of the product.

      :type: str

   .. attribute:: category

      Product category.

      :type: str

   .. attribute:: description

      Short description of the product.

      :type: str


.. py:class:: ProductDetailedInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for product physical details

   .. attribute:: length

      Length of the product.

      :type: str

   .. attribute:: width

      Width of the product.

      :type: str

   .. attribute:: height

      Height of the product.

      :type: str

   .. attribute:: weight

      Weight of the product.

      :type: str


.. py:class:: ProductPricingForm


   Bases: :py:obj:`django.forms.Form`

   Form for pricing information of the product.

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Default discount percentage on the product.

      :type: float


.. py:class:: ProductPurchaseEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for product purchase entry.

   .. attribute:: ppe_id

      Unique identifier of the product purchase entry.

      :type: int

   .. attribute:: product

      Product associated wit the product purchase entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product to be ordered.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product purchase.

      :type: float


.. py:class:: ProductSalesEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for product sales entry.

   .. attribute:: pse_id

      Unique identifier of the product sales entry.

      :type: int

   .. attribute:: product

      Product associated with the product sales entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product.

      :type: float


.. py:class:: ProductStatusForm


   Bases: :py:obj:`django.forms.Form`

   Form for locating and identifying the product.

   .. attribute:: quantity

      Stock quantity of the product.

      :type: int

   .. attribute:: identifier

      Unique identifier of the product.

      :type: str

   .. attribute:: location

      Physical location of the product.

      :type: str


.. py:class:: ProductStorageInfoForm


   Bases: :py:obj:`django.forms.Form`

   Form for storage information.

   .. attribute:: barcode

      Barcode of the product.

      :type: str

   .. attribute:: expiry

      Expiry date of the product.

      :type: DateField


.. py:class:: PurchaseOrderBasicInfo


   Bases: :py:obj:`django.forms.Form`

   Form for basic information of the purchase order.

   .. attribute:: vendor

      Vendor associated with the purcahse order.

      :type: Vendor

   .. attribute:: date

      Date of the purchase order creation.

      :type: DateField

   .. attribute:: po

      Purchase order number.

      :type: int

   .. attribute:: discount

      Percentage of overall discount.

      :type: float

   .. attribute:: tax

      Percentage of tax.

      :type: float

   .. attribute:: paid

      Amount paid to the vendor.

      :type: float

   .. attribute:: balance

      Balance amount to be paid to the vendor.

      :type: float

   .. attribute:: subtotal

      Total of all the product purchase entries associated with the purchase order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the purchase order including  `taxtotal`.

      :type: float


.. py:class:: GRNInfo


   Bases: :py:obj:`django.forms.Form`

   Form for goods receipt note (GRN).

   .. attribute:: vendor

      Vendor associated with the goods receipt note.

      :type: Vendor

   .. attribute:: poRef

      List of identifiers of the purchase orders from which the goods receipt note is derived.

      :type: PurchaseOrder

   .. attribute:: identifier

      Unique identifier of the goods receipt note.

      :type: str

   .. attribute:: date

      Date of GRN creation.

      :type: DateField

   .. attribute:: grnType

      Type of GRN (``auto`` or ``manual``).

      :type: str

   .. attribute:: amendNumber

      Amendment number of the GRN.

      :type: int

   .. attribute:: amendDate

      Amendment date.

      :type: DateField

   .. attribute:: transporter

      Name of the transport/shipping service.

      :type: str

   .. attribute:: vehicleNumber

      Vehicle number using which the products are shipped.

      :type: str

   .. attribute:: gateInwardNumber

      Gate inward number of the vehicle.

      :type: str

   .. attribute:: preparedBy

      Name/identifier of the person who created the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who validated the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who inspected the physical products in the goods receipt note.

      :type: str

   .. attribute:: approvedBy

      Name/identifier of the authority who approved the goods receipt note.

      :type: str


.. py:class:: GRNEntryForm


   Bases: :py:obj:`django.forms.Form`

   Form for goods receipt note entry (GRNE).

   .. attribute:: product

      Product associated with the goods receipt note entry.

      :type: Product

   .. attribute:: grne_id

      Unique identifier of the GRNE.

      :type: int

   .. attribute:: ppe_id

      Unique identifier of the product purchase entry associated with the GRNE.

      :type: int

   .. attribute:: quantity

      Ordered quantity of product with reference to product purchase entry.

      :type: int

   .. attribute:: remark

      Remarks of the quality engineer or the GRN creator about status of products received.

      :type: str

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str


.. py:class:: ThumbnailForm


   Bases: :py:obj:`django.forms.Form`

   For for product thumbnail image.

   .. attribute:: image

      Image of the product.

      :type: ImageField


.. py:class:: SalesOrderBasicInfo


   Bases: :py:obj:`django.forms.Form`

   Form for basic information on sales order.

   .. attribute:: consumer

      Consumer associated with the sales order.

      :type: Consumer

   .. attribute:: date

      Date of the sales order creation.

      :type: DateField

   .. attribute:: so

      Sales order number.

      :type: int

   .. attribute:: discount

      Percentage discount associated with the sales order.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable.

      :type: float

   .. attribute:: paid

      Amount received from the consumer.

      :type: float

   .. attribute:: balance

      Amount balance with the consumer.

      :type: float

   .. attribute:: subtotal

      Total of all the product sales entries associated with the sales order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the sales order including  `taxtotal`.

      :type: float


.. py:class:: ShippingAddressForm


   Bases: :py:obj:`django.forms.Form`

   For for shipping address.

   .. attribute:: title

      Title of the firm.

      :type: str

   .. attribute:: name

      Name of the firm.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: city

      City.

      :type: str

   .. attribute:: state

      State.

      :type: str

   .. attribute:: country

      Country.

      :type: str

   .. attribute:: website

      Official website of the firm.

      :type: URLField

   .. attribute:: post

      Postal code of the firm.

      :type: str


.. py:class:: VendorForm


   Bases: :py:obj:`django.forms.Form`

   Form for basic informaion of the vendor.

   .. attribute:: name

      Name of the vendor.

      :type: str

   .. attribute:: identifier

      Unique identifier of the vendor.

      :type: str

   .. attribute:: gstin

      GSTIN number of the vendor.

      :type: str


.. py:class:: ConsumerForm


   Bases: :py:obj:`django.forms.Form`

   Form for consumer.

   .. attribute:: name

      Name of the consumer.

      :type: str

   .. attribute:: identifier

      Unique identifier of the consumer.

      :type: str

   .. attribute:: gstin

      GSTIN number of the consumer.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Address of the consumer.

      :type: str

   .. attribute:: email

      E-mail address of the consumer.

      :type: str

   .. attribute:: location

      City of the consumer.

      :type: str


.. py:class:: CompanyForm


   Bases: :py:obj:`django.forms.Form`

   Form for company.

   .. attribute:: name

      Name of the company.

      :type: str

   .. attribute:: owner

      Name of the owner of the company.

      :type: str

   .. attribute:: gstin

      GSTIN number of the company.

      :type: str

   .. attribute:: phone

      Contact number of the company.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: email

      E-mail address of the contact person.

      :type: str

   .. attribute:: location

      City of the company.

      :type: str


.. py:class:: HistoryForm


   Bases: :py:obj:`django.forms.Form`

   Form for history view.

   .. attribute:: qlen

      Count of the events visible on the history view.

      :type: int


.. py:class:: CommunicationForm


   Bases: :py:obj:`django.forms.Form`

   Form for communication information.

   .. attribute:: language

      Language of communication.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: email

      E-mail of the contact person.

      :type: EmailField

   .. attribute:: fax

      Fax number.

      :type: str


.. py:class:: PurchaseDataForm


   Bases: :py:obj:`django.forms.Form`

   Form for purchase related data.

   .. attribute:: currency

      Currency of purchase.

      :type: str

   .. attribute:: minorder

      Minimum order quantity.

      :type: int

   .. attribute:: contactperson

      Name of the contact person.

      :type: str

   .. attribute:: refcode

      Reference code.

      :type: str

   .. attribute:: transportmode

      Mode of transport of the shipment.

      :type: str


.. py:class:: BankAccountForm


   Bases: :py:obj:`django.forms.Form`

   Form for bank account details.

   .. attribute:: name

      Name of the bank.

      :type: str

   .. attribute:: branch

      Branch number of the bank.

      :type: str

   .. attribute:: region

      City in which the branch is located.

      :type: str

   .. attribute:: route

      Transit number.

      :type: str

   .. attribute:: number

      Bank account number.

      :type: int

   .. attribute:: acctype

      Type of bank account.

      :type: str

   .. attribute:: iban

      IBAN number.

      :type: str

   .. attribute:: code

      Bank code.

      :type: str

   .. attribute:: branchcode

      Branch code.

      :type: str


.. py:class:: Product


   Bases: :py:obj:`django.db.models.Model`

   Model of the product.

   .. attribute:: name

      Name of the product.

      :type: str

   .. attribute:: category

      Product category.

      :type: str

   .. attribute:: item_type

      Type of the product.

      :type: str

   .. attribute:: description

      Short description of the product.

      :type: str

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: quantity

      Stock quantity of the product.

      :type: int

   .. attribute:: identifier

      Unique identifier of the product.

      :type: str

   .. attribute:: location

      Physical location of the product.

      :type: str

   .. attribute:: length

      Length of the product.

      :type: str

   .. attribute:: width

      Width of the product.

      :type: str

   .. attribute:: height

      Height of the product.

      :type: str

   .. attribute:: weight

      Weight of the product.

      :type: str

   .. attribute:: discount

      Default discount percentage on the product.

      :type: float

   .. attribute:: barcode

      Barcode of the product.

      :type: str

   .. attribute:: expiry

      Expiry date of the product.

      :type: DateField

   .. attribute:: image

      Image of the product.

      :type: ImageField


.. py:class:: ProductPurchaseEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the product purchase entry.

   .. attribute:: product

      Product associated wit the product purchase entry.

      :type: ModelChoiceField

   .. attribute:: quantity

      Quantity of the product to be ordered.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product purchase.

      :type: float

   .. attribute:: order

      Referenced purchase order.

      :type: PurchaseOrder

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str

   .. method:: is_complete()

      Returns the completion status (boolean).

   .. method:: pending_quantity()

      Returns the pending quantity against the entry (int).



.. py:class:: GRNEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the goods receipt note entry (GRNE).

   .. attribute:: product

      Primary key of the ``Product`` instance associated with the goods receipt note entry.

      :type: Product

   .. attribute:: quantity

      Ordered quantity of product with reference to product purchase entry.

      :type: int

   .. attribute:: grne

      Primary key of the ``GoodsReceiptNote`` instance.

      :type: int

   .. attribute:: ppe

      Primary key of the ``ProductPurchaseEntry`` instance associated with the GRNE.

      :type: int

   .. attribute:: remark

      Remarks of the quality engineer or the GRN creator about status of products received.

      :type: str

   .. attribute:: receivedQty

      Quantity of product received against the ordered quantity.

      :type: str

   .. attribute:: acceptedQty

      Quantity of product accepted as OK.

      :type: str

   .. attribute:: rejectedQty

      Quantity of product rejected (not OK, on HOLD, extra delivery, etc.)

      :type: str


.. py:class:: ProductSalesEntry


   Bases: :py:obj:`django.db.models.Model`

   Model of the product sales entry.

   .. attribute:: product

      Primary key of the ``Product`` associated with the product sales entry.

      :type: Product

   .. attribute:: quantity

      Quantity of the product.

      :type: int

   .. attribute:: price

      Price of the product.

      :type: float

   .. attribute:: discount

      Percentage discount on the product.

      :type: float

   .. attribute:: order

      Primary key of the ``SalesOrder`` referenced by the entry.

      :type: SalesOrder


.. py:class:: SalesOrder


   Bases: :py:obj:`django.db.models.Model`

   Model of the sales order.

   .. attribute:: consumer

      Consumer associated with the sales order.

      :type: ModelChoiceField

   .. attribute:: date

      Date of the sales order creation.

      :type: DateField

   .. attribute:: so

      Sales order number.

      :type: int

   .. attribute:: discount

      Percentage discount associated with the sales order.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable.

      :type: float

   .. attribute:: paid

      Amount received from the consumer.

      :type: float

   .. attribute:: balance

      Amount balance with the consumer.

      :type: float

   .. attribute:: subtotal

      Total of all the product sales entries associated with the sales order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the sales order including  `taxtotal`.

      :type: float


.. py:class:: PurchaseOrder


   Bases: :py:obj:`django.db.models.Model`

   Model of the purchase order.

   .. attribute:: vendor

      Vendor associated with the purchase order.

      :type: Vendor

   .. attribute:: date

      Date and time of the purchase order creation.

      :type: DateField

   .. attribute:: po

      Purchase order number.

      :type: int

   .. attribute:: discount

      Percentage discount.

      :type: float

   .. attribute:: tax

      Percentage of tax applicable for the purchase.

      :type: float

   .. attribute:: paid

      Amount paid against the PO.

      :type: float

   .. attribute:: balance

      Amount balance which remains to be paid.

      :type: float

   .. attribute:: subtotal

      Total of all the product purchase entries associated with the purchase order.

      :type: float

   .. attribute:: taxtotal

      Total tax applicable on the `subtotal`.

      :type: float

   .. attribute:: ordertotal

      Total price of the purchase order including  `taxtotal`.

      :type: float

   .. method:: is_complete()

      Returns the completion status (boolean).

   .. method:: pending_ppes()

      Returns list of product purchase entries which are not completed.



.. py:class:: GoodsReceiptNote


   Bases: :py:obj:`django.db.models.Model`

   Model of the goods receipt note (GRN).

   .. attribute:: vendor

      Vendor associated with the goods receipt note.

      :type: ModelChoiceField

   .. attribute:: poRef

      List of identifiers of the purchase orders from which the goods receipt note is derived.

      :type: MultipleChoiceField

   .. attribute:: identifier

      Unique identifier of the goods receipt note.

      :type: str

   .. attribute:: date

      Date of GRN creation.

      :type: DateField

   .. attribute:: grnType

      Type of GRN (``auto`` or ``manual``).

      :type: ChoiceField

   .. attribute:: amendNumber

      Amendment number of the GRN.

      :type: int

   .. attribute:: amendDate

      Amendment date.

      :type: DateField

   .. attribute:: transporter

      Name of the transport/shipping service.

      :type: str

   .. attribute:: vehicleNumber

      Vehicle number using which the products are shipped.

      :type: str

   .. attribute:: gateInwardNumber

      Gate inward number of the vehicle.

      :type: str

   .. attribute:: preparedBy

      Name/identifier of the person who created the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who validated the goods receipt note.

      :type: str

   .. attribute:: checkedBy

      Name/identifier of the person who inspected the physical products in the goods receipt note.

      :type: str

   .. attribute:: approvedBy

      Name/identifier of the authority who approved the goods receipt note.

      :type: str


.. py:class:: Consumer


   Bases: :py:obj:`django.db.models.Model`

   Model of the consumer.

   .. attribute:: name

      Name of the consumer.

      :type: str

   .. attribute:: identifier

      Unique identifier of the consumer.

      :type: str

   .. attribute:: gstin

      GSTIN number of the consumer.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Address of the consumer.

      :type: str

   .. attribute:: email

      E-mail address of the consumer.

      :type: str

   .. attribute:: location

      City of the consumer.

      :type: str

   :returns: [description]
   :rtype: [type]


.. py:class:: Vendor


   Bases: :py:obj:`django.db.models.Model`

   Model of the vendor.

   .. attribute:: name

      Name of the vendor.

      :type: str

   .. attribute:: identifier

      Unique identifier of the vendor.

      :type: str

   .. attribute:: gstin

      GSTIN number of the vendor.

      :type: str

   .. attribute:: address

      Primary key of the ``ShippingAddress`` instance associated with the vendor.

      :type: ShippingAddress

   .. attribute:: communication

      Primary key of the ``Communication`` instance associated with the vendor.

      :type: Communication

   .. attribute:: backaccount

      Primary key of the ``BankAccount`` instance associated with the vendor.

      :type: BankAccount

   .. attribute:: purchasedata

      Primary key of the ``PurchaseData`` instance associated with the vendor.

      :type: PurchaseData

   :returns: String representation of the vendor name.
   :rtype: str


.. py:class:: Company


   Bases: :py:obj:`django.db.models.Model`

   Model of the company.

   .. attribute:: name

      Name of the company.

      :type: str

   .. attribute:: owner

      Owner of the company.

      :type: str

   .. attribute:: gstin

      GSTIN number of the company.

      :type: str

   .. attribute:: phone

      Contact number.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: email

      E-mail address of the contact person.

      :type: str

   .. attribute:: location

      City of the company.

      :type: str

   .. attribute:: image

      Photo/logo of the company.

      :type: ImageField

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress`` instance associated with the company.

      :type: ShippingAddress

   :returns: String representation of the company name.
   :rtype: str


.. py:class:: PurchaseInvoice


   Bases: :py:obj:`django.db.models.Model`

   Model for the purchase invoice.

   .. attribute:: company

      Primary key of the ``Company``.

      :type: Company

   .. attribute:: po

      Primary key of the ``PurchaseOrder``.

      :type: PurchaseOrder

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress``.

      :type: ShippingAddress

   .. attribute:: communication

      Primary key of the ``Communication``.

      :type: Communication


.. py:class:: SalesInvoice


   Bases: :py:obj:`django.db.models.Model`

   Model for the sales order invoice.

   .. attribute:: company

      Primary key of the ``Company``.

      :type: Company

   .. attribute:: so

      Primary key of the ``SalesOrder``.

      :type: SalesOrder

   .. attribute:: shippingaddress

      Primary key of the ``ShippingAddress``.

      :type: ShippingAddress


.. py:class:: FilterState


   Bases: :py:obj:`django.db.models.Model`

   Model of the filter state.

   .. attribute:: name

      Name of the filter state.

      :type: str


.. py:class:: FilterColumn


   Bases: :py:obj:`django.db.models.Model`

   Model of the column state.

   .. attribute:: name

      Name of the column.

      :type: str

   .. attribute:: label

      Label of the column.

      :type: str

   .. attribute:: visible

      Visibility flag.

      :type: bool

   .. attribute:: position

      Index of the column.

      :type: int

   .. attribute:: state

      Primary key of the ``FilterState`` instance being referenced by the column instance.

      :type: FilterState


.. py:class:: Object


   Bases: :py:obj:`django.db.models.Model`

   Model for a generic object.

   .. attribute:: identifier

      Unique identifier of the object.

      :type: str

   .. attribute:: name

      Name of the object.

      :type: str

   .. attribute:: model

      Model associated with the object.

      :type: str


.. py:class:: EventCard


   Bases: :py:obj:`django.db.models.Model`

   Model for event card to be displayed in the history view.

   .. attribute:: obj

      Object associated with the event.

      :type: OneToOneField

   .. attribute:: objId

      Unique identifier of the object.

      :type: str

   .. attribute:: objname

      Name of the object.

      :type: str

   .. attribute:: objmodel

      Model of the object.

      :type: str

   .. attribute:: date

      Timestamp of the event.

      :type: DateField

   .. attribute:: operation

      Type of event.

      :type: str


.. py:class:: EventType


   Bases: :py:obj:`django.db.models.Model`

   Model for event type.

   .. attribute:: name

      Name of the event being triggered.

      :type: str

   .. attribute:: label

      Label associated with the event.

      :type: str

   :returns: Returns the string representation of the label when the event type is queried.
   :rtype: Label


.. py:class:: ObjectModel


   Bases: :py:obj:`django.db.models.Model`

   Model associated with an object.

   .. attribute:: name

      Name of the object.

      :type: str

   .. attribute:: label

      Label string of the object.

      :type: str

   .. attribute:: modName

      Name of the model associated with the object.

      :type: str

   :returns: Returns string representation of the label when object model is queried.
   :rtype: Label


.. py:class:: HistoryFilterState


   Bases: :py:obj:`django.db.models.Model`

   Model of filter state of the history.

   .. attribute:: params

      Paramameters of the configured filters.

      :type: str


.. py:class:: ShippingAddress


   Bases: :py:obj:`django.db.models.Model`

   Model of the shipping address.

   .. attribute:: title

      Title of the firm.

      :type: str

   .. attribute:: name

      Name of the firm.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: address

      Postal address.

      :type: str

   .. attribute:: city

      City.

      :type: str

   .. attribute:: state

      State.

      :type: str

   .. attribute:: country

      Country.

      :type: str

   .. attribute:: website

      Official website of the firm.

      :type: URLField

   .. attribute:: post

      Postal code of the firm.

      :type: str


.. py:class:: PurchaseData


   Bases: :py:obj:`django.db.models.Model`

   Model of the purchase data.

   .. attribute:: currency

      Currency of purchase.

      :type: str

   .. attribute:: minorder

      Minimum order quantity.

      :type: int

   .. attribute:: contactperson

      Name of the contact person.

      :type: str

   .. attribute:: refcode

      Reference code.

      :type: str

   .. attribute:: transportmode

      Mode of transport of the shipment.

      :type: str


.. py:class:: Communication


   Bases: :py:obj:`django.db.models.Model`

   Model of the communication information.

   .. attribute:: language

      Language of communication.

      :type: str

   .. attribute:: phone

      Contact number of the firm.

      :type: str

   .. attribute:: email

      E-mail of the contact person.

      :type: EmailField

   .. attribute:: fax

      Fax number.

      :type: str


.. py:class:: BankAccount


   Bases: :py:obj:`django.db.models.Model`

   Model of the bank account details.

   .. attribute:: name

      Name of the bank.

      :type: str

   .. attribute:: branch

      Branch number of the bank.

      :type: str

   .. attribute:: region

      City in which the branch is located.

      :type: str

   .. attribute:: route

      Transit number.

      :type: str

   .. attribute:: number

      Bank account number.

      :type: int

   .. attribute:: acctype

      Type of bank account.

      :type: str

   .. attribute:: iban

      IBAN number.

      :type: str

   .. attribute:: code

      Bank code.

      :type: str

   .. attribute:: branchcode

      Branch code.

      :type: str


.. py:function:: get_columns(state)

   Gets the columns of the display table.

   This function takes a filter state and returns an array of column names that are
   ordered depending on the position attribute of the columns. This order is important
   as the queryset will be rendered in the display table according to the column order
   in this returned array.

   :param state: Filter state of the columns.
   :type state: FilterState

   :returns: A list that dictates the order of the columns.
   :rtype: List


.. py:function:: sort_ascending_descending(request, model)

   Sorts and saves the state of the column.

   This function takes a request, finds which column needs to be sorted in ascending/descending
   order, and returns the sorted queryset.

   :param request: ``GET`` request received for retreiving the list of model instances.
   :type request: HttpRequest
   :param model: Model of the objects being retrieved.
   :type model: Model

   :returns: List of sorted object instances.
   :rtype: QuerySet


.. py:function:: change_column_position(request, state)

   Modifies the column states depending on the request.

   This function:
       - Takes a filter state
       - Extracts the column names into an order array
       - Modifies the column order in the array depending on user input direction (left/right)
       - Saves this modified state of columns into the database
       - Returns the modified column names array

   :param request: ``GET`` request for retrieving the state of the columns.
   :type request: HttpRequest
   :param state: Filter state of the columns.
   :type state: FilterState

   :returns: List of sorted columns.
   :rtype: List


.. py:function:: paginate(queryset, filter, page_number)

   Paginates the list of objects.

   This function takes the entire queryset and filters out only objects belonging to the
   request page

   :param queryset: ``QuerySet`` of the objects retrieved from the database.
   :type queryset: QuerySet
   :param filter: Filter state of the columns.
   :type filter: FilterState
   :param page_number: Page number requested.
   :type page_number: int


.. py:class:: EventCard


   Bases: :py:obj:`django.db.models.Model`

   Model for event card to be displayed in the history view.

   .. attribute:: obj

      Object associated with the event.

      :type: OneToOneField

   .. attribute:: objId

      Unique identifier of the object.

      :type: str

   .. attribute:: objname

      Name of the object.

      :type: str

   .. attribute:: objmodel

      Model of the object.

      :type: str

   .. attribute:: date

      Timestamp of the event.

      :type: DateField

   .. attribute:: operation

      Type of event.

      :type: str


.. py:class:: HistoryFilterState


   Bases: :py:obj:`django.db.models.Model`

   Model of filter state of the history.

   .. attribute:: params

      Paramameters of the configured filters.

      :type: str


.. py:class:: EventCardFilter


   Bases: :py:obj:`django_filters.FilterSet`

   .. py:class:: Meta




.. py:class:: HistoryFilterStateSerializer


   Bases: :py:obj:`rest_framework.serializers.ModelSerializer`

   Serializer for ``HistoryFilterState`` class instance.

   The ``HistoryFilterStateSerializer.data`` attribute gives the ``JSON`` serialized data of the ``HistoryFilterState`` instance::

       {
           "name": PreRelease20x,
           "numEntries" : 10,
           "eventTypes": {
               "Created",
               "Updated",
               "Deleted"
           },
           "objModels": {
               "Company",
               "Vendor",
               "PurchaseOrder",
               "Product",
               "Consumer",
               "SalesOrder",
               "GoodsReceiptNote"
           }
       }


   .. py:class:: Meta




.. py:class:: HistoryForm


   Bases: :py:obj:`django.forms.Form`

   Form for history view.

   .. attribute:: qlen

      Count of the events visible on the history view.

      :type: int


.. py:function:: display_history_view(request)

   Retrieves the list of events on ``GET`` request. The ``create``, ``update``, and ``delete`` events are registered for each model.

   .. http:get:: /history/

       Gets the list of all history items.

       **Example request**:

       .. sourcecode:: http

           GET /history/ HTTP/1.1
           Host: localhost:8000
           Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9

           [
               {
                   "objname": {
                       ""
                   },
                   "operation": {
                       "Created",
                       "Updated",
                       "Deleted"
                   },
                   "objmodel": {
                       "Company",
                       "Vendor",
                       "PurchaseOrder",
                       "Product",
                       "Consumer",
                       "SalesOrder",
                       "GoodsReceiptNote"
                   },
                   "history-qlen": {
                       "10"
                   },
                   "date__gt": {
                       "11/01/2020"
                   },
                   "date__lt": {
                       "09/26/2021"
                   }
               }
           ]


       **Example response**:

       .. sourcecode:: http

           HTTP/1.1 200 OK
           Vary: Accept
           Content-Type: text/html; charset=utf-8

       :reqheader Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
       :statuscode 200: List of filtered history events received successfully.


